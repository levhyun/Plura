{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { useControllableState, useKeyboardDismissable } from '../../../hooks';\nimport { Popper } from '../Popper';\nimport { composeEventHandlers, mergeRefs } from '../../../utils';\nimport { PresenceTransition } from '../Transitions';\nimport { Platform, StyleSheet } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport Box from '../../primitives/Box';\nimport { useId } from '@react-aria/utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport const Tooltip = _ref3 => {\n  let {\n    label,\n    children,\n    onClose,\n    onOpen,\n    defaultIsOpen,\n    placement,\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    offset,\n    isDisabled,\n    hasArrow,\n    arrowSize = 12,\n    isOpen: isOpenProp,\n    ...props\n  } = _ref3;\n  var _ref, _ref2, _props$backgroundColo;\n  if (hasArrow && offset === undefined) {\n    offset = 0;\n  } else {\n    offset = 6;\n  }\n  const resolvedProps = usePropsResolution('Tooltip', props);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: value => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    }\n  });\n  const arrowBg = (_ref = (_ref2 = (_props$backgroundColo = props.backgroundColor) !== null && _props$backgroundColo !== void 0 ? _props$backgroundColo : props.bgColor) !== null && _ref2 !== void 0 ? _ref2 : props.bg) !== null && _ref !== void 0 ? _ref : resolvedProps.bg;\n  const targetRef = React.useRef(null);\n  const enterTimeout = React.useRef();\n  const exitTimeout = React.useRef();\n  const tooltipID = useId();\n  const openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = setTimeout(() => setIsOpen(true), openDelay);\n    }\n  }, [isDisabled, setIsOpen, openDelay]);\n  const closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n    }\n    exitTimeout.current = setTimeout(() => setIsOpen(false), closeDelay);\n  }, [closeDelay, setIsOpen]);\n  React.useEffect(() => () => {\n    clearTimeout(enterTimeout.current);\n    clearTimeout(exitTimeout.current);\n  }, []);\n  let newChildren = children;\n  if (typeof children === 'string') {\n    newChildren = /*#__PURE__*/React.createElement(Box, null, children);\n  }\n  newChildren = /*#__PURE__*/React.cloneElement(newChildren, {\n    'onPress': composeEventHandlers(newChildren.props.onPress, () => {\n      if (closeOnClick) {\n        closeWithDelay();\n      }\n    }),\n    'onFocus': composeEventHandlers(newChildren.props.onFocus, openWithDelay),\n    'onBlur': composeEventHandlers(newChildren.props.onBlur, closeWithDelay),\n    'onMouseEnter': composeEventHandlers(newChildren.props.onMouseEnter, openWithDelay),\n    'onMouseLeave': composeEventHandlers(newChildren.props.onMouseLeave, closeWithDelay),\n    'ref': mergeRefs([newChildren.ref, targetRef]),\n    'aria-describedby': isOpen ? tooltipID : undefined\n  });\n  useKeyboardDismissable({\n    enabled: isOpen,\n    callback: () => setIsOpen(false)\n  }); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, newChildren, isOpen && /*#__PURE__*/React.createElement(OverlayContainer, null, /*#__PURE__*/React.createElement(PresenceTransition, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1,\n      transition: {\n        duration: 150\n      }\n    },\n    exit: {\n      opacity: 0,\n      transition: {\n        duration: 100\n      }\n    },\n    visible: isOpen,\n    style: StyleSheet.absoluteFill\n  }, /*#__PURE__*/React.createElement(Popper, {\n    triggerRef: targetRef,\n    onClose: () => setIsOpen(false),\n    placement: placement,\n    offset: offset\n  }, /*#__PURE__*/React.createElement(Popper.Content, {\n    isOpen: isOpen\n  }, hasArrow && /*#__PURE__*/React.createElement(Popper.Arrow, {\n    borderColor: \"transparent\",\n    backgroundColor: arrowBg,\n    height: arrowSize,\n    width: arrowSize\n  }), /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, {\n    //@ts-ignore\n    accessibilityRole: Platform.OS === 'web' ? 'tooltip' : undefined,\n    nativeID: tooltipID\n  }), label))))));\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,QAA6D,gBAA7D;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,oBAAT,EAA+BC,SAA/B,QAAgD,gBAAhD;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,cAArC;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,OAAO,MAAMC,OAAO,GAAG,SAgBF;EAAA,IAhBG;IACtBC,KADsB;IAEtBC,QAFsB;IAGtBC,OAHsB;IAItBC,MAJsB;IAKtBC,aALsB;IAMtBC,SANsB;IAOtBC,SAAS,GAAG,CAPU;IAQtBC,UAAU,GAAG,CARS;IAStBC,YAAY,GAAG,IATO;IAUtBC,MAVsB;IAWtBC,UAXsB;IAYtBC,QAZsB;IAatBC,SAAS,GAAG,EAbU;IActBC,MAAM,EAAEC,UAdc;IAetB,GAAGC;EAfmB,CAAD;EAgBF;EACnB,IAAIJ,QAAQ,IAAIF,MAAM,KAAKO,SAA3B,EAAsC;IACpCP,MAAM,GAAG,CAAT;EACD,CAFD,MAEO;IACLA,MAAM,GAAG,CAAT;EACD;EAED,MAAMQ,aAAa,GAAGtB,kBAAkB,CAAC,SAAD,EAAYoB,KAAZ,CAAxC;EACA,MAAM,CAACF,MAAD,EAASK,SAAT,IAAsB/B,oBAAoB,CAAC;IAC/CgC,KAAK,EAAEL,UADwC;IAE/CM,YAAY,EAAEhB,aAFiC;IAG/CiB,QAAQ,EAAGF,KAAD,IAAW;MACnBA,KAAK,GAAGhB,MAAM,IAAIA,MAAM,EAAnB,GAAwBD,OAAO,IAAIA,OAAO,EAA/C;IACD;EAL8C,CAAD,CAAhD;EAQA,MAAMoB,OAAO,6CACXP,KAAK,CAACQ,eADK,yEACcR,KAAK,CAACS,OADpB,yCAC+BT,KAAK,CAACU,EADrC,uCAC2CR,aAAa,CAACQ,EADtE;EAGA,MAAMC,SAAS,GAAGxC,KAAK,CAACyC,MAAN,CAAa,IAAb,CAAlB;EAEA,MAAMC,YAAY,GAAG1C,KAAK,CAACyC,MAAN,EAArB;EACA,MAAME,WAAW,GAAG3C,KAAK,CAACyC,MAAN,EAApB;EACA,MAAMG,SAAS,GAAGjC,KAAK,EAAvB;EAEA,MAAMkC,aAAa,GAAG7C,KAAK,CAAC8C,WAAN,CAAkB,MAAM;IAC5C,IAAI,CAACtB,UAAL,EAAiB;MACfkB,YAAY,CAACK,OAAb,GAAuBC,UAAU,CAAC,MAAMhB,SAAS,CAAC,IAAD,CAAhB,EAAwBZ,SAAxB,CAAjC;IACD;EACF,CAJqB,EAInB,CAACI,UAAD,EAAaQ,SAAb,EAAwBZ,SAAxB,CAJmB,CAAtB;EAMA,MAAM6B,cAAc,GAAGjD,KAAK,CAAC8C,WAAN,CAAkB,MAAM;IAC7C,IAAIJ,YAAY,CAACK,OAAjB,EAA0B;MACxBG,YAAY,CAACR,YAAY,CAACK,OAAd,CAAZ;IACD;IACDJ,WAAW,CAACI,OAAZ,GAAsBC,UAAU,CAAC,MAAMhB,SAAS,CAAC,KAAD,CAAhB,EAAyBX,UAAzB,CAAhC;EACD,CALsB,EAKpB,CAACA,UAAD,EAAaW,SAAb,CALoB,CAAvB;EAOAhC,KAAK,CAACmD,SAAN,CACE,MAAM,MAAM;IACVD,YAAY,CAACR,YAAY,CAACK,OAAd,CAAZ;IACAG,YAAY,CAACP,WAAW,CAACI,OAAb,CAAZ;EACD,CAJH,EAKE,EALF;EAQA,IAAIK,WAAW,GAAGrC,QAAlB;EAEA,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;IAChCqC,WAAW,gBAAGpD,oBAACU,GAAD,QAAMK,QAAN,CAAd;EACD;EAEDqC,WAAW,gBAAGpD,KAAK,CAACqD,YAAN,CAAmBD,WAAnB,EAAgC;IAC5C,WAAWhD,oBAAoB,CAAMgD,WAAW,CAACvB,KAAZ,CAAkByB,OAAxB,EAAiC,MAAM;MACpE,IAAIhC,YAAJ,EAAkB;QAChB2B,cAAc;MACf;IACF,CAJ8B,CADa;IAM5C,WAAW7C,oBAAoB,CAC7BgD,WAAW,CAACvB,KAAZ,CAAkB0B,OADW,EAE7BV,aAF6B,CANa;IAU5C,UAAUzC,oBAAoB,CAC5BgD,WAAW,CAACvB,KAAZ,CAAkB2B,MADU,EAE5BP,cAF4B,CAVc;IAc5C,gBAAgB7C,oBAAoB,CAClCgD,WAAW,CAACvB,KAAZ,CAAkB4B,YADgB,EAElCZ,aAFkC,CAdQ;IAkB5C,gBAAgBzC,oBAAoB,CAClCgD,WAAW,CAACvB,KAAZ,CAAkB6B,YADgB,EAElCT,cAFkC,CAlBQ;IAsB5C,OAAO5C,SAAS,CAAC,CAAC+C,WAAW,CAACO,GAAb,EAAkBnB,SAAlB,CAAD,CAtB4B;IAwB5C,oBAAoBb,MAAM,GAAGiB,SAAH,GAAed;EAxBG,CAAhC,CAAd;EA2BA5B,sBAAsB,CAAC;IACrB0D,OAAO,EAAEjC,MADY;IAErBkC,QAAQ,EAAE,MAAM7B,SAAS,CAAC,KAAD;EAFJ,CAAD,CAAtB,CA/EmB,CAmFnB;;EACA,IAAIpB,qBAAqB,CAACiB,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,oBACE7B,0CACGoD,WADH,EAEGzB,MAAM,iBACL3B,oBAACD,gBAAD,qBACEC,oBAACM,kBAAD;IACEwD,OAAO,EAAE;MAAEC,OAAO,EAAE;IAAX,CADX;IAEEC,OAAO,EAAE;MAAED,OAAO,EAAE,CAAX;MAAcE,UAAU,EAAE;QAAEC,QAAQ,EAAE;MAAZ;IAA1B,CAFX;IAGEC,IAAI,EAAE;MAAEJ,OAAO,EAAE,CAAX;MAAcE,UAAU,EAAE;QAAEC,QAAQ,EAAE;MAAZ;IAA1B,CAHR;IAIEE,OAAO,EAAEzC,MAJX;IAKE0C,KAAK,EAAE7D,UAAU,CAAC8D;EALpB,gBAOEtE,oBAACG,MAAD;IACEoE,UAAU,EAAE/B,SADd;IAEExB,OAAO,EAAE,MAAMgB,SAAS,CAAC,KAAD,CAF1B;IAGEb,SAAS,EAAEA,SAHb;IAIEI,MAAM,EAAEA;EAJV,gBAMEvB,oBAACG,MAAD,CAAQqE,OAAR;IAAgB7C,MAAM,EAAEA;EAAxB,GACGF,QAAQ,iBACPzB,oBAACG,MAAD,CAAQsE,KAAR;IACEC,WAAW,EAAC,aADd;IAEErC,eAAe,EAAED,OAFnB;IAGEuC,MAAM,EAAEjD,SAHV;IAIEkD,KAAK,EAAElD;EAJT,EAFJ,eASE1B,oBAACU,GAAD,eACMqB,aADN;IAEE;IACA8C,iBAAiB,EACftE,QAAQ,CAACuE,EAAT,KAAgB,KAAhB,GAAwB,SAAxB,GAAoChD,SAJxC;IAMEiD,QAAQ,EAAEnC;EANZ,IAQG9B,KARH,CATF,CANF,CAPF,CADF,CAHJ,CADF;AA4CD,CAnJM","names":["OverlayContainer","React","useControllableState","useKeyboardDismissable","Popper","composeEventHandlers","mergeRefs","PresenceTransition","Platform","StyleSheet","usePropsResolution","Box","useId","useHasResponsiveProps","Tooltip","label","children","onClose","onOpen","defaultIsOpen","placement","openDelay","closeDelay","closeOnClick","offset","isDisabled","hasArrow","arrowSize","isOpen","isOpenProp","props","undefined","resolvedProps","setIsOpen","value","defaultValue","onChange","arrowBg","backgroundColor","bgColor","bg","targetRef","useRef","enterTimeout","exitTimeout","tooltipID","openWithDelay","useCallback","current","setTimeout","closeWithDelay","clearTimeout","useEffect","newChildren","cloneElement","onPress","onFocus","onBlur","onMouseEnter","onMouseLeave","ref","enabled","callback","initial","opacity","animate","transition","duration","exit","visible","style","absoluteFill","triggerRef","Content","Arrow","borderColor","height","width","accessibilityRole","OS","nativeID"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\Tooltip\\Tooltip.tsx"],"sourcesContent":["import { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { useControllableState, useKeyboardDismissable } from '../../../hooks';\nimport { Popper } from '../Popper';\nimport { composeEventHandlers, mergeRefs } from '../../../utils';\nimport { PresenceTransition } from '../Transitions';\nimport { Platform, StyleSheet } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport Box from '../../primitives/Box';\nimport type { ITooltipProps } from './types';\nimport { useId } from '@react-aria/utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const Tooltip = ({\n  label,\n  children,\n  onClose,\n  onOpen,\n  defaultIsOpen,\n  placement,\n  openDelay = 0,\n  closeDelay = 0,\n  closeOnClick = true,\n  offset,\n  isDisabled,\n  hasArrow,\n  arrowSize = 12,\n  isOpen: isOpenProp,\n  ...props\n}: ITooltipProps) => {\n  if (hasArrow && offset === undefined) {\n    offset = 0;\n  } else {\n    offset = 6;\n  }\n\n  const resolvedProps = usePropsResolution('Tooltip', props);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const arrowBg =\n    props.backgroundColor ?? props.bgColor ?? props.bg ?? resolvedProps.bg;\n\n  const targetRef = React.useRef(null);\n\n  const enterTimeout = React.useRef<any>();\n  const exitTimeout = React.useRef<any>();\n  const tooltipID = useId();\n\n  const openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = setTimeout(() => setIsOpen(true), openDelay);\n    }\n  }, [isDisabled, setIsOpen, openDelay]);\n\n  const closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n    }\n    exitTimeout.current = setTimeout(() => setIsOpen(false), closeDelay);\n  }, [closeDelay, setIsOpen]);\n\n  React.useEffect(\n    () => () => {\n      clearTimeout(enterTimeout.current);\n      clearTimeout(exitTimeout.current);\n    },\n    []\n  );\n\n  let newChildren = children;\n\n  if (typeof children === 'string') {\n    newChildren = <Box>{children}</Box>;\n  }\n\n  newChildren = React.cloneElement(newChildren, {\n    'onPress': composeEventHandlers<any>(newChildren.props.onPress, () => {\n      if (closeOnClick) {\n        closeWithDelay();\n      }\n    }),\n    'onFocus': composeEventHandlers<any>(\n      newChildren.props.onFocus,\n      openWithDelay\n    ),\n    'onBlur': composeEventHandlers<any>(\n      newChildren.props.onBlur,\n      closeWithDelay\n    ),\n    'onMouseEnter': composeEventHandlers<any>(\n      newChildren.props.onMouseEnter,\n      openWithDelay\n    ),\n    'onMouseLeave': composeEventHandlers<any>(\n      newChildren.props.onMouseLeave,\n      closeWithDelay\n    ),\n    'ref': mergeRefs([newChildren.ref, targetRef]),\n\n    'aria-describedby': isOpen ? tooltipID : undefined,\n  });\n\n  useKeyboardDismissable({\n    enabled: isOpen,\n    callback: () => setIsOpen(false),\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <>\n      {newChildren}\n      {isOpen && (\n        <OverlayContainer>\n          <PresenceTransition\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1, transition: { duration: 150 } }}\n            exit={{ opacity: 0, transition: { duration: 100 } }}\n            visible={isOpen}\n            style={StyleSheet.absoluteFill}\n          >\n            <Popper\n              triggerRef={targetRef}\n              onClose={() => setIsOpen(false)}\n              placement={placement}\n              offset={offset}\n            >\n              <Popper.Content isOpen={isOpen}>\n                {hasArrow && (\n                  <Popper.Arrow\n                    borderColor=\"transparent\"\n                    backgroundColor={arrowBg}\n                    height={arrowSize}\n                    width={arrowSize}\n                  />\n                )}\n                <Box\n                  {...resolvedProps}\n                  //@ts-ignore\n                  accessibilityRole={\n                    Platform.OS === 'web' ? 'tooltip' : undefined\n                  }\n                  nativeID={tooltipID}\n                >\n                  {label}\n                </Box>\n              </Popper.Content>\n            </Popper>\n          </PresenceTransition>\n        </OverlayContainer>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}