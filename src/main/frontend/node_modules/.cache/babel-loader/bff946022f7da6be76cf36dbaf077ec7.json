{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport { StyleSheet, Platform } from 'react-native';\nimport { default as Box } from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks';\nconst AspectView = /*#__PURE__*/forwardRef((props, ref) => {\n  const [layout, setLayout] = React.useState();\n  const aspectViewStyle = [StyleSheet.flatten(props.style) || {}];\n  if (layout) {\n    // @ts-ignore\n    let {\n      width = 0,\n      height = 0\n    } = layout;\n    if (width === 0) {\n      aspectViewStyle.push({\n        width: height * props.aspectRatio,\n        height\n      });\n    } else {\n      aspectViewStyle.push({\n        width,\n        height: width / props.aspectRatio\n      });\n    }\n  }\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    ref: ref\n  }, props, {\n    style: aspectViewStyle,\n    onLayout: _ref => {\n      let {\n        nativeEvent: {\n          layout: inLayout\n        }\n      } = _ref;\n      return setLayout(inLayout);\n    }\n  }));\n});\nconst AspectRatio = (props, ref) => {\n  var _children$props;\n  const {\n    ratio,\n    children = /*#__PURE__*/React.createElement(React.Fragment, null),\n    ...resolvedProps\n  } = usePropsResolution('AspectRatio', props, {}, {\n    resolveResponsively: ['ratio']\n  });\n  let computedStyle = resolvedProps.style;\n  const newChildWithProps = /*#__PURE__*/React.cloneElement(children, {\n    ...(children === null || children === void 0 ? void 0 : children.props),\n    style: StyleSheet.absoluteFillObject\n  }, children === null || children === void 0 ? void 0 : (_children$props = children.props) === null || _children$props === void 0 ? void 0 : _children$props.children); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  } // DOC:  It uses a aspectRatio property of React Native and manually calculate on Web\n\n  if (Platform.OS === 'web') {\n    return /*#__PURE__*/React.createElement(AspectView, _extends({\n      aspectRatio: ratio\n    }, resolvedProps, {\n      ref: ref\n    }), newChildWithProps);\n  } else {\n    computedStyle = StyleSheet.flatten([{\n      style: resolvedProps.style\n    }, {\n      aspectRatio: ratio\n    }]);\n    return /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, {\n      style: computedStyle,\n      ref: ref\n    }), newChildWithProps);\n  }\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(AspectRatio));","map":{"version":3,"mappings":"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","names":["React","forwardRef","memo","StyleSheet","Platform","default","Box","useHasResponsiveProps","usePropsResolution","AspectView","props","ref","layout","setLayout","useState","aspectViewStyle","flatten","style","width","height","push","aspectRatio","onLayout","nativeEvent","inLayout","AspectRatio","ratio","children","resolvedProps","resolveResponsively","computedStyle","newChildWithProps","cloneElement","absoluteFillObject","_children$props","OS"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\AspectRatio\\index.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet, ViewStyle, Platform } from 'react-native';\nimport { default as Box } from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks';\nimport type { IAspectRatioProps } from './types';\n\nconst AspectView = forwardRef((props: any, ref?: any) => {\n  const [layout, setLayout] = React.useState();\n  const aspectViewStyle = [StyleSheet.flatten(props.style) || {}];\n  if (layout) {\n    // @ts-ignore\n    let { width = 0, height = 0 } = layout;\n    if (width === 0) {\n      aspectViewStyle.push({ width: height * props.aspectRatio, height });\n    } else {\n      aspectViewStyle.push({ width, height: width / props.aspectRatio });\n    }\n  }\n\n  return (\n    <Box\n      ref={ref}\n      {...props}\n      style={aspectViewStyle}\n      onLayout={({ nativeEvent: { layout: inLayout } }: any) =>\n        setLayout(inLayout)\n      }\n    />\n  );\n});\n\nconst AspectRatio = (props: IAspectRatioProps, ref?: any) => {\n  const { ratio, children = <></>, ...resolvedProps } = usePropsResolution(\n    'AspectRatio',\n    props,\n    {},\n    { resolveResponsively: ['ratio'] }\n  );\n  let computedStyle: ViewStyle | undefined = resolvedProps.style;\n  const newChildWithProps = React.cloneElement(\n    children,\n    {\n      ...children?.props,\n      style: StyleSheet.absoluteFillObject,\n    },\n    children?.props?.children\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  // DOC:  It uses a aspectRatio property of React Native and manually calculate on Web\n  if (Platform.OS === 'web') {\n    return (\n      <AspectView aspectRatio={ratio} {...resolvedProps} ref={ref}>\n        {newChildWithProps}\n      </AspectView>\n    );\n  } else {\n    computedStyle = StyleSheet.flatten([\n      { style: resolvedProps.style },\n      { aspectRatio: ratio },\n    ]);\n    return (\n      <Box {...resolvedProps} style={computedStyle} ref={ref}>\n        {newChildWithProps}\n      </Box>\n    );\n  }\n};\n\nexport default memo(forwardRef(AspectRatio));\n"]},"metadata":{},"sourceType":"module"}