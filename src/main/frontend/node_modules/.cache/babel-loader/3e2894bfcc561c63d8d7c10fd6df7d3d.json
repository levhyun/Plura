{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { VStack } from '../Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst List = (_ref, ref) => {\n  let {\n    children,\n    divider,\n    ...props\n  } = _ref;\n  const {\n    _text,\n    _hover,\n    _focus,\n    _pressed,\n    ...resolvedProps\n  } = usePropsResolution('List', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  } // add props to children\n\n  children = React.Children.map(children, (child, ind) => {\n    var _child$props, _child$props2, _child$props3, _child$props4;\n    return /*#__PURE__*/React.cloneElement(child, {\n      index: ind,\n      _text: {\n        ..._text,\n        ...((_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props._text)\n      },\n      _hover: {\n        ..._hover,\n        ...((_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2._hover)\n      },\n      _focus: {\n        ..._focus,\n        ...((_child$props3 = child.props) === null || _child$props3 === void 0 ? void 0 : _child$props3._focus)\n      },\n      _pressed: {\n        ..._pressed,\n        ...((_child$props4 = child.props) === null || _child$props4 === void 0 ? void 0 : _child$props4._pressed)\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(VStack, _extends({\n    divider: divider,\n    ref: ref\n  }, resolvedProps), children);\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(List));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,IAAI,GAAG,OAA8CC,GAA9C,KAA4D;EAAA,IAA3D;IAAEC,QAAF;IAAYC,OAAZ;IAAqB,GAAGC;EAAxB,CAAD;EACX,MAAM;IACJC,KADI;IAEJC,MAFI;IAGJC,MAHI;IAIJC,QAJI;IAKJ,GAAGC;EALC,IAMFX,kBAAkB,CAAC,MAAD,EAASM,KAAT,CANtB,CADuE,CAQvE;;EACA,IAAIL,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD,CAXsE,CAYvE;;EACAF,QAAQ,GAAGR,KAAK,CAACgB,QAAN,CAAeC,GAAf,CAAmBT,QAAnB,EAA6B,CAACU,KAAD,EAAaC,GAAb,KAA6B;IAAA;IACnE,oBAAOnB,KAAK,CAACoB,YAAN,CAAmBF,KAAnB,EAA0B;MAC/BG,KAAK,EAAEF,GADwB;MAE/BR,KAAK,EAAE;QAAE,GAAGA,KAAL;QAAY,oBAAGO,KAAK,CAACR,KAAT,iDAAGY,aAAaX,KAAhB;MAAZ,CAFwB;MAG/BC,MAAM,EAAE;QAAE,GAAGA,MAAL;QAAa,qBAAGM,KAAK,CAACR,KAAT,kDAAGa,cAAaX,MAAhB;MAAb,CAHuB;MAI/BC,MAAM,EAAE;QAAE,GAAGA,MAAL;QAAa,qBAAGK,KAAK,CAACR,KAAT,kDAAGc,cAAaX,MAAhB;MAAb,CAJuB;MAK/BC,QAAQ,EAAE;QAAE,GAAGA,QAAL;QAAe,qBAAGI,KAAK,CAACR,KAAT,kDAAGe,cAAaX,QAAhB;MAAf;IALqB,CAA1B,CAAP;EAOD,CARU,CAAX;EAUA,oBACEd,oBAACG,MAAD;IAAQM,OAAO,EAAEA,OAAjB;IAA0BF,GAAG,EAAEA;EAA/B,GAAwCQ,aAAxC,GACGP,QADH,CADF;AAKD,CA5BD;AA+BA,4BAAeP,IAAI,eAACC,UAAU,CAACI,IAAD,CAAX,CAAnB","names":["React","memo","forwardRef","VStack","usePropsResolution","useHasResponsiveProps","List","ref","children","divider","props","_text","_hover","_focus","_pressed","resolvedProps","Children","map","child","ind","cloneElement","index","_child$props","_child$props2","_child$props3","_child$props4"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\primitives\\List\\List.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { VStack } from '../Stack';\nimport type { IListProps, IListItemProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst List = ({ children, divider, ...props }: IListProps, ref?: any) => {\n  const {\n    _text,\n    _hover,\n    _focus,\n    _pressed,\n    ...resolvedProps\n  } = usePropsResolution('List', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  // add props to children\n  children = React.Children.map(children, (child: any, ind: number) => {\n    return React.cloneElement(child, {\n      index: ind,\n      _text: { ..._text, ...child.props?._text },\n      _hover: { ..._hover, ...child.props?._hover },\n      _focus: { ..._focus, ...child.props?._focus },\n      _pressed: { ..._pressed, ...child.props?._pressed },\n    });\n  });\n\n  return (\n    <VStack divider={divider} ref={ref} {...resolvedProps}>\n      {children}\n    </VStack>\n  );\n};\n\nexport type { IListProps, IListItemProps };\nexport default memo(forwardRef(List));\n"]},"metadata":{},"sourceType":"module"}