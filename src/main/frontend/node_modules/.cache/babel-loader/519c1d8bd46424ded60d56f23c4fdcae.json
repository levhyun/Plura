{"ast":null,"code":"import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\nexport function useTypeahead(props) {\n  let defaultValues = {\n    ...dropdownDefaultStateValues\n  };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n  const [state, dispatch] = React.useReducer(useTypeaheadReducer, defaultValues);\n  const dispatchWithProps = object => {\n    dispatch({\n      ...object,\n      props\n    });\n  };\n  const {\n    inputValue,\n    isOpen\n  } = state;\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString\n  } = props;\n  const isControlled = isControlledProp(props, 'selectedItem');\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem)\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n  const onChangeText = text => {\n    onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange({\n      inputValue: text\n    });\n    dispatchWithProps({\n      type: stateChangeTypes.InputChange,\n      inputValue: text\n    });\n  };\n  const handleItemSelect = (item, index) => {\n    onSelectedItemChange === null || onSelectedItemChange === void 0 ? void 0 : onSelectedItemChange(item);\n    dispatchWithProps({\n      type: stateChangeTypes.ItemClick,\n      index\n    });\n    Keyboard.dismiss();\n  };\n  const getMenuItemProps = (item, index) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem'\n    };\n  };\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu',\n      accessibilityHint: \"Showing \".concat(items.length, \" records\")\n    };\n  };\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({\n          type: stateChangeTypes.ToggleButtonClick\n        });\n      }\n    };\n  };\n  const getInputProps = (propInputVal, propOnchangeText) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox',\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen\n      }\n    };\n  };\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen\n  };\n}","map":{"version":3,"mappings":"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","names":["useTypeaheadReducer","React","useEffect","stateChangeTypes","Keyboard","dropdownDefaultStateValues","getDefaultValue","isControlledProp","props","key","undefined","useTypeahead","defaultValues","isOpen","state","dispatch","useReducer","dispatchWithProps","object","inputValue","items","onInputValueChange","onSelectedItemChange","selectedItem","itemToString","isControlled","type","ControlledPropUpdatedSelectedItem","onChangeText","text","InputChange","handleItemSelect","item","index","ItemClick","dismiss","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","length","getToggleButtonProps","ToggleButtonClick","getInputProps","propInputVal","propOnchangeText","value","accessibilityLabel","accessibilityState","expanded"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\Typeahead\\useTypeahead\\useTypeahead.ts"],"sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport type { AccessibilityRole } from 'react-native';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props: any, key: string) {\n  return props[key] !== undefined;\n}\n\nimport type { IUseTypeaheadProps } from './types';\n\nexport function useTypeahead(props: IUseTypeaheadProps) {\n  let defaultValues = { ...dropdownDefaultStateValues };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  const [state, dispatch] = React.useReducer(\n    useTypeaheadReducer,\n    defaultValues\n  );\n\n  const dispatchWithProps = (object: any) => {\n    dispatch({ ...object, props });\n  };\n\n  const { inputValue, isOpen } = state;\n\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString,\n  } = props;\n\n  const isControlled = isControlledProp(props, 'selectedItem');\n\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem),\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = (text: string) => {\n    onInputValueChange?.({ inputValue: text });\n    dispatchWithProps({ type: stateChangeTypes.InputChange, inputValue: text });\n  };\n\n  const handleItemSelect = (item: any, index: number) => {\n    onSelectedItemChange?.(item);\n    dispatchWithProps({ type: stateChangeTypes.ItemClick, index });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item: any, index: number) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem' as AccessibilityRole,\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu' as AccessibilityRole,\n      accessibilityHint: `Showing ${items.length} records`,\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({ type: stateChangeTypes.ToggleButtonClick });\n      },\n    };\n  };\n\n  const getInputProps = (propInputVal?: any, propOnchangeText?: any) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox' as AccessibilityRole,\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen,\n      },\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}