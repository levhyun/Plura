{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { useState, memo, forwardRef, useCallback, useRef } from 'react';\nimport { Image as RNImage } from 'react-native';\nimport Text from '../Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { makeStyledComponent } from '../../../utils/styled';\nconst StyledImage = makeStyledComponent(RNImage);\nconst Image = /*#__PURE__*/memo( /*#__PURE__*/forwardRef((props, ref) => {\n  const {\n    source,\n    src,\n    fallbackElement,\n    alt,\n    fallbackSource,\n    ignoreFallback,\n    _alt,\n    ...resolvedProps\n  } = usePropsResolution('Image', props);\n  const finalSource = useRef(null);\n  const getSource = useCallback(() => {\n    if (source) {\n      finalSource.current = source;\n    } else if (src) {\n      finalSource.current = {\n        uri: src\n      };\n    }\n    return finalSource.current; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [source === null || source === void 0 ? void 0 : source.uri, src]);\n  const [renderedSource, setSource] = useState(getSource());\n  const [alternate, setAlternate] = useState(false);\n  const [fallbackSourceFlag, setfallbackSourceFlag] = useState(true);\n  React.useEffect(() => {\n    setSource(getSource());\n    return () => {\n      finalSource.current = null;\n    };\n  }, [source === null || source === void 0 ? void 0 : source.uri, src, getSource]);\n  const onImageLoadError = useCallback(event => {\n    props.onError && props.onError(event);\n    console.warn(event.nativeEvent.error);\n    if (!ignoreFallback && fallbackSource && fallbackSource !== renderedSource && fallbackSourceFlag) {\n      setfallbackSourceFlag(false);\n      setSource(fallbackSource);\n    } else {\n      setAlternate(true);\n    }\n  }, [fallbackSource, fallbackSourceFlag, ignoreFallback, props, renderedSource]); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (!alt) {\n    console.warn('Please pass alt prop to Image component');\n  }\n  if (alternate) {\n    if (fallbackElement) {\n      if ( /*#__PURE__*/React.isValidElement(fallbackElement)) {\n        return fallbackElement;\n      }\n    } else return /*#__PURE__*/React.createElement(Text, _alt, alt);\n  }\n  return /*#__PURE__*/React.createElement(StyledImage, _extends({\n    source: renderedSource,\n    accessibilityLabel: alt,\n    alt: alt\n  }, resolvedProps, {\n    onError: onImageLoadError,\n    ref: ref\n  }));\n}));\nconst ImageWithStatics = {\n  ...Image,\n  //@ts-ignore\n  getSize: RNImage.getSize,\n  prefetch: RNImage.prefetch,\n  queryCache: RNImage.queryCache\n};\nexport default ImageWithStatics;","map":{"version":3,"mappings":"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","names":["React","useState","memo","forwardRef","useCallback","useRef","Image","RNImage","Text","usePropsResolution","useHasResponsiveProps","makeStyledComponent","StyledImage","props","ref","source","src","fallbackElement","alt","fallbackSource","ignoreFallback","_alt","resolvedProps","finalSource","getSource","current","uri","renderedSource","setSource","alternate","setAlternate","fallbackSourceFlag","setfallbackSourceFlag","useEffect","onImageLoadError","event","onError","console","warn","nativeEvent","error","isValidElement","accessibilityLabel","ImageWithStatics","getSize","prefetch","queryCache"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\primitives\\Image\\index.tsx"],"sourcesContent":["import React, { useState, memo, forwardRef, useCallback, useRef } from 'react';\nimport { Image as RNImage } from 'react-native';\nimport Text from '../Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IImageProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { makeStyledComponent } from '../../../utils/styled';\n\nconst StyledImage = makeStyledComponent(RNImage);\n\nconst Image = memo(\n  forwardRef((props: IImageProps, ref: any) => {\n    const {\n      source,\n      src,\n      fallbackElement,\n      alt,\n      fallbackSource,\n      ignoreFallback,\n      _alt,\n      ...resolvedProps\n    } = usePropsResolution('Image', props);\n\n    const finalSource: any = useRef(null);\n    const getSource = useCallback(() => {\n      if (source) {\n        finalSource.current = source;\n      } else if (src) {\n        finalSource.current = { uri: src };\n      }\n      return finalSource.current;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [source?.uri, src]);\n\n    const [renderedSource, setSource] = useState(getSource());\n    const [alternate, setAlternate] = useState(false);\n    const [fallbackSourceFlag, setfallbackSourceFlag] = useState(true);\n\n    React.useEffect(() => {\n      setSource(getSource());\n      return () => {\n        finalSource.current = null;\n      };\n    }, [source?.uri, src, getSource]);\n\n    const onImageLoadError = useCallback(\n      (event: any) => {\n        props.onError && props.onError(event);\n        console.warn(event.nativeEvent.error);\n        if (\n          !ignoreFallback &&\n          fallbackSource &&\n          fallbackSource !== renderedSource &&\n          fallbackSourceFlag\n        ) {\n          setfallbackSourceFlag(false);\n          setSource(fallbackSource);\n        } else {\n          setAlternate(true);\n        }\n      },\n      [\n        fallbackSource,\n        fallbackSourceFlag,\n        ignoreFallback,\n        props,\n        renderedSource,\n      ]\n    );\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n    if (!alt) {\n      console.warn('Please pass alt prop to Image component');\n    }\n\n    if (alternate) {\n      if (fallbackElement) {\n        if (React.isValidElement(fallbackElement)) {\n          return fallbackElement;\n        }\n      } else return <Text {..._alt}>{alt}</Text>;\n    }\n    return (\n      <StyledImage\n        source={renderedSource}\n        accessibilityLabel={alt}\n        alt={alt}\n        {...resolvedProps}\n        onError={onImageLoadError}\n        ref={ref}\n      />\n    );\n  })\n);\n\ninterface ImageStatics {\n  getSize: typeof RNImage.prefetch;\n  prefetch: typeof RNImage.prefetch;\n  queryCache: typeof RNImage.queryCache;\n}\nconst ImageWithStatics: typeof Image & ImageStatics = {\n  ...Image,\n  //@ts-ignore\n  getSize: RNImage.getSize,\n  prefetch: RNImage.prefetch,\n  queryCache: RNImage.queryCache,\n};\n\nexport default ImageWithStatics;\nexport type { IImageProps };\n"]},"metadata":{},"sourceType":"module"}