{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Backdrop from '../Backdrop';\nimport { Slide } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport Box from '../../primitives/Box';\nimport { Fade } from '../Transitions';\nimport { useKeyboardBottomInset } from '../../../utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst AlertDialog = (_ref, ref) => {\n  let {\n    children,\n    isOpen,\n    onClose,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    avoidKeyboard,\n    closeOnOverlayClick = false,\n    isKeyboardDismissable = true,\n    overlayVisible = true,\n    backdropVisible = true,\n    animationPreset,\n    ...rest\n  } = _ref;\n  const bottomInset = useKeyboardBottomInset();\n  const {\n    contentSize,\n    _backdrop,\n    _backdropFade,\n    _fade,\n    _slide,\n    ...restThemeProps\n  } = usePropsResolution('AlertDialog', rest);\n  const [visible, setVisible] = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: val => {\n      if (!val) onClose && onClose();\n    }\n  });\n  const handleClose = () => setVisible(false);\n  const child = /*#__PURE__*/React.createElement(Box, _extends({\n    bottom: avoidKeyboard ? bottomInset + 'px' : undefined\n  }, restThemeProps, {\n    ref: ref\n  }), children); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Overlay, {\n    isOpen: visible,\n    onRequestClose: handleClose,\n    isKeyboardDismissable: isKeyboardDismissable,\n    useRNModalOnAndroid: true,\n    unmountOnExit: true\n  }, /*#__PURE__*/React.createElement(AlertDialogContext.Provider, {\n    value: {\n      handleClose,\n      contentSize,\n      initialFocusRef,\n      finalFocusRef\n    }\n  }, /*#__PURE__*/React.createElement(Fade, _extends({\n    in: visible,\n    style: StyleSheet.absoluteFill\n  }, _backdropFade), overlayVisible && backdropVisible && /*#__PURE__*/React.createElement(Backdrop, _extends({\n    onPress: () => {\n      closeOnOverlayClick && handleClose();\n    }\n  }, _backdrop))), animationPreset === 'slide' ? /*#__PURE__*/React.createElement(Slide, _extends({\n    in: visible\n  }, _slide), /*#__PURE__*/React.createElement(FocusScope, {\n    contain: visible,\n    autoFocus: visible && !initialFocusRef,\n    restoreFocus: visible && !finalFocusRef\n  }, child)) : /*#__PURE__*/React.createElement(Fade, _extends({\n    in: visible,\n    style: StyleSheet.absoluteFill\n  }, _fade), /*#__PURE__*/React.createElement(FocusScope, {\n    contain: visible,\n    autoFocus: visible && !initialFocusRef,\n    restoreFocus: visible && !finalFocusRef\n  }, child))));\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(AlertDialog));","map":{"version":3,"mappings":"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","names":["React","forwardRef","memo","StyleSheet","Backdrop","Slide","FocusScope","useControllableState","usePropsResolution","AlertDialogContext","Box","Fade","useKeyboardBottomInset","Overlay","useHasResponsiveProps","AlertDialog","ref","children","isOpen","onClose","defaultIsOpen","initialFocusRef","finalFocusRef","avoidKeyboard","closeOnOverlayClick","isKeyboardDismissable","overlayVisible","backdropVisible","animationPreset","rest","bottomInset","contentSize","_backdrop","_backdropFade","_fade","_slide","restThemeProps","visible","setVisible","value","defaultValue","onChange","val","handleClose","child","bottom","undefined","onRequestClose","useRNModalOnAndroid","unmountOnExit","Provider","in","style","absoluteFill","onPress","contain","autoFocus","restoreFocus"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\AlertDialog\\AlertDialog.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Backdrop from '../Backdrop';\nimport { Slide } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport Box from '../../primitives/Box';\nimport type { IAlertDialogProps } from './types';\nimport { Fade } from '../Transitions';\nimport { useKeyboardBottomInset } from '../../../utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialog = (\n  {\n    children,\n    isOpen,\n    onClose,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    avoidKeyboard,\n    closeOnOverlayClick = false,\n    isKeyboardDismissable = true,\n    overlayVisible = true,\n    backdropVisible = true,\n    animationPreset,\n    ...rest\n  }: IAlertDialogProps,\n  ref: any\n) => {\n  const bottomInset = useKeyboardBottomInset();\n  const {\n    contentSize,\n    _backdrop,\n    _backdropFade,\n    _fade,\n    _slide,\n    ...restThemeProps\n  } = usePropsResolution('AlertDialog', rest);\n\n  const [visible, setVisible] = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: (val) => {\n      if (!val) onClose && onClose();\n    },\n  });\n\n  const handleClose = () => setVisible(false);\n\n  const child = (\n    <Box\n      bottom={avoidKeyboard ? bottomInset + 'px' : undefined}\n      {...restThemeProps}\n      ref={ref}\n    >\n      {children}\n    </Box>\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  return (\n    <Overlay\n      isOpen={visible}\n      onRequestClose={handleClose}\n      isKeyboardDismissable={isKeyboardDismissable}\n      useRNModalOnAndroid\n      unmountOnExit\n    >\n      <AlertDialogContext.Provider\n        value={{\n          handleClose,\n          contentSize,\n          initialFocusRef,\n          finalFocusRef,\n        }}\n      >\n        <Fade in={visible} style={StyleSheet.absoluteFill} {..._backdropFade}>\n          {overlayVisible && backdropVisible && (\n            <Backdrop\n              onPress={() => {\n                closeOnOverlayClick && handleClose();\n              }}\n              {..._backdrop}\n            />\n          )}\n        </Fade>\n        {animationPreset === 'slide' ? (\n          <Slide in={visible} {..._slide}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Slide>\n        ) : (\n          <Fade in={visible} style={StyleSheet.absoluteFill} {..._fade}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Fade>\n        )}\n      </AlertDialogContext.Provider>\n    </Overlay>\n  );\n};\n\nexport default memo(forwardRef(AlertDialog));\n"]},"metadata":{},"sourceType":"module"}