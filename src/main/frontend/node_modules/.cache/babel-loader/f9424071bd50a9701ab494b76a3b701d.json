{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport Text from '../../primitives/Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../../primitives/Pressable';\nimport { MenuContext } from './MenuContext';\nimport { useMenuItem } from './useMenu';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { HStack } from '../../primitives';\nconst MenuItem = (_ref, ref) => {\n  let {\n    children,\n    isDisabled,\n    onPress,\n    textValue,\n    ...props\n  } = _ref;\n  const {\n    closeOnSelect,\n    onClose\n  } = React.useContext(MenuContext);\n  const menuItemRef = React.useRef(null);\n  const mergedRef = mergeRefs([menuItemRef, ref]);\n  const {\n    _text,\n    _stack,\n    ...resolvedProps\n  } = usePropsResolution('MenuItem', props, {\n    isDisabled\n  }, {\n    cascadePseudoProps: true\n  });\n  const [textContent, setTextContent] = React.useState('');\n  React.useEffect(() => {\n    const menuItem = menuItemRef.current;\n    if (menuItem) {\n      var _menuItem$textContent;\n      setTextContent(((_menuItem$textContent = menuItem.textContent) !== null && _menuItem$textContent !== void 0 ? _menuItem$textContent : '').trim());\n    }\n  }, [children]);\n  const menuItemProps = useMenuItem({\n    textValue: textValue !== null && textValue !== void 0 ? textValue : textContent,\n    ref: menuItemRef\n  }); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Pressable, _extends({}, menuItemProps, resolvedProps, {\n    ref: mergedRef,\n    disabled: isDisabled,\n    accessibilityState: {\n      disabled: isDisabled\n    },\n    onPress: e => {\n      if (!isDisabled) {\n        onPress && onPress(e);\n        if (closeOnSelect) {\n          onClose && onClose();\n        }\n      }\n    }\n  }), /*#__PURE__*/React.createElement(HStack, _stack, React.Children.map(children, (child, index) => {\n    if (typeof child === 'string' || typeof child === 'number') {\n      return /*#__PURE__*/React.createElement(Text, _extends({\n        key: \"menu-item-\".concat(index)\n      }, _text), child);\n    } else {\n      return child;\n    }\n  })));\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(MenuItem));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,SAAT,QAA0B,4BAA1B;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,MAAMC,QAAQ,GAAG,OAEfC,GAFe,KAGZ;EAAA,IAFH;IAAEC,QAAF;IAAYC,UAAZ;IAAwBC,OAAxB;IAAiCC,SAAjC;IAA4C,GAAGC;EAA/C,CADe;EAIf,MAAM;IAAEC,aAAF;IAAiBC;EAAjB,IAA6BnB,KAAK,CAACoB,UAAN,CAAiBd,WAAjB,CAAnC;EACA,MAAMe,WAAW,GAAGrB,KAAK,CAACsB,MAAN,CAAkB,IAAlB,CAApB;EACA,MAAMC,SAAS,GAAGf,SAAS,CAAC,CAACa,WAAD,EAAcT,GAAd,CAAD,CAA3B;EACA,MAAM;IAAEY,KAAF;IAASC,MAAT;IAAiB,GAAGC;EAApB,IAAsCtB,kBAAkB,CAC5D,UAD4D,EAE5Da,KAF4D,EAG5D;IACEH;EADF,CAH4D,EAM5D;IACEa,kBAAkB,EAAE;EADtB,CAN4D,CAA9D;EAUA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC7B,KAAK,CAAC8B,QAAN,CAAe,EAAf,CAAtC;EACA9B,KAAK,CAAC+B,SAAN,CAAgB,MAAM;IACpB,MAAMC,QAAQ,GAAGX,WAAW,CAACY,OAA7B;IACA,IAAID,QAAJ,EAAc;MAAA;MACZH,cAAc,CAAC,0BAACG,QAAQ,CAACJ,WAAV,yEAAyB,EAAzB,EAA6BM,IAA7B,EAAD,CAAd;IACD;EACF,CALD,EAKG,CAACrB,QAAD,CALH;EAOA,MAAMsB,aAAa,GAAG5B,WAAW,CAAC;IAChCS,SAAS,EAAEA,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAeY,WADQ;IAEhChB,GAAG,EAAES;EAF2B,CAAD,CAAjC,CAtBG,CA2BH;;EACA,IAAIZ,qBAAqB,CAACQ,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,oBACEjB,oBAACK,SAAD,eACM8B,aADN,EAEMT,aAFN;IAGEd,GAAG,EAAEW,SAHP;IAIEa,QAAQ,EAAEtB,UAJZ;IAKEuB,kBAAkB,EAAE;MAClBD,QAAQ,EAAEtB;IADQ,CALtB;IAQEC,OAAO,EAAGuB,CAAD,IAAY;MACnB,IAAI,CAACxB,UAAL,EAAiB;QACfC,OAAO,IAAIA,OAAO,CAACuB,CAAD,CAAlB;QACA,IAAIpB,aAAJ,EAAmB;UACjBC,OAAO,IAAIA,OAAO,EAAlB;QACD;MACF;IACF;EAfH,iBAiBEnB,oBAACU,MAAD,EAAYe,MAAZ,EACGzB,KAAK,CAACuC,QAAN,CAAeC,GAAf,CAAmB3B,QAAnB,EAA6B,CAAC4B,KAAD,EAAQC,KAAR,KAAuB;IACnD,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;MAC1D,oBACEzC,oBAACG,IAAD;QAAMwC,GAAG,sBAAeD,KAAf;MAAT,GAAqClB,KAArC,GACGiB,KADH,CADF;IAKD,CAND,MAMO;MACL,OAAOA,KAAP;IACD;EACF,CAVA,CADH,CAjBF,CADF;AAiCD,CApED;AAsEA,4BAAevC,IAAI,eAACD,UAAU,CAACU,QAAD,CAAX,CAAnB","names":["React","forwardRef","memo","Text","usePropsResolution","Pressable","MenuContext","useMenuItem","mergeRefs","useHasResponsiveProps","HStack","MenuItem","ref","children","isDisabled","onPress","textValue","props","closeOnSelect","onClose","useContext","menuItemRef","useRef","mergedRef","_text","_stack","resolvedProps","cascadePseudoProps","textContent","setTextContent","useState","useEffect","menuItem","current","trim","menuItemProps","disabled","accessibilityState","e","Children","map","child","index","key"],"sources":["C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\native-base\\lib\\module\\components\\composites\\Menu\\MenuItem.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport Text from '../../primitives/Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../../primitives/Pressable';\nimport type { IMenuItemProps } from './types';\nimport { MenuContext } from './MenuContext';\nimport { useMenuItem } from './useMenu';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { HStack } from '../../primitives';\n\nconst MenuItem = (\n  { children, isDisabled, onPress, textValue, ...props }: IMenuItemProps,\n  ref: any\n) => {\n  const { closeOnSelect, onClose } = React.useContext(MenuContext);\n  const menuItemRef = React.useRef<any>(null);\n  const mergedRef = mergeRefs([menuItemRef, ref]);\n  const { _text, _stack, ...resolvedProps } = usePropsResolution(\n    'MenuItem',\n    props,\n    {\n      isDisabled,\n    },\n    {\n      cascadePseudoProps: true,\n    }\n  );\n  const [textContent, setTextContent] = React.useState('');\n  React.useEffect(() => {\n    const menuItem = menuItemRef.current;\n    if (menuItem) {\n      setTextContent((menuItem.textContent ?? '').trim());\n    }\n  }, [children]);\n\n  const menuItemProps = useMenuItem({\n    textValue: textValue ?? textContent,\n    ref: menuItemRef,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      {...menuItemProps}\n      {...resolvedProps}\n      ref={mergedRef}\n      disabled={isDisabled}\n      accessibilityState={{\n        disabled: isDisabled,\n      }}\n      onPress={(e: any) => {\n        if (!isDisabled) {\n          onPress && onPress(e);\n          if (closeOnSelect) {\n            onClose && onClose();\n          }\n        }\n      }}\n    >\n      <HStack {..._stack}>\n        {React.Children.map(children, (child, index: any) => {\n          if (typeof child === 'string' || typeof child === 'number') {\n            return (\n              <Text key={`menu-item-${index}`} {..._text}>\n                {child}\n              </Text>\n            );\n          } else {\n            return child;\n          }\n        })}\n      </HStack>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(MenuItem));\n"]},"metadata":{},"sourceType":"module"}