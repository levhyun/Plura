{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport PresenceTransition from '../Transitions/PresenceTransition';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/';\nconst Fade = (_ref, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  const {\n    in: animationState,\n    entryDuration,\n    exitDuration,\n    ...resolvedProps\n  } = usePropsResolution('Fade', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (entryDuration) {\n    resolvedProps.animate.transition.duration = entryDuration;\n  }\n  if (exitDuration) {\n    resolvedProps.exit.transition.duration = exitDuration;\n  }\n  return /*#__PURE__*/React.createElement(PresenceTransition, _extends({\n    visible: animationState,\n    ref: ref\n  }, resolvedProps), children);\n};\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Fade));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AAEA,MAAMC,IAAI,GAAG,OAAqCC,GAArC,KAAmD;EAAA,IAAlD;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAAD;EACX,MAAM;IACJC,EAAE,EAAEC,cADA;IAEJC,aAFI;IAGJC,YAHI;IAIJ,GAAGC;EAJC,IAKFT,kBAAkB,CAAC,MAAD,EAASI,KAAT,CALtB,CAD8D,CAO9D;;EACA,IAAIL,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,IAAIG,aAAJ,EAAmB;IACjBE,aAAa,CAACC,OAAd,CAAsBC,UAAtB,CAAiCC,QAAjC,GAA4CL,aAA5C;EACD;EACD,IAAIC,YAAJ,EAAkB;IAChBC,aAAa,CAACI,IAAd,CAAmBF,UAAnB,CAA8BC,QAA9B,GAAyCJ,YAAzC;EACD;EAED,oBACEX,oBAACC,kBAAD;IAAoBgB,OAAO,EAAER,cAA7B;IAA6CJ,GAAG,EAAEA;EAAlD,GAA2DO,aAA3D,GACGN,QADH,CADF;AAKD,CAxBD;AA0BA,4BAAeN,KAAK,CAACkB,IAAN,eAAWlB,KAAK,CAACmB,UAAN,CAAiBf,IAAjB,CAAX,CAAf","names":["React","PresenceTransition","useHasResponsiveProps","usePropsResolution","Fade","ref","children","props","in","animationState","entryDuration","exitDuration","resolvedProps","animate","transition","duration","exit","visible","memo","forwardRef"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\Transitions\\Fade.tsx"],"sourcesContent":["import React from 'react';\nimport PresenceTransition from '../Transitions/PresenceTransition';\nimport type { IFadeProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/';\n\nconst Fade = ({ children, ...props }: IFadeProps, ref?: any) => {\n  const {\n    in: animationState,\n    entryDuration,\n    exitDuration,\n    ...resolvedProps\n  } = usePropsResolution('Fade', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (entryDuration) {\n    resolvedProps.animate.transition.duration = entryDuration;\n  }\n  if (exitDuration) {\n    resolvedProps.exit.transition.duration = exitDuration;\n  }\n\n  return (\n    <PresenceTransition visible={animationState} ref={ref} {...resolvedProps}>\n      {children}\n    </PresenceTransition>\n  );\n};\n\nexport default React.memo(React.forwardRef(Fade));\n"]},"metadata":{},"sourceType":"module"}