{"ast":null,"code":"import { Linking, Platform } from 'react-native';\nconst linkToHREF = URL => {\n  Linking.openURL(URL).catch(err => console.error('An error occurred', err));\n};\nconst addOnPressFunctionality = (href, callback) => {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : () => {};\n};\nexport function useLink(props) {\n  const {\n    href,\n    isExternal,\n    onPress,\n    _ref\n  } = props;\n  let platformLinkProps = {};\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href,\n      onClick: onPress\n    }; // Adding target to a tag created by RN-Web\n\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: () => {\n        addOnPressFunctionality(href, onPress);\n      }\n    };\n  }\n  return {\n    linkProps: {\n      ...platformLinkProps,\n      accessibilityRole: 'link',\n      accessible: true\n    }\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,cAAlC;AAIA,MAAMC,UAAU,GAAIC,GAAD,IAAiB;EAClCH,OAAO,CAACI,OAAR,CAAgBD,GAAhB,EAAqBE,KAArB,CAA4BC,GAAD,IAASC,OAAO,CAACC,KAAR,CAAc,mBAAd,EAAmCF,GAAnC,CAApC;AACD,CAFD;AAIA,MAAMG,uBAAuB,GAAG,CAACC,IAAD,EAAqBC,QAArB,KAAuC;EACrED,IAAI,GAAGR,UAAU,CAACQ,IAAD,CAAb,GAAsB,EAA1B;EACAC,QAAQ,GAAGA,QAAQ,EAAX,GAAgB,MAAM,CAAE,CAAhC;AACD,CAHD;AAKA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAsC;EAC3C,MAAM;IAAEH,IAAF;IAAQI,UAAR;IAAoBC,OAApB;IAA6BC;EAA7B,IAAsCH,KAA5C;EAEA,IAAII,iBAAiB,GAAG,EAAxB;EAEA,IAAIhB,QAAQ,CAACiB,EAAT,KAAgB,KAApB,EAA2B;IACzBD,iBAAiB,GAAG;MAClBP,IADkB;MAElBS,OAAO,EAAEJ;IAFS,CAApB,CADyB,CAKzB;;IACA,IAAID,UAAU,IAAIE,IAAI,CAACI,OAAvB,EAAgC;MAC9BJ,IAAI,CAACI,OAAL,CAAaC,MAAb,GAAsB,QAAtB;IACD;EACF,CATD,MASO;IACLJ,iBAAiB,GAAG;MAClBF,OAAO,EAAE,MAAM;QACbN,uBAAuB,CAACC,IAAD,EAAOK,OAAP,CAAvB;MACD;IAHiB,CAApB;EAKD;EAED,OAAO;IACLO,SAAS,EAAE;MACT,GAAGL,iBADM;MAETM,iBAAiB,EAAE,MAFV;MAGTC,UAAU,EAAE;IAHH;EADN,CAAP;AAOD","names":["Linking","Platform","linkToHREF","URL","openURL","catch","err","console","error","addOnPressFunctionality","href","callback","useLink","props","isExternal","onPress","_ref","platformLinkProps","OS","onClick","current","target","linkProps","accessibilityRole","accessible"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\primitives\\Link\\useLink.ts"],"sourcesContent":["import { Linking, Platform } from 'react-native';\nimport type { IUseLinkProp } from './types';\nimport type { AccessibilityRole } from 'react-native';\n\nconst linkToHREF = (URL: string) => {\n  Linking.openURL(URL).catch((err) => console.error('An error occurred', err));\n};\n\nconst addOnPressFunctionality = (href: string | any, callback: any) => {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : () => {};\n};\n\nexport function useLink(props: IUseLinkProp) {\n  const { href, isExternal, onPress, _ref } = props;\n\n  let platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href,\n      onClick: onPress,\n    };\n    // Adding target to a tag created by RN-Web\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: () => {\n        addOnPressFunctionality(href, onPress);\n      },\n    };\n  }\n\n  return {\n    linkProps: {\n      ...platformLinkProps,\n      accessibilityRole: 'link' as AccessibilityRole,\n      accessible: true,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}