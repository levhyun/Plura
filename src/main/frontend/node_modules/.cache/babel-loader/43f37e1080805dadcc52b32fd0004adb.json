{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport { AppState, useColorScheme as _useColorScheme } from 'react-native';\nimport { useSubscription } from 'use-subscription';\nimport { useNativeBaseConfig } from '../NativeBaseContext';\nexport const useColorMode = () => {\n  const {\n    colorMode: colorModeContext\n  } = React.useContext(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  const {\n    colorMode\n  } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\nexport const useAppState = () => {\n  const subscription = React.useMemo(() => ({\n    getCurrentValue: () => AppState.currentState,\n    subscribe: callback => {\n      const subsription = AppState.addEventListener('change', callback);\n      return () => {\n        if (AppState.removeEventListener) {\n          // React Native < 0.65\n          AppState.removeEventListener('change', callback);\n        } else {\n          // React Native >= 0.65\n          // @ts-ignore:next-line ignoring ts error as devDependency contains \"@types/react-native\" < 0.65\n          subsription.remove();\n        }\n      };\n    }\n  }), []);\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n  if (isSSR) {\n    return 'unknown';\n  } else {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useSubscription(subscription);\n  }\n};\nexport const useColorScheme = () => {\n  const colorScheme = _useColorScheme();\n  const [currentScheme, setCurrentScheme] = useState(colorScheme);\n  const appState = useAppState();\n  useEffect(() => {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n  return currentScheme;\n};\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  const systemColorMode = useColorScheme();\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n  const [colorMode, setRawMode] = useState(initialColorMode);\n  const setColorMode = React.useCallback(async val => {\n    if (colorModeManager) {\n      await colorModeManager.set(val);\n    }\n    setRawMode(val);\n  }, [colorModeManager]); // For initial setting initial color mode from storage\n\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]); // Set system color mode only when user has not passed a colorModeManager\n\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode,\n    setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  const {\n    colorMode: colorModeContext\n  } = React.useContext(HybridContext);\n  const toggleAccessibleColors = () => colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","HybridContext","AppState","useColorScheme","_useColorScheme","useSubscription","useNativeBaseConfig","useColorMode","colorMode","colorModeContext","useContext","undefined","Error","useColorModeValue","light","dark","useAppState","subscription","useMemo","getCurrentValue","currentState","subscribe","callback","subsription","addEventListener","removeEventListener","remove","isSSR","colorScheme","currentScheme","setCurrentScheme","appState","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","setRawMode","setColorMode","useCallback","val","set","getMode","value","get","useAccessibleColors","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\native-base\\lib\\module\\core\\color-mode\\hooks.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { AppState, useColorScheme as _useColorScheme } from 'react-native';\nimport { useSubscription } from 'use-subscription';\nimport { useNativeBaseConfig } from '../NativeBaseContext';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport const useAppState = () => {\n  const subscription = React.useMemo(\n    () => ({\n      getCurrentValue: () => AppState.currentState,\n      subscribe: (callback: () => void) => {\n        const subsription = AppState.addEventListener('change', callback);\n        return () => {\n          if (AppState.removeEventListener) {\n            // React Native < 0.65\n            AppState.removeEventListener('change', callback);\n          } else {\n            // React Native >= 0.65\n            // @ts-ignore:next-line ignoring ts error as devDependency contains \"@types/react-native\" < 0.65\n            subsription.remove();\n          }\n        };\n      },\n    }),\n    []\n  );\n\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  if (isSSR) {\n    return 'unknown';\n  } else {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useSubscription(subscription);\n  }\n};\n\nexport const useColorScheme = () => {\n  const colorScheme = _useColorScheme();\n  const [currentScheme, setCurrentScheme] = useState(colorScheme);\n  const appState = useAppState();\n\n  useEffect(() => {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n\n  return currentScheme;\n};\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}