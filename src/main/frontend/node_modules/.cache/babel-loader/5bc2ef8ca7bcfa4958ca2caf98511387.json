{"ast":null,"code":"// import { atomic } from 'react-native-web/dist/exports/StyleSheet/compiler';\nimport { atomic } from '../react-native-web-fucntions/atomic';\nimport preprocess from '../react-native-web-fucntions/preprocess';\nimport { StyleSheet } from 'react-native'; // @ts-ignore\n\nimport stableHash from 'stable-hash';\nimport hash from './hash';\nimport { useStableMemo } from './useStableMemo';\nimport { getResponsiveStylesImpl, useDimensionsWithEnable } from './common';\nimport { ResponsiveQueryContext } from './ResponsiveQueryProvider';\nimport React from 'react';\n/******************** Implementation after RNW v0.18 ***********************/\n\n/**\n * 1. preprocess:- Handles shadow/text shadow conversion from RN styles to web *                 styles\n *\n * 2. atomic:- it handles prefixing, converting RN specific styles to web styles *             and generating the CSS selector.\n *             Input {marginTop: 10}\n *             Output\n *             compiledStyle : marginTop: \"r-marginTop-156q2ks\"\n *             compiledOrderedRules : \".r-marginTop-156q2ks{margin-top:10px;}\"\n *      a)compiledStyle:- Array it holds identifier/selector with properties\n *      b)compiledOrderedRules:- Array it holds the css rule with selector name\n *      Also from RNW v0.18 handles swapping of ltr styles if enabled by user\n * 3. createSheet:- used to grab sheet which exist already created by rnw. when we *                  call createSheet without id it will return sheet which exist. *                  cause it automatically takes a default ID  which is already in *                  use (created by rnw with default ID) so this return sheet *                  which exist with  ID doesn't create a new sheet.\n *\n * This Implementation is based on asumptions that RNW doesn't change the         * function  or doesn't re-write them. if there is any change in RNW implmentation * it we'll break and needs to be updated.\n *\n */\n\nlet textContentMap = {};\nexport const useResponsiveQuery = queries => {\n  var _queries$disableCSSMe;\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = (_queries$disableCSSMe = queries === null || queries === void 0 ? void 0 : queries.disableCSSMediaQueries) !== null && _queries$disableCSSMe !== void 0 ? _queries$disableCSSMe : responsiveQueryContext.disableCSSMediaQueries; // Only attaches listener if disableCSSMediaQueries is true\n\n  const windowWidth = useDimensionsWithEnable({\n    enable: disableCSSMediaQueries\n  }).width;\n  const values = useStableMemo(() => {\n    // Use the non-media query responsive styling\n    if (disableCSSMediaQueries) {\n      const getResponsiveStyles = getResponsiveStylesImpl(windowWidth);\n      if (queries) {\n        const {\n          styles\n        } = getResponsiveStyles(queries);\n        return {\n          styles,\n          getResponsiveStyles\n        };\n      } else {\n        return {\n          getResponsiveStyles\n        };\n      }\n    } else {\n      if (queries) {\n        const {\n          styles,\n          dataSet\n        } = getResponsiveStyles(queries);\n        return {\n          dataSet,\n          styles,\n          getResponsiveStyles\n        };\n      } else {\n        return {\n          getResponsiveStyles\n        };\n      }\n    }\n  }, [queries, windowWidth, disableCSSMediaQueries]);\n  return values;\n};\nconst getDataAttribute = queryRule => {\n  if (typeof queryRule.minWidth === 'number' && typeof queryRule.maxWidth === 'number') {\n    return \"min-width-\".concat(queryRule.minWidth, \"-max-width-\").concat(queryRule.maxWidth);\n  } else if (typeof queryRule.minWidth === 'number') {\n    return \"min-width-\".concat(queryRule.minWidth);\n  } else if (typeof queryRule.maxWidth === 'number') {\n    return \"max-width-\".concat(queryRule.maxWidth);\n  }\n  return undefined;\n};\nconst getMediaQueryRule = (query, newRule) => {\n  if (typeof query.minWidth === 'number' && typeof query.maxWidth === 'number') {\n    return \"@media only screen and (min-width: \".concat(query.minWidth, \"px) and (max-width: \").concat(query.maxWidth, \"px) { \").concat(newRule, \" }\");\n  } else if (typeof query.minWidth === 'number') {\n    return \"@media only screen and (min-width: \".concat(query.minWidth, \"px) { \").concat(newRule, \" }\");\n  } else if (typeof query.maxWidth === 'number') {\n    return \"@media only screen and (max-width: \".concat(query.maxWidth, \"px) { \").concat(newRule, \" }\");\n  }\n  return undefined;\n};\nconst getResponsiveStyles = queries => {\n  const queryString = stableHash(queries.query);\n  const queriesHash = hash(queryString);\n  const styles = queries.initial ? [StyleSheet.create({\n    initial: StyleSheet.flatten(queries.initial)\n  }).initial] : undefined;\n  let dataSet = {};\n  let styleSheet;\n  /**\n   * This function is copied from intergalacticspacehighway/rnw-responsive-ssr\n   */\n\n  const insert = rule => {\n    if (typeof window !== 'undefined') {\n      if (!styleSheet) {\n        const styleEl = document.createElement('style');\n        styleEl.type = 'text/css';\n        styleEl.appendChild(document.createTextNode(''));\n        document.head.appendChild(styleEl);\n        styleSheet = styleEl.sheet;\n      }\n      styleSheet.insertRule(rule, styleSheet.cssRules.length);\n    }\n  };\n  if (queries.query) {\n    queries.query.forEach(queryRule => {\n      const queryHash = queriesHash + hash(stableHash(queryRule));\n      const dataAttribute = getDataAttribute(queryRule);\n      if (dataAttribute) {\n        const newIdentifier = \"[data-\".concat(dataAttribute, \"$=\\\"\").concat(queryHash, \"\\\"]\");\n        dataSet[dataAttribute] = queryHash;\n        let mediaRules = '';\n        const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n        const newStyle = preprocess(flattenQueryStyle);\n        const [compiledStyle, compiledOrderedRules] = atomic(newStyle); //@ts-ignore\n\n        delete compiledStyle.$$css; //removing unnecessary $$css property\n\n        Object.keys(compiledStyle).forEach(key => {\n          const oldIdentifier = compiledStyle[key];\n          compiledOrderedRules.forEach(_ref => {\n            let [rules, _order] = _ref;\n            // Rule returned by atomic has css selectors, so we'll replace it with data-attr selector\n            const newRule = rules[0].replace('.' + oldIdentifier, newIdentifier);\n            mediaRules += newRule;\n          });\n        });\n        if (mediaRules) {\n          const mediaQueryRule = getMediaQueryRule(queryRule, mediaRules);\n          insert(\"/*\".concat(queryHash, \"{}*/\").concat(mediaQueryRule));\n          textContentMap[\"/*\".concat(queryHash, \"{}*/\").concat(mediaQueryRule)] = true;\n        }\n      }\n    });\n  }\n  return {\n    styles,\n    dataSet\n  };\n};\n/**\n * This function is copied from intergalacticspacehighway/rnw-responsive-ssr\n */\n\nexport const getStyleElement = () => {\n  return /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\",\n    dangerouslySetInnerHTML: {\n      __html: Object.keys(textContentMap).join('')\n    }\n  });\n};","map":{"version":3,"mappings":"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","names":["atomic","preprocess","StyleSheet","stableHash","hash","useStableMemo","getResponsiveStylesImpl","useDimensionsWithEnable","ResponsiveQueryContext","React","textContentMap","useResponsiveQuery","queries","responsiveQueryContext","useContext","disableCSSMediaQueries","windowWidth","enable","width","values","getResponsiveStyles","styles","dataSet","getDataAttribute","queryRule","minWidth","maxWidth","undefined","getMediaQueryRule","query","newRule","queryString","queriesHash","initial","create","flatten","styleSheet","insert","rule","window","styleEl","document","createElement","type","appendChild","createTextNode","head","sheet","insertRule","cssRules","length","forEach","queryHash","dataAttribute","newIdentifier","mediaRules","flattenQueryStyle","style","newStyle","compiledStyle","compiledOrderedRules","$$css","Object","keys","key","oldIdentifier","rules","_order","replace","mediaQueryRule","getStyleElement","dangerouslySetInnerHTML","__html","join"],"sources":["C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\native-base\\lib\\module\\utils\\useResponsiveQuery\\useResponsiveQuery.web.tsx"],"sourcesContent":["// import { atomic } from 'react-native-web/dist/exports/StyleSheet/compiler';\nimport { atomic } from '../react-native-web-fucntions/atomic';\nimport preprocess from '../react-native-web-fucntions/preprocess';\nimport type {\n  DataSet,\n  Query,\n  UseResponsiveQueryParams,\n  UseResponsiveQueryReturnType,\n  GetResponsiveStylesParams,\n} from './types';\nimport { StyleSheet } from 'react-native';\n// @ts-ignore\nimport stableHash from 'stable-hash';\nimport hash from './hash';\nimport type { GetResponsiveStylesReturnType } from './types';\nimport { useStableMemo } from './useStableMemo';\nimport { getResponsiveStylesImpl, useDimensionsWithEnable } from './common';\nimport { ResponsiveQueryContext } from './ResponsiveQueryProvider';\nimport React from 'react';\n\n/******************** Implementation after RNW v0.18 ***********************/\n\n/**\n * 1. preprocess:- Handles shadow/text shadow conversion from RN styles to web *                 styles\n *\n * 2. atomic:- it handles prefixing, converting RN specific styles to web styles *             and generating the CSS selector.\n *             Input {marginTop: 10}\n *             Output\n *             compiledStyle : marginTop: \"r-marginTop-156q2ks\"\n *             compiledOrderedRules : \".r-marginTop-156q2ks{margin-top:10px;}\"\n *      a)compiledStyle:- Array it holds identifier/selector with properties\n *      b)compiledOrderedRules:- Array it holds the css rule with selector name\n *      Also from RNW v0.18 handles swapping of ltr styles if enabled by user\n * 3. createSheet:- used to grab sheet which exist already created by rnw. when we *                  call createSheet without id it will return sheet which exist. *                  cause it automatically takes a default ID  which is already in *                  use (created by rnw with default ID) so this return sheet *                  which exist with  ID doesn't create a new sheet.\n *\n * This Implementation is based on asumptions that RNW doesn't change the         * function  or doesn't re-write them. if there is any change in RNW implmentation * it we'll break and needs to be updated.\n *\n */\nlet textContentMap: any = {};\n\nexport const useResponsiveQuery = (\n  queries?: UseResponsiveQueryParams\n): UseResponsiveQueryReturnType => {\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries =\n    queries?.disableCSSMediaQueries ??\n    responsiveQueryContext.disableCSSMediaQueries;\n\n  // Only attaches listener if disableCSSMediaQueries is true\n  const windowWidth = useDimensionsWithEnable({\n    enable: disableCSSMediaQueries,\n  }).width;\n\n  const values = useStableMemo(() => {\n    // Use the non-media query responsive styling\n    if (disableCSSMediaQueries) {\n      const getResponsiveStyles = getResponsiveStylesImpl(windowWidth);\n      if (queries) {\n        const { styles } = getResponsiveStyles(queries);\n        return { styles, getResponsiveStyles };\n      } else {\n        return { getResponsiveStyles };\n      }\n    } else {\n      if (queries) {\n        const { styles, dataSet } = getResponsiveStyles(queries);\n        return { dataSet, styles, getResponsiveStyles };\n      } else {\n        return { getResponsiveStyles };\n      }\n    }\n  }, [queries, windowWidth, disableCSSMediaQueries]);\n\n  return values;\n};\n\nconst getDataAttribute = (queryRule: Query) => {\n  if (\n    typeof queryRule.minWidth === 'number' &&\n    typeof queryRule.maxWidth === 'number'\n  ) {\n    return `min-width-${queryRule.minWidth}-max-width-${queryRule.maxWidth}`;\n  } else if (typeof queryRule.minWidth === 'number') {\n    return `min-width-${queryRule.minWidth}`;\n  } else if (typeof queryRule.maxWidth === 'number') {\n    return `max-width-${queryRule.maxWidth}`;\n  }\n\n  return undefined;\n};\n\nconst getMediaQueryRule = (query: Query, newRule: string) => {\n  if (\n    typeof query.minWidth === 'number' &&\n    typeof query.maxWidth === 'number'\n  ) {\n    return `@media only screen and (min-width: ${query.minWidth}px) and (max-width: ${query.maxWidth}px) { ${newRule} }`;\n  } else if (typeof query.minWidth === 'number') {\n    return `@media only screen and (min-width: ${query.minWidth}px) { ${newRule} }`;\n  } else if (typeof query.maxWidth === 'number') {\n    return `@media only screen and (max-width: ${query.maxWidth}px) { ${newRule} }`;\n  }\n  return undefined;\n};\n\nconst getResponsiveStyles = (\n  queries: GetResponsiveStylesParams\n): GetResponsiveStylesReturnType => {\n  const queryString = stableHash(queries.query);\n  const queriesHash = hash(queryString);\n\n  const styles = queries.initial\n    ? [\n        StyleSheet.create({ initial: StyleSheet.flatten(queries.initial) })\n          .initial,\n      ]\n    : undefined;\n\n  let dataSet: DataSet = {};\n  let styleSheet: any;\n\n  /**\n   * This function is copied from intergalacticspacehighway/rnw-responsive-ssr\n   */\n  const insert = (rule: string) => {\n    if (typeof window !== 'undefined') {\n      if (!styleSheet) {\n        const styleEl = document.createElement('style');\n        styleEl.type = 'text/css';\n        styleEl.appendChild(document.createTextNode(''));\n        document.head.appendChild(styleEl);\n        styleSheet = styleEl.sheet;\n      }\n\n      styleSheet.insertRule(rule, styleSheet.cssRules.length);\n    }\n  };\n\n  if (queries.query) {\n    queries.query.forEach((queryRule) => {\n      const queryHash = queriesHash + hash(stableHash(queryRule));\n      const dataAttribute = getDataAttribute(queryRule);\n\n      if (dataAttribute) {\n        const newIdentifier = `[data-${dataAttribute}$=\"${queryHash}\"]`;\n        dataSet[dataAttribute] = queryHash;\n\n        let mediaRules = '';\n\n        const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n        const newStyle = preprocess(flattenQueryStyle);\n        const [compiledStyle, compiledOrderedRules] = atomic(newStyle);\n        //@ts-ignore\n        delete compiledStyle.$$css; //removing unnecessary $$css property\n        Object.keys(compiledStyle).forEach((key) => {\n          const oldIdentifier = compiledStyle[key];\n          compiledOrderedRules.forEach(([rules, _order]: any) => {\n            // Rule returned by atomic has css selectors, so we'll replace it with data-attr selector\n            const newRule = rules[0].replace(\n              '.' + oldIdentifier,\n              newIdentifier\n            );\n            mediaRules += newRule;\n          });\n        });\n        if (mediaRules) {\n          const mediaQueryRule = getMediaQueryRule(queryRule, mediaRules);\n          insert(`/*${queryHash}{}*/${mediaQueryRule}`);\n          textContentMap[`/*${queryHash}{}*/${mediaQueryRule}`] = true;\n        }\n      }\n    });\n  }\n\n  return { styles, dataSet };\n};\n\n/**\n * This function is copied from intergalacticspacehighway/rnw-responsive-ssr\n */\nexport const getStyleElement = () => {\n  return (\n    <style\n      type=\"text/css\"\n      dangerouslySetInnerHTML={{ __html: Object.keys(textContentMap).join('') }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}