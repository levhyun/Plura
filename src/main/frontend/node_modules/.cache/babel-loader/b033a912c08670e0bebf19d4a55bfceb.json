{"ast":null,"code":"import { Platform } from 'react-native';\nimport get from 'lodash.get';\nimport { convertStringNumberToNumber } from './convertStringNumberToNumber';\nimport { resolveValueWithBreakpoint } from '../hooks/useThemeProps/utils';\n/**\n * Common Logic Sharing between useSx and useStyledSytem\n */\n\nexport const getRNKeyAndStyleValue = _ref => {\n  let {\n    config,\n    value,\n    key,\n    theme,\n    styledSystemProps,\n    currentBreakpoint\n  } = _ref;\n  let style = {};\n  if (config === true) {\n    style = {\n      ...style,\n      [key]: convertStringNumberToNumber(key, value)\n    };\n  } else if (config) {\n    //@ts-ignore\n    const {\n      property,\n      scale,\n      properties,\n      transformer\n    } = config;\n    let val = value;\n    if (transformer) {\n      val = transformer(val, theme[scale], theme, styledSystemProps.fontSize);\n    } else {\n      // If a token is not found in the theme\n      val = get(theme[scale], value, value);\n    }\n    if (typeof val === 'string') {\n      if (val.endsWith('px')) {\n        val = parseFloat(val);\n      } else if (val.endsWith('em') && Platform.OS !== 'web') {\n        const fontSize = resolveValueWithBreakpoint(styledSystemProps.fontSize, theme.breakpoints, currentBreakpoint, key);\n        val = parseFloat(val) * parseFloat(get(theme.fontSizes, fontSize, fontSize));\n      }\n    }\n    val = convertStringNumberToNumber(key, val);\n    if (properties) {\n      //@ts-ignore\n      properties.forEach(property => {\n        style = {\n          ...style,\n          [property]: val\n        };\n      });\n    } else if (property) {\n      style = {\n        ...style,\n        [property]: val\n      };\n    } else {\n      style = {\n        ...style,\n        ...val\n      };\n    }\n  }\n  return style;\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,2BAAT,QAA4C,+BAA5C;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,QAO1B;EAAA,IAP2B;IACpCC,MADoC;IAEpCC,KAFoC;IAGpCC,GAHoC;IAIpCC,KAJoC;IAKpCC,iBALoC;IAMpCC;EANoC,CAAD;EAQnC,IAAIC,KAAU,GAAG,EAAjB;EACA,IAAIN,MAAM,KAAK,IAAf,EAAqB;IACnBM,KAAK,GAAG;MACN,GAAGA,KADG;MAEN,CAACJ,GAAD,GAAOL,2BAA2B,CAACK,GAAD,EAAMD,KAAN;IAF5B,CAAR;EAID,CALD,MAKO,IAAID,MAAJ,EAAY;IACjB;IACA,MAAM;MAAEO,QAAF;MAAYC,KAAZ;MAAmBC,UAAnB;MAA+BC;IAA/B,IAA+CV,MAArD;IACA,IAAIW,GAAG,GAAGV,KAAV;IAEA,IAAIS,WAAJ,EAAiB;MACfC,GAAG,GAAGD,WAAW,CAACC,GAAD,EAAMR,KAAK,CAACK,KAAD,CAAX,EAAoBL,KAApB,EAA2BC,iBAAiB,CAACQ,QAA7C,CAAjB;IACD,CAFD,MAEO;MACL;MACAD,GAAG,GAAGf,GAAG,CAACO,KAAK,CAACK,KAAD,CAAN,EAAeP,KAAf,EAAsBA,KAAtB,CAAT;IACD;IAED,IAAI,OAAOU,GAAP,KAAe,QAAnB,EAA6B;MAC3B,IAAIA,GAAG,CAACE,QAAJ,CAAa,IAAb,CAAJ,EAAwB;QACtBF,GAAG,GAAGG,UAAU,CAACH,GAAD,CAAhB;MACD,CAFD,MAEO,IAAIA,GAAG,CAACE,QAAJ,CAAa,IAAb,KAAsBlB,QAAQ,CAACoB,EAAT,KAAgB,KAA1C,EAAiD;QACtD,MAAMH,QAAQ,GAAGd,0BAA0B,CACzCM,iBAAiB,CAACQ,QADuB,EAEzCT,KAAK,CAACa,WAFmC,EAGzCX,iBAHyC,EAIzCH,GAJyC,CAA3C;QAMAS,GAAG,GACDG,UAAU,CAACH,GAAD,CAAV,GACAG,UAAU,CAAClB,GAAG,CAACO,KAAK,CAACc,SAAP,EAAkBL,QAAlB,EAA4BA,QAA5B,CAAJ,CAFZ;MAGD;IACF;IAEDD,GAAG,GAAGd,2BAA2B,CAACK,GAAD,EAAMS,GAAN,CAAjC;IAEA,IAAIF,UAAJ,EAAgB;MACd;MACAA,UAAU,CAACS,OAAX,CAAoBX,QAAD,IAAc;QAC/BD,KAAK,GAAG;UACN,GAAGA,KADG;UAEN,CAACC,QAAD,GAAYI;QAFN,CAAR;MAID,CALD;IAMD,CARD,MAQO,IAAIJ,QAAJ,EAAc;MACnBD,KAAK,GAAG;QACN,GAAGA,KADG;QAEN,CAACC,QAAD,GAAYI;MAFN,CAAR;IAID,CALM,MAKA;MACLL,KAAK,GAAG;QACN,GAAGA,KADG;QAEN,GAAGK;MAFG,CAAR;IAID;EACF;EAED,OAAOL,KAAP;AACD,CAlEM","names":["Platform","get","convertStringNumberToNumber","resolveValueWithBreakpoint","getRNKeyAndStyleValue","config","value","key","theme","styledSystemProps","currentBreakpoint","style","property","scale","properties","transformer","val","fontSize","endsWith","parseFloat","OS","breakpoints","fontSizes","forEach"],"sources":["C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\native-base\\lib\\module\\utils\\getRNKeyAndStyleValue.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport get from 'lodash.get';\nimport { convertStringNumberToNumber } from './convertStringNumberToNumber';\nimport { resolveValueWithBreakpoint } from '../hooks/useThemeProps/utils';\n\n/**\n * Common Logic Sharing between useSx and useStyledSytem\n */\nexport const getRNKeyAndStyleValue = ({\n  config,\n  value,\n  key,\n  theme,\n  styledSystemProps,\n  currentBreakpoint,\n}: any) => {\n  let style: any = {};\n  if (config === true) {\n    style = {\n      ...style,\n      [key]: convertStringNumberToNumber(key, value),\n    };\n  } else if (config) {\n    //@ts-ignore\n    const { property, scale, properties, transformer } = config;\n    let val = value;\n\n    if (transformer) {\n      val = transformer(val, theme[scale], theme, styledSystemProps.fontSize);\n    } else {\n      // If a token is not found in the theme\n      val = get(theme[scale], value, value);\n    }\n\n    if (typeof val === 'string') {\n      if (val.endsWith('px')) {\n        val = parseFloat(val);\n      } else if (val.endsWith('em') && Platform.OS !== 'web') {\n        const fontSize = resolveValueWithBreakpoint(\n          styledSystemProps.fontSize,\n          theme.breakpoints,\n          currentBreakpoint,\n          key\n        );\n        val =\n          parseFloat(val) *\n          parseFloat(get(theme.fontSizes, fontSize, fontSize));\n      }\n    }\n\n    val = convertStringNumberToNumber(key, val);\n\n    if (properties) {\n      //@ts-ignore\n      properties.forEach((property) => {\n        style = {\n          ...style,\n          [property]: val,\n        };\n      });\n    } else if (property) {\n      style = {\n        ...style,\n        [property]: val,\n      };\n    } else {\n      style = {\n        ...style,\n        ...val,\n      };\n    }\n  }\n\n  return style;\n};\n"]},"metadata":{},"sourceType":"module"}