{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport { Platform, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { Pressable } from '../Pressable';\nexport const SelectContext = /*#__PURE__*/React.createContext({\n  onValueChange: () => {},\n  selectedValue: null,\n  _selectedItem: {},\n  _item: {}\n});\nconst Select = (_ref2, ref) => {\n  let {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  } = _ref2;\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID\n  });\n  const flatListData = [];\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n  const _ref = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [isFocused, setIsFocused] = React.useState(false);\n  const {\n    focusProps,\n    isFocusVisible\n  } = useFocusRing();\n  const {\n    hoverProps,\n    isHovered\n  } = useHover({\n    isDisabled\n  }, _ref);\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    customDropdownIconProps,\n    _actionSheetContent,\n    _actionSheetBody,\n    _webSelect,\n    ...resolvedProps\n  } = usePropsResolution('Select', props, {\n    isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible\n  }, undefined);\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: newValue => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    }\n  });\n  const itemsList = React.Children.map(children !== null && children !== void 0 ? children : [], child => {\n    return {\n      label: child.props.label,\n      value: child.props.value\n    };\n  });\n  const selectedItemArray = itemsList.filter(item => item.value === value);\n  const selectedItem = selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem !== null && _selectedItem !== void 0 ? _selectedItem : {},\n      _item: _item !== null && _item !== void 0 ? _item : {}\n    };\n  }, [value, setValue, _selectedItem, _item]); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  const rightIcon = isOpen && dropdownOpenIcon ? dropdownOpenIcon : !isOpen && dropdownCloseIcon ? dropdownCloseIcon : dropdownIcon ? dropdownIcon : /*#__PURE__*/React.createElement(ChevronDownIcon, customDropdownIconProps);\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n  if (optimized) {\n    React.Children.map(children, child => {\n      flatListData.push(child.props);\n    });\n  }\n  const [layoutProps] = extractInObject(resolvedProps, [...stylingProps.margin, ...stylingProps.flexbox, ...stylingProps.position, 'shadow', 'opacity']);\n  const commonInput = /*#__PURE__*/React.createElement(Input, _extends({\n    placeholder: placeholder,\n    InputRightElement: rightIcon\n  }, resolvedProps, {\n    // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n    // @ts-ignore-next-line\n    isFocused: isFocused,\n    isHovered: isHovered,\n    \"aria-hidden\": true,\n    importantForAccessibility: \"no\",\n    value: selectedItem ? selectedItem.label : '',\n    editable: false,\n    focusable: false,\n    isDisabled: isDisabled,\n    pointerEvents: \"none\"\n  }));\n  return Platform.OS === 'web' ? /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(\"select\", _extends({\n    \"aria-readonly\": selectProps.readOnly,\n    required: selectProps.required,\n    disabled: isDisabled\n  }, focusProps, hoverProps, {\n    ref: mergeRefs([ref, _ref]) //@ts-ignore\n    ,\n\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    value: selectedItem === null ? tempFix : value,\n    \"aria-label\": placeholder,\n    onFocus: () => {\n      setIsFocused(true);\n      onOpen && onOpen();\n    },\n    onBlur: () => {\n      setIsFocused(false);\n      onClose && onClose();\n    }\n  }, _webSelect), /*#__PURE__*/React.createElement(\"option\", {\n    disabled: true,\n    value: tempFix\n  }, placeholder), children), commonInput) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Pressable, _extends({\n    onPress: () => {\n      Keyboard.dismiss();\n      setIsOpen(true);\n      onOpen && onOpen();\n    },\n    disabled: isDisabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    ref: mergeRefs([ref, _ref])\n  }, layoutProps), commonInput), /*#__PURE__*/React.createElement(Actionsheet, {\n    isOpen: isOpen,\n    onClose: handleClose\n  }, /*#__PURE__*/React.createElement(Actionsheet.Content, _actionSheetContent, optimized ? /*#__PURE__*/React.createElement(FlatList, _extends({}, _actionSheetBody, {\n    data: flatListData // eslint-disable-next-line no-shadow\n    ,\n\n    keyExtractor: (_item, index) => index.toString(),\n    renderItem: _ref3 => {\n      let {\n        item\n      } = _ref3;\n      const isSelected = selectedValue === item.value;\n      return /*#__PURE__*/React.createElement(Actionsheet.Item, _extends({\n        onPress: () => {\n          if (!isDisabled) {\n            setValue(item.value);\n          }\n        },\n        accessibilityState: {\n          selected: isSelected\n        }\n      }, item, _item, isSelected && _selectedItem), item.label);\n    }\n  })) : /*#__PURE__*/React.createElement(ScrollView, _actionSheetBody, /*#__PURE__*/React.createElement(SelectContext.Provider, {\n    value: contextValue\n  }, children)))));\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Select));","map":{"version":3,"mappings":"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","names":["React","forwardRef","memo","Platform","Keyboard","Actionsheet","Box","Input","useFocusRing","useControllableState","usePropsResolution","useHover","mergeRefs","useFormControl","ChevronDownIcon","ScrollView","extractInObject","stylingProps","FlatList","useHasResponsiveProps","Pressable","SelectContext","createContext","onValueChange","selectedValue","_selectedItem","_item","Select","ref","isHovered","isHoveredProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","props","selectProps","isDisabled","nativeID","flatListData","disabled","tempFix","_ref","useRef","isOpen","setIsOpen","useState","setIsFocused","focusProps","hoverProps","children","dropdownIcon","dropdownCloseIcon","dropdownOpenIcon","placeholder","accessibilityLabel","defaultValue","onOpen","onClose","optimized","customDropdownIconProps","_actionSheetContent","_actionSheetBody","_webSelect","resolvedProps","undefined","value","setValue","onChange","newValue","itemsList","Children","map","child","label","selectedItemArray","filter","item","selectedItem","length","contextValue","useMemo","rightIcon","handleClose","push","layoutProps","margin","flexbox","position","commonInput","InputRightElement","importantForAccessibility","editable","focusable","pointerEvents","OS","readOnly","required","e","target","onFocus","onBlur","onPress","dismiss","accessibilityRole","Content","data","keyExtractor","index","toString","renderItem","isSelected","Item","accessibilityState","selected","Provider"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\primitives\\Select\\Select.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectProps } from './types';\nimport { Platform, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport type { IButtonProps } from '../Button/types';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISelectItemProps } from './types';\nimport { Pressable } from '../Pressable';\n\nexport const SelectContext = React.createContext({\n  onValueChange: (() => {}) as any,\n  selectedValue: null as any,\n  _selectedItem: {} as IButtonProps,\n  _item: {} as IButtonProps,\n});\n\nconst Select = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: ISelectProps,\n  ref: any\n) => {\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID,\n  });\n  const flatListData: ISelectItemProps[] = [];\n\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n  const _ref = React.useRef(null);\n\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [isFocused, setIsFocused] = React.useState<boolean>(false);\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const { hoverProps, isHovered } = useHover({ isDisabled }, _ref);\n\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    customDropdownIconProps,\n    _actionSheetContent,\n    _actionSheetBody,\n    _webSelect,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Select',\n    props,\n    {\n      isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    },\n    undefined\n  );\n\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: (newValue) => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    },\n  });\n\n  const itemsList: Array<{ label: string; value: string }> = React.Children.map(\n    children ?? [],\n    (child: any) => {\n      return {\n        label: child.props.label,\n        value: child.props.value,\n      };\n    }\n  );\n\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item.value === value\n  );\n\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem ?? {},\n      _item: _item ?? {},\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const rightIcon =\n    isOpen && dropdownOpenIcon ? (\n      dropdownOpenIcon\n    ) : !isOpen && dropdownCloseIcon ? (\n      dropdownCloseIcon\n    ) : dropdownIcon ? (\n      dropdownIcon\n    ) : (\n      <ChevronDownIcon {...customDropdownIconProps} />\n    );\n\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.map(children, (child: any) => {\n      flatListData.push(child.props);\n    });\n  }\n\n  const [layoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    'shadow',\n    'opacity',\n  ]);\n\n  const commonInput = (\n    <Input\n      placeholder={placeholder}\n      InputRightElement={rightIcon}\n      {...resolvedProps}\n      // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n      // @ts-ignore-next-line\n      isFocused={isFocused}\n      isHovered={isHovered}\n      aria-hidden={true}\n      importantForAccessibility=\"no\"\n      value={selectedItem ? selectedItem.label : ''}\n      editable={false}\n      focusable={false}\n      isDisabled={isDisabled}\n      pointerEvents=\"none\"\n    />\n  );\n\n  return Platform.OS === 'web' ? (\n    <Box>\n      {/* <Box w=\"100%\" h=\"100%\" position=\"absolute\" opacity=\"0\" zIndex={1}> */}\n      <select\n        aria-readonly={selectProps.readOnly}\n        required={selectProps.required}\n        disabled={isDisabled}\n        {...focusProps}\n        {...hoverProps}\n        ref={mergeRefs([ref, _ref])}\n        //@ts-ignore\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        value={selectedItem === null ? tempFix : value}\n        aria-label={placeholder}\n        onFocus={() => {\n          setIsFocused(true);\n          onOpen && onOpen();\n        }}\n        onBlur={() => {\n          setIsFocused(false);\n          onClose && onClose();\n        }}\n        {..._webSelect}\n      >\n        <option disabled value={tempFix}>\n          {placeholder}\n        </option>\n        {children}\n      </select>\n      {/* </Box> */}\n      {commonInput}\n    </Box>\n  ) : (\n    <>\n      <Pressable\n        onPress={() => {\n          Keyboard.dismiss();\n          setIsOpen(true);\n          onOpen && onOpen();\n        }}\n        disabled={isDisabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        ref={mergeRefs([ref, _ref])}\n        {...layoutProps}\n      >\n        {commonInput}\n      </Pressable>\n      <Actionsheet isOpen={isOpen} onClose={handleClose}>\n        <Actionsheet.Content {..._actionSheetContent}>\n          {/* TODO: Replace ScrollVeiw with FlatList */}\n          {optimized ? (\n            <FlatList\n              {..._actionSheetBody}\n              data={flatListData}\n              // eslint-disable-next-line no-shadow\n              keyExtractor={(_item, index) => index.toString()}\n              renderItem={({ item }: any) => {\n                const isSelected = selectedValue === item.value;\n                return (\n                  <Actionsheet.Item\n                    onPress={() => {\n                      if (!isDisabled) {\n                        setValue(item.value);\n                      }\n                    }}\n                    accessibilityState={{ selected: isSelected }}\n                    {...item}\n                    {..._item}\n                    {...(isSelected && _selectedItem)}\n                  >\n                    {item.label}\n                  </Actionsheet.Item>\n                );\n              }}\n            />\n          ) : (\n            <ScrollView {..._actionSheetBody}>\n              <SelectContext.Provider value={contextValue}>\n                {children}\n              </SelectContext.Provider>\n            </ScrollView>\n          )}\n        </Actionsheet.Content>\n      </Actionsheet>\n    </>\n  );\n};\n\nexport default memo(forwardRef(Select));\n"]},"metadata":{},"sourceType":"module"}