{"ast":null,"code":"import { filterDOMProps as $frWMC$filterDOMProps, useId as $frWMC$useId, mergeProps as $frWMC$mergeProps, useSlotId as $frWMC$useSlotId, isMac as $frWMC$isMac, isWebKit as $frWMC$isWebKit } from \"@react-aria/utils\";\nimport { useFocusWithin as $frWMC$useFocusWithin, useHover as $frWMC$useHover, isFocusVisible as $frWMC$isFocusVisible } from \"@react-aria/interactions\";\nimport { useLabel as $frWMC$useLabel } from \"@react-aria/label\";\nimport { useSelectableList as $frWMC$useSelectableList, useSelectableItem as $frWMC$useSelectableItem } from \"@react-aria/selection\";\nimport { getItemCount as $frWMC$getItemCount } from \"@react-stately/collections\";\nconst $b1f0cad8af73213b$export$3585ede4d035bf14 = new WeakMap();\nfunction $b1f0cad8af73213b$var$normalizeKey(key) {\n  if (typeof key === 'string') return key.replace(/\\s*/g, '');\n  return '' + key;\n}\nfunction $b1f0cad8af73213b$export$9145995848b05025(state, itemKey) {\n  let data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);\n  if (!data) throw new Error('Unknown list');\n  return `${data.id}-option-${$b1f0cad8af73213b$var$normalizeKey(itemKey)}`;\n}\nfunction $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {\n  let domProps = $frWMC$filterDOMProps(props, {\n    labelable: true\n  });\n  let {\n    listProps: listProps\n  } = $frWMC$useSelectableList({\n    ...props,\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n  let {\n    focusWithinProps: focusWithinProps\n  } = $frWMC$useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n  // Share list id and some props with child options.\n  let id = $frWMC$useId(props.id);\n  $b1f0cad8af73213b$export$3585ede4d035bf14.set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction\n  });\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps\n  } = $frWMC$useLabel({\n    ...props,\n    id: id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  return {\n    labelProps: labelProps,\n    listBoxProps: $frWMC$mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...$frWMC$mergeProps(fieldProps, listProps)\n    })\n  };\n}\nfunction $293f70390ea03370$export$497855f14858aa34(props, state, ref) {\n  let {\n    key: key\n  } = props;\n  let data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);\n  var _isDisabled;\n  let isDisabled = (_isDisabled = props.isDisabled) !== null && _isDisabled !== void 0 ? _isDisabled : state.disabledKeys.has(key);\n  var _isSelected;\n  let isSelected = (_isSelected = props.isSelected) !== null && _isSelected !== void 0 ? _isSelected : state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n  var _shouldSelectOnPressUp;\n  let shouldSelectOnPressUp = (_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _shouldSelectOnPressUp !== void 0 ? _shouldSelectOnPressUp : data.shouldSelectOnPressUp;\n  var _shouldFocusOnHover;\n  let shouldFocusOnHover = (_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _shouldFocusOnHover !== void 0 ? _shouldFocusOnHover : data.shouldFocusOnHover;\n  var _shouldUseVirtualFocus;\n  let shouldUseVirtualFocus = (_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _shouldUseVirtualFocus !== void 0 ? _shouldUseVirtualFocus : data.shouldUseVirtualFocus;\n  var _isVirtualized;\n  let isVirtualized = (_isVirtualized = props.isVirtualized) !== null && _isVirtualized !== void 0 ? _isVirtualized : data.isVirtualized;\n  let labelId = $frWMC$useSlotId();\n  let descriptionId = $frWMC$useSlotId();\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!($frWMC$isMac() && $frWMC$isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = $frWMC$getItemCount(state.collection);\n  }\n  let {\n    itemProps: itemProps,\n    isPressed: isPressed,\n    hasAction: hasAction,\n    allowsSelection: allowsSelection\n  } = $frWMC$useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,\n    isVirtualized: isVirtualized,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    isDisabled: isDisabled,\n    onAction: data.onAction ? () => data.onAction(key) : undefined\n  });\n  let {\n    hoverProps: hoverProps\n  } = $frWMC$useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!$frWMC$isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n  return {\n    optionProps: {\n      ...optionProps,\n      ...$frWMC$mergeProps(itemProps, hoverProps),\n      id: $b1f0cad8af73213b$export$9145995848b05025(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused: isFocused,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\nfunction $af383d3bef1cfdc9$export$c3f9f39876e4bc7(props) {\n  let {\n    heading: heading,\n    'aria-label': ariaLabel\n  } = props;\n  let headingId = $frWMC$useId();\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\nexport { $c132121280ec012d$export$50eacbbf140a3141 as useListBox, $293f70390ea03370$export$497855f14858aa34 as useOption, $af383d3bef1cfdc9$export$c3f9f39876e4bc7 as useListBoxSection, $b1f0cad8af73213b$export$3585ede4d035bf14 as listData, $b1f0cad8af73213b$export$9145995848b05025 as getItemId };","map":{"version":3,"mappings":"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","names":["$b1f0cad8af73213b$export$3585ede4d035bf14","WeakMap","$b1f0cad8af73213b$var$normalizeKey","key","replace","$b1f0cad8af73213b$export$9145995848b05025","state","itemKey","data","get","Error","id","$c132121280ec012d$export$50eacbbf140a3141","props","ref","domProps","$frWMC$filterDOMProps","labelable","listProps","$frWMC$useSelectableList","selectionManager","collection","disabledKeys","focusWithinProps","$frWMC$useFocusWithin","onFocusWithin","onFocus","onBlurWithin","onBlur","onFocusWithinChange","onFocusChange","$frWMC$useId","set","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","onAction","labelProps","fieldProps","$frWMC$useLabel","labelElementType","listBoxProps","$frWMC$mergeProps","selectionMode","role","$293f70390ea03370$export$497855f14858aa34","_isDisabled","isDisabled","has","_isSelected","isSelected","isFocused","focusedKey","_shouldSelectOnPressUp","_shouldFocusOnHover","_shouldUseVirtualFocus","_isVirtualized","labelId","$frWMC$useSlotId","descriptionId","optionProps","undefined","$frWMC$isMac","$frWMC$isWebKit","getItem","index","$frWMC$getItemCount","itemProps","isPressed","hasAction","allowsSelection","$frWMC$useSelectableItem","allowsDifferentPressOrigin","hoverProps","$frWMC$useHover","onHoverStart","$frWMC$isFocusVisible","setFocused","setFocusedKey","descriptionProps","$af383d3bef1cfdc9$export$c3f9f39876e4bc7","heading","ariaLabel","headingId","headingProps","groupProps"],"sources":["C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\utils.ts","C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\useListBox.ts","C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\useOption.ts","C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\useListBoxSection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\ninterface ListData {\n  id: string,\n  shouldSelectOnPressUp?: boolean,\n  shouldFocusOnHover?: boolean,\n  shouldUseVirtualFocus?: boolean,\n  isVirtualized?: boolean,\n  onAction?: (key: Key) => void\n}\n\nexport const listData = new WeakMap<ListState<unknown>, ListData>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return `${data.id}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {Key, ReactNode, RefObject} from 'react';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useId} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: DOMAttributes,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: DOMAttributes\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode,\n  /**\n   * Handler that is called when a user performs an action on an item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: (key: Key) => void\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {isFocusVisible, useHover} from '@react-aria/interactions';\nimport {isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {Key, RefObject} from 'react';\nimport {ListState} from '@react-stately/list';\nimport {SelectableItemStates, useSelectableItem} from '@react-aria/selection';\n\nexport interface OptionAria extends SelectableItemStates {\n  /** Props for the option element. */\n  optionProps: DOMAttributes,\n\n  /** Props for the main text element inside the option. */\n  labelProps: DOMAttributes,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: DOMAttributes,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean\n}\n\nexport interface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<FocusableElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps, isPressed, hasAction, allowsSelection} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    isDisabled,\n    onAction: data.onAction ? () => data.onAction(key) : undefined\n  });\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(itemProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isSelected,\n    isDisabled,\n    isPressed,\n    allowsSelection,\n    hasAction\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\nexport interface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\nexport interface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: DOMAttributes,\n\n  /** Props for the heading element, if any. */\n  headingProps: DOMAttributes,\n\n  /** Props for the group element. */\n  groupProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}