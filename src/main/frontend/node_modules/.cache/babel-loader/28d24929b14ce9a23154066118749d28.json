{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { Input } from '../../primitives/Input';\nimport { PinInputContext } from './Context';\nimport { Platform } from 'react-native';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst PinInputFiled = (_ref, ref) => {\n  let {\n    fieldIndex = 0,\n    defaultValue: pDefaultValue,\n    ...props\n  } = _ref;\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  } = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  let defaultValue = pDefaultValue || cDefaultValue;\n  let value = cValue && cValue[fieldIndex];\n  const keyPressHandler = event => {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  const textChangeHandler = value => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Input //@ts-ignore\n  , _extends({\n    ref: mergeRefs([myRef, ref])\n  }, context, props, {\n    onKeyPress: event => keyPressHandler(event),\n    onChangeText: value => textChangeHandler(value),\n    keyboardType: \"numeric\",\n    defaultValue: defaultValue,\n    value: value\n  }));\n};\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(PinInputFiled));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,wBAAtB;AAEA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,aAAa,GAAG,OAMpBC,GANoB,KAOjB;EAAA,IANH;IACEC,UAAU,GAAG,CADf;IAEEC,YAAY,EAAEC,aAFhB;IAGE,GAAGC;EAHL,CADoB;EAQpB,IAAI;IACFC,YADE;IAEFC,KAAK,EAAEC,MAFL;IAGFC,UAHE;IAIFN,YAAY,EAAEO,aAJZ;IAKFC,sBALE;IAMF,GAAGC;EAND,IAOkBlB,KAAK,CAACmB,UAAN,CAAiBjB,eAAjB,CAPtB;EAQAc,aAAa,GAAGA,aAAa,IAAIA,aAAa,CAACR,UAAD,CAA9C;EACA,IAAIC,YAAY,GAAGC,aAAa,IAAIM,aAApC;EACA,IAAIH,KAAK,GAAGC,MAAM,IAAIA,MAAM,CAACN,UAAD,CAA5B;EAEA,MAAMY,eAAe,GAAIC,KAAD,IAAgB;IACtC,IAAIlB,QAAQ,CAACmB,EAAT,KAAgB,KAApB,EAA2B;MACzB,IAAID,KAAK,CAACE,WAAN,CAAkBC,GAAlB,IAAyB,CAAzB,IAA8BH,KAAK,CAACE,WAAN,CAAkBC,GAAlB,IAAyB,CAA3D,EAA8D;QAC5DZ,YAAY,IAAIA,YAAY,CAACS,KAAK,CAACE,WAAN,CAAkBC,GAAnB,EAAwBhB,UAAxB,CAA5B;MACD,CAFD,MAEO,IAAIa,KAAK,CAACE,WAAN,CAAkBC,GAAlB,KAA0B,WAA9B,EAA2C;QAChDZ,YAAY,IAAIA,YAAY,CAAC,EAAD,EAAKJ,UAAL,CAA5B;MACD;IACF;EACF,CARD;EASA,MAAMiB,iBAAiB,GAAIZ,KAAD,IAAgB;IACxC;IACAI,sBAAsB,IAAIA,sBAAsB,CAACJ,KAAD,EAAQL,UAAR,CAAhD;EACD,CAHD;EAIA,MAAMkB,KAAK,GAAG1B,KAAK,CAAC2B,MAAN,CAAa,IAAb,CAAd;EACA3B,KAAK,CAAC4B,SAAN,CAAgB,MAAM;IACpBb,UAAU,IAAIA,UAAU,CAACW,KAAD,EAAQlB,UAAR,CAAxB;EACD,CAFD,EAEG,CAACkB,KAAD,EAAQlB,UAAR,EAAoBO,UAApB,CAFH,EA3BG,CA+BH;;EACA,IAAIV,qBAAqB,CAACM,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,oBACEX,oBAACC,KAAD,CACE;EAAA,EADF4B;IAEEtB,GAAG,EAAEH,SAAS,CAAC,CAACsB,KAAD,EAAQnB,GAAR,CAAD;EAFhB,GAGMW,OAHN,EAIMP,KAJN;IAKEmB,UAAU,EAAGT,KAAD,IAAWD,eAAe,CAACC,KAAD,CALxC;IAMEU,YAAY,EAAGlB,KAAD,IAAWY,iBAAiB,CAACZ,KAAD,CAN5C;IAOEmB,YAAY,EAAC,SAPf;IAQEvB,YAAY,EAAEA,YARhB;IASEI,KAAK,EAAEA;EATT,GADF;AAaD,CAvDD;AAyDA,4BAAeb,KAAK,CAACiC,IAAN,eAAWjC,KAAK,CAACkC,UAAN,CAAiB5B,aAAjB,CAAX,CAAf","names":["React","Input","PinInputContext","Platform","mergeRefs","useHasResponsiveProps","PinInputFiled","ref","fieldIndex","defaultValue","pDefaultValue","props","handleChange","value","cValue","setRefList","cDefaultValue","handleMultiValueChange","context","useContext","keyPressHandler","event","OS","nativeEvent","key","textChangeHandler","myRef","useRef","useEffect","_extends","onKeyPress","onChangeText","keyboardType","memo","forwardRef"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\PinInput\\PinInputField.tsx"],"sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { IPinInputFieldProps, IPinInputContext } from './types';\nimport { PinInputContext } from './Context';\nimport { Platform } from 'react-native';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PinInputFiled = (\n  {\n    fieldIndex = 0,\n    defaultValue: pDefaultValue,\n    ...props\n  }: IPinInputFieldProps,\n  ref?: any\n) => {\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  }: IPinInputContext = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  let defaultValue = pDefaultValue || cDefaultValue;\n  let value = cValue && cValue[fieldIndex];\n\n  const keyPressHandler = (event: any) => {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  const textChangeHandler = (value: any) => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      //@ts-ignore\n      ref={mergeRefs([myRef, ref])}\n      {...context}\n      {...props}\n      onKeyPress={(event) => keyPressHandler(event)}\n      onChangeText={(value) => textChangeHandler(value)}\n      keyboardType=\"numeric\"\n      defaultValue={defaultValue}\n      value={value}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInputFiled));\n"]},"metadata":{},"sourceType":"module"}