{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { ChevronDownIcon, ChevronUpIcon } from '../../primitives/Icon/Icons';\nimport { AccordionItemContext } from './Context';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst AccordionIcon = (_ref, ref) => {\n  let {\n    ...props\n  } = _ref;\n  const {\n    isOpen\n  } = React.useContext(AccordionItemContext);\n  const {\n    ...newProps\n  } = useThemeProps('AccordionIcon', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return isOpen ? /*#__PURE__*/React.createElement(ChevronUpIcon, _extends({\n    color: \"white\"\n  }, newProps, {\n    ref: ref\n  })) : /*#__PURE__*/React.createElement(ChevronDownIcon, _extends({}, newProps, {\n    ref: ref\n  }));\n};\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(AccordionIcon));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,6BAA/C;AAEA,SAASC,oBAAT,QAAqC,WAArC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,aAAa,GAAG,OAAoCC,GAApC,KAAkD;EAAA,IAAjD;IAAE,GAAGC;EAAL,CAAD;EACpB,MAAM;IAAEC;EAAF,IAAyCT,KAAK,CAACU,UAAN,CAC7CP,oBAD6C,CAA/C;EAGA,MAAM;IAAE,GAAGQ;EAAL,IAAkBP,aAAa,CAAC,eAAD,EAAkBI,KAAlB,CAArC,CAJsE,CAKtE;;EACA,IAAIH,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OAAOC,MAAM,gBACXT,oBAACE,aAAD;IAAeU,KAAK,EAAC;EAArB,GAAiCD,QAAjC;IAA2CJ,GAAG,EAAEA;EAAhD,GADW,gBAGXP,oBAACC,eAAD,eAAqBU,QAArB;IAA+BJ,GAAG,EAAEA;EAApC,GAHF;AAKD,CAdD;AAgBA,4BAAeP,KAAK,CAACa,IAAN,eAAWb,KAAK,CAACc,UAAN,CAAiBR,aAAjB,CAAX,CAAf","names":["React","ChevronDownIcon","ChevronUpIcon","AccordionItemContext","useThemeProps","useHasResponsiveProps","AccordionIcon","ref","props","isOpen","useContext","newProps","color","memo","forwardRef"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\Accordion\\AccordionIcon.tsx"],"sourcesContent":["import React from 'react';\nimport { ChevronDownIcon, ChevronUpIcon } from '../../primitives/Icon/Icons';\nimport type { IAccordionIconProps, IAccordionItemContextProps } from './types';\nimport { AccordionItemContext } from './Context';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AccordionIcon = ({ ...props }: IAccordionIconProps, ref?: any) => {\n  const { isOpen }: IAccordionItemContextProps = React.useContext(\n    AccordionItemContext\n  );\n  const { ...newProps } = useThemeProps('AccordionIcon', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return isOpen ? (\n    <ChevronUpIcon color=\"white\" {...newProps} ref={ref} />\n  ) : (\n    <ChevronDownIcon {...newProps} ref={ref} />\n  );\n};\n\nexport default React.memo(React.forwardRef(AccordionIcon));\n"]},"metadata":{},"sourceType":"module"}