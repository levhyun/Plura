{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { HStack } from '../../primitives/Stack';\nimport { useControllableState } from '../../../hooks';\nimport { Pressable } from '../../primitives/Pressable';\nimport { usePropsResolution } from '../../../hooks/useThemeProps/usePropsResolution';\nimport Text from '../../primitives/Text';\nimport { ThreeDotsIcon } from '../../primitives/Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst Breadcrumb = (_ref, ref) => {\n  let {\n    style,\n    children,\n    separator,\n    _text,\n    maxItems,\n    _button,\n    isCollapsed,\n    onCollapseChange,\n    ...props\n  } = _ref;\n  const textProps = {\n    ..._text\n  }; // Maintaining state to show all children on press of collapse button\n\n  const [collapsed, setCollapsed] = useControllableState({\n    value: isCollapsed,\n    defaultValue: false,\n    onChange: value => {\n      onCollapseChange && onCollapseChange(value);\n    }\n  });\n  const {\n    spacing,\n    ...newProps\n  } = usePropsResolution('Breadcrumb', props);\n  const separatorProps = {\n    accessibilityRole: Platform.OS === 'web' ? 'presentation' : undefined\n  };\n  const separatorElement = separator ? typeof separator === 'string' ? /*#__PURE__*/React.createElement(Text, _extends({}, separatorProps, {\n    mx: spacing\n  }), separator) : /*#__PURE__*/React.cloneElement(separator, {\n    mx: spacing,\n    ...separatorProps\n  }) : /*#__PURE__*/React.createElement(Text, _extends({\n    mx: spacing\n  }, separatorProps), '/'); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(HStack, _extends({\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  }, newProps, {\n    ref: ref,\n    style: style // Custom Separator\n    ,\n\n    divider: separatorElement,\n    space: spacing // @ts-ignore - Web only prop\n    ,\n\n    accessibilityRole: Platform.OS === 'web' ? 'navigation' : undefined,\n    accessibilityLabel: \"Breadcrumb\"\n  }), children && !children.length ? children : getBreadcrumbSeparator(children, textProps, maxItems, _button, collapsed, setCollapsed));\n}; // Returns children to be rendered\n\nconst getBreadcrumbSeparator = (children, props, maxItems, _button, collapsed, setCollapsed) => {\n  if (Array.isArray(children)) {\n    if (children.length === 1) {\n      return children;\n    }\n    let result = [];\n    if (maxItems) {\n      let buttonAdded = false;\n      if (typeof maxItems == 'number') {\n        // When MaxItems is a number\n        if (children.length > 2 * maxItems) {\n          for (let i = 0; i < children.length; i++) {\n            if (i < maxItems || i >= children.length - maxItems) {\n              result.push(children[i]);\n            } else {\n              if (!buttonAdded) {\n                result.push( /*#__PURE__*/React.createElement(CollapseButton, _extends({}, _button, {\n                  setCollapsed: setCollapsed\n                })));\n                buttonAdded = true;\n              }\n            }\n          }\n          buttonAdded = false;\n        }\n      } // Whem maxItems is an array\n      else if (typeof maxItems == 'object') {\n        if (children.length > maxItems[0] + maxItems[1]) for (let i = 0; i < children.length; i++) {\n          if (i < maxItems[0] || i >= children.length - maxItems[1]) {\n            result.push(children[i]);\n          } else {\n            if (!buttonAdded) {\n              // pushing Collapsible button as a child\n              result.push( /*#__PURE__*/React.createElement(CollapseButton, _extends({}, _button, {\n                setCollapsed: setCollapsed\n              })));\n              buttonAdded = true;\n            }\n          }\n        }\n        buttonAdded = false;\n      }\n    } else {\n      result = children;\n    }\n    if (!collapsed) {\n      result = children;\n    }\n    return result.map((child, index) => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        _text: {\n          ...props\n        },\n        ...props,\n        key: \"breadcrumb-separator-\".concat(index)\n      });\n    });\n  } else {\n    return children;\n  }\n}; // Collapse button\n\nconst CollapseButton = props => {\n  const {\n    ...remainingProps\n  } = props;\n  return /*#__PURE__*/React.createElement(Pressable, _extends({}, remainingProps, {\n    onPress: () => {\n      props.setCollapsed(false);\n    }\n  }), /*#__PURE__*/React.createElement(ThreeDotsIcon, {\n    size: 4\n  }));\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Breadcrumb));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","Platform","HStack","useControllableState","Pressable","usePropsResolution","Text","ThreeDotsIcon","useHasResponsiveProps","Breadcrumb","ref","style","children","separator","_text","maxItems","_button","isCollapsed","onCollapseChange","props","textProps","collapsed","setCollapsed","value","defaultValue","onChange","spacing","newProps","separatorProps","accessibilityRole","OS","undefined","separatorElement","mx","cloneElement","display","flexWrap","divider","space","accessibilityLabel","length","getBreadcrumbSeparator","Array","isArray","result","buttonAdded","i","push","CollapseButton","map","child","index","key","remainingProps","onPress","size"],"sources":["C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\native-base\\lib\\module\\components\\composites\\Breadcrumb\\Breadcrumb.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { AccessibilityRole, Platform } from 'react-native';\nimport { HStack } from '../../primitives/Stack';\nimport { useControllableState } from '../../../hooks';\nimport { Pressable } from '../../primitives/Pressable';\nimport type { IBreadcrumbProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps/usePropsResolution';\nimport Text from '../../primitives/Text';\nimport type { IFlexProps } from '../../primitives';\nimport { ThreeDotsIcon } from '../../primitives/Icon/Icons';\n\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst Breadcrumb = (\n  {\n    style,\n    children,\n    separator,\n    _text,\n    maxItems,\n    _button,\n    isCollapsed,\n    onCollapseChange,\n    ...props\n  }: IBreadcrumbProps & IFlexProps,\n  ref: any\n) => {\n  const textProps = { ..._text };\n\n  // Maintaining state to show all children on press of collapse button\n  const [collapsed, setCollapsed] = useControllableState({\n    value: isCollapsed,\n    defaultValue: false,\n    onChange: (value) => {\n      onCollapseChange && onCollapseChange(value);\n    },\n  });\n  const { spacing, ...newProps } = usePropsResolution('Breadcrumb', props);\n\n  const separatorProps = {\n    accessibilityRole: (Platform.OS === 'web'\n      ? 'presentation'\n      : undefined) as AccessibilityRole,\n  };\n  const separatorElement = separator ? (\n    typeof separator === 'string' ? (\n      <Text {...separatorProps} mx={spacing}>\n        {separator}\n      </Text>\n    ) : (\n      React.cloneElement(separator, {\n        mx: spacing,\n        ...separatorProps,\n      })\n    )\n  ) : (\n    <Text mx={spacing} {...separatorProps}>\n      {'/'}\n    </Text>\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <HStack\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      {...newProps}\n      ref={ref}\n      style={style}\n      // Custom Separator\n      divider={separatorElement}\n      space={spacing}\n      // @ts-ignore - Web only prop\n      accessibilityRole={Platform.OS === 'web' ? 'navigation' : undefined}\n      accessibilityLabel=\"Breadcrumb\"\n    >\n      {children && !children.length\n        ? children\n        : getBreadcrumbSeparator(\n            children,\n            textProps,\n            maxItems,\n            _button,\n            collapsed,\n            setCollapsed\n          )}\n    </HStack>\n  );\n};\n\n// Returns children to be rendered\nconst getBreadcrumbSeparator = (\n  children: JSX.Element[] | JSX.Element | any,\n  props: any,\n  maxItems: number | number[] | undefined,\n  _button: any,\n  collapsed: boolean | undefined,\n  setCollapsed: any\n) => {\n  if (Array.isArray(children)) {\n    if (children.length === 1) {\n      return children;\n    }\n    let result: any = [];\n    if (maxItems) {\n      let buttonAdded = false;\n      if (typeof maxItems == 'number') {\n        // When MaxItems is a number\n        if (children.length > 2 * maxItems) {\n          for (let i = 0; i < children.length; i++) {\n            if (i < maxItems || i >= children.length - maxItems) {\n              result.push(children[i]);\n            } else {\n              if (!buttonAdded) {\n                result.push(\n                  <CollapseButton {..._button} setCollapsed={setCollapsed} />\n                );\n                buttonAdded = true;\n              }\n            }\n          }\n          buttonAdded = false;\n        }\n      }\n      // Whem maxItems is an array\n      else if (typeof maxItems == 'object') {\n        if (children.length > maxItems[0] + maxItems[1])\n          for (let i = 0; i < children.length; i++) {\n            if (i < maxItems[0] || i >= children.length - maxItems[1]) {\n              result.push(children[i]);\n            } else {\n              if (!buttonAdded) {\n                // pushing Collapsible button as a child\n                result.push(\n                  <CollapseButton {..._button} setCollapsed={setCollapsed} />\n                );\n                buttonAdded = true;\n              }\n            }\n          }\n        buttonAdded = false;\n      }\n    } else {\n      result = children;\n    }\n    if (!collapsed) {\n      result = children;\n    }\n    return result.map((child: any, index: number) => {\n      return React.cloneElement(child, {\n        _text: { ...props },\n        ...props,\n        key: `breadcrumb-separator-${index}`,\n      });\n    });\n  } else {\n    return children;\n  }\n};\n\n// Collapse button\nconst CollapseButton = (props: any) => {\n  const { ...remainingProps } = props;\n\n  return (\n    <Pressable\n      {...remainingProps}\n      onPress={() => {\n        props.setCollapsed(false);\n      }}\n    >\n      <ThreeDotsIcon size={4} />\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Breadcrumb));\nexport type { IBreadcrumbProps };\n"]},"metadata":{},"sourceType":"module"}