{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react'; //@ts-ignore\n\nimport stableHash from 'stable-hash';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\nconst RadioComponent = /*#__PURE__*/memo( /*#__PURE__*/forwardRef((_ref2, ref) => {\n  let {\n    icon,\n    inputProps,\n    combinedProps,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  } = _ref2;\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate\n  } = combinedProps;\n  const {\n    disabled: isDisabled,\n    checked: isChecked\n  } = inputProps;\n  const _ref = React.useRef(null);\n  const {\n    isHovered\n  } = useHover({}, _ref);\n  const mergedRefs = mergeRefs([_ref, wrapperRef]);\n  const {\n    focusProps,\n    isFocusVisible\n  } = useFocusRing();\n  const [isFocused, setFocused] = React.useState(isFocusedProp);\n  const [isPressed, setPressed] = React.useState(isPressedProp);\n  const handleFocus = () => {\n    setFocused(true);\n  };\n  const handleBlur = () => {\n    isFocusedProp ? setFocused(true) : setFocused(false);\n  };\n  const handlePressIn = () => {\n    setPressed(true);\n  };\n  const handlePressOut = () => {\n    isPressedProp ? setPressed(true) : setPressed(false);\n  };\n  const {\n    _interactionBox,\n    _icon,\n    _stack,\n    _text,\n    ...resolvedProps\n  } = usePropsResolution('Radio', combinedProps, {\n    isInvalid,\n    isReadOnly,\n    isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,\n    isDisabled,\n    isIndeterminate,\n    isChecked,\n    isHovered: isHoveredProp || isHovered,\n    isPressed,\n    isFocused\n  }); // only calling below function when icon exist.\n\n  const sizedIcon = () => /*#__PURE__*/\n  //@ts-ignore\n  React.cloneElement(icon, {\n    ..._icon\n  });\n  const component = /*#__PURE__*/React.createElement(Stack, _stack, /*#__PURE__*/React.createElement(Center, null, /*#__PURE__*/React.createElement(Box, _interactionBox), /*#__PURE__*/React.createElement(Center, resolvedProps, icon && sizedIcon && isChecked ? sizedIcon() : /*#__PURE__*/React.createElement(CircleIcon, _extends({}, _icon, {\n    opacity: isChecked ? 1 : 0\n  })))), wrapStringChild(children, _text)); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Box // @ts-ignore - RN web supports accessibilityRole=\"label\"\n  , {\n    accessibilityRole: \"label\",\n    ref: mergedRefs\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onMouseDown: handlePressIn,\n    onMouseUp: handlePressOut\n  }, /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement(\"input\", _extends({}, inputProps, focusProps, {\n    ref: ref,\n    onFocus: handleFocus,\n    onBlur: handleBlur\n  }))), component));\n}));\nconst Radio = (_ref3, ref) => {\n  let {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  } = _ref3;\n  var _contextState$state;\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n  const combinedProps = combineContextAndProps({\n    ...formControlContext,\n    ...contextState\n  }, props);\n  const inputRef = React.useRef(null);\n  const radioState = useRadio({\n    ...combinedProps,\n    'aria-label': props.accessibilityLabel,\n    children\n  }, (_contextState$state = contextState.state) !== null && _contextState$state !== void 0 ? _contextState$state : {}, inputRef); //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const inputProps = React.useMemo(() => radioState.inputProps, [radioState.inputProps.checked, radioState.inputProps.disabled]);\n  const contextCombinedProps = React.useMemo(() => {\n    return {\n      ...combinedProps\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n  return /*#__PURE__*/React.createElement(RadioComponent, {\n    inputProps: inputProps,\n    combinedProps: contextCombinedProps,\n    children: children,\n    ref: ref,\n    icon: icon,\n    wrapperRef: wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed: isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp\n  });\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Radio));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","stableHash","Box","Stack","Center","usePropsResolution","wrapStringChild","mergeRefs","useHover","useRadio","VisuallyHidden","RadioContext","useFocusRing","CircleIcon","useHasResponsiveProps","combineContextAndProps","isEmptyObj","useFormControlContext","RadioComponent","ref","icon","inputProps","combinedProps","children","wrapperRef","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","props","isInvalid","isReadOnly","isIndeterminate","disabled","isDisabled","checked","isChecked","_ref","useRef","mergedRefs","focusProps","setFocused","useState","setPressed","handleFocus","handleBlur","handlePressIn","handlePressOut","_interactionBox","_icon","_stack","_text","resolvedProps","sizedIcon","cloneElement","component","opacity","accessibilityRole","onMouseDown","onMouseUp","onFocus","onBlur","Radio","formControlContext","contextState","useContext","inputRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","console","error"],"sources":["C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\native-base\\lib\\module\\components\\primitives\\Radio\\Radio.web.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n      const [isFocused, setFocused] = React.useState(isFocusedProp);\n      const [isPressed, setPressed] = React.useState(isPressedProp);\n      const handleFocus = () => {\n        setFocused(true);\n      };\n      const handleBlur = () => {\n        isFocusedProp ? setFocused(true) : setFocused(false);\n      };\n      const handlePressIn = () => {\n        setPressed(true);\n      };\n\n      const handlePressOut = () => {\n        isPressedProp ? setPressed(true) : setPressed(false);\n      };\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n        isPressed,\n        isFocused,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <div onMouseDown={handlePressIn} onMouseUp={handlePressOut}>\n            <VisuallyHidden>\n              <input\n                {...inputProps}\n                {...focusProps}\n                ref={ref}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n              />\n            </VisuallyHidden>\n            {component}\n          </div>\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressed}\n      isFocused={isFocusedProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]},"metadata":{},"sourceType":"module"}