{"ast":null,"code":"/* eslint-disable */\n//@ts-nocheck\n// This functions is taken from react native web\nimport hash from '../useResponsiveQuery/hash';\nimport prefixStyles from '../react-native-web-fucntions/prefixStyles';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\nimport createReactDOMStyle from '../react-native-web-fucntions/createReactDOMStyle';\nimport hyphenateStyleName from '../react-native-web-fucntions/hyphenateStyleName';\nconst borderTopLeftRadius = 'borderTopLeftRadius';\nconst borderTopRightRadius = 'borderTopRightRadius';\nconst borderBottomLeftRadius = 'borderBottomLeftRadius';\nconst borderBottomRightRadius = 'borderBottomRightRadius';\nconst borderLeftColor = 'borderLeftColor';\nconst borderLeftStyle = 'borderLeftStyle';\nconst borderLeftWidth = 'borderLeftWidth';\nconst borderRightColor = 'borderRightColor';\nconst borderRightStyle = 'borderRightStyle';\nconst borderRightWidth = 'borderRightWidth';\nconst right = 'right';\nconst marginLeft = 'marginLeft';\nconst marginRight = 'marginRight';\nconst paddingLeft = 'paddingLeft';\nconst paddingRight = 'paddingRight';\nconst left = 'left';\nconst PROPERTIES_VALUE = ['clear', 'float', 'textAlign']; // Map of LTR property names to their BiDi equivalent.\n\nconst PROPERTIES_FLIP = {\n  [borderTopLeftRadius]: borderTopRightRadius,\n  [borderTopRightRadius]: borderTopLeftRadius,\n  [borderBottomLeftRadius]: borderBottomRightRadius,\n  [borderBottomRightRadius]: borderBottomLeftRadius,\n  [borderLeftColor]: borderRightColor,\n  [borderLeftStyle]: borderRightStyle,\n  [borderLeftWidth]: borderRightWidth,\n  [borderRightColor]: borderLeftColor,\n  [borderRightStyle]: borderLeftStyle,\n  [borderRightWidth]: borderLeftWidth,\n  [left]: right,\n  [marginLeft]: marginRight,\n  [marginRight]: marginLeft,\n  [paddingLeft]: paddingRight,\n  [paddingRight]: paddingLeft,\n  [right]: left\n}; // Map of I18N property names to their LTR equivalent.\n\nconst PROPERTIES_I18N = {\n  borderTopStartRadius: borderTopLeftRadius,\n  borderTopEndRadius: borderTopRightRadius,\n  borderBottomStartRadius: borderBottomLeftRadius,\n  borderBottomEndRadius: borderBottomRightRadius,\n  borderStartColor: borderLeftColor,\n  borderStartStyle: borderLeftStyle,\n  borderStartWidth: borderLeftWidth,\n  borderEndColor: borderRightColor,\n  borderEndStyle: borderRightStyle,\n  borderEndWidth: borderRightWidth,\n  end: right,\n  marginStart: marginLeft,\n  marginEnd: marginRight,\n  paddingStart: paddingLeft,\n  paddingEnd: paddingRight,\n  start: left\n};\nconst customGroup = {\n  borderColor: 2,\n  borderRadius: 2,\n  borderStyle: 2,\n  borderWidth: 2,\n  display: 2,\n  flex: 2,\n  margin: 2,\n  overflow: 2,\n  overscrollBehavior: 2,\n  padding: 2,\n  marginHorizontal: 2.1,\n  marginVertical: 2.1,\n  paddingHorizontal: 2.1,\n  paddingVertical: 2.1\n};\nconst atomicGroup = 2.2;\nconst cache = new Map();\nexport function atomic(style) {\n  //@ts-ignore\n  const compiledStyle = {\n    $$css: true\n  };\n  const compiledRules = [];\n  function atomicCompile(prop, value) {\n    const valueString = stringifyValueWithProperty(value, prop);\n    const cacheKey = prop + valueString;\n    const cachedResult = cache.get(cacheKey);\n    let identifier;\n    if (cachedResult != null) {\n      identifier = cachedResult[0];\n      compiledRules.push(cachedResult[1]);\n    } else {\n      identifier = createIdentifier('r', prop, value);\n      const order = customGroup[prop] || atomicGroup;\n      const rules = createAtomicRules(identifier, prop, value);\n      const orderedRules = [rules, order];\n      compiledRules.push(orderedRules);\n      cache.set(cacheKey, [identifier, orderedRules]);\n    }\n    return identifier;\n  }\n  Object.keys(style).sort().forEach(prop => {\n    const value = style[prop];\n    if (value != null) {\n      let localizeableValue; // BiDi flip values\n\n      if (PROPERTIES_VALUE.indexOf(prop) > -1) {\n        const left = atomicCompile(prop, 'left');\n        const right = atomicCompile(prop, 'right');\n        if (value === 'start') {\n          localizeableValue = [left, right];\n        } else if (value === 'end') {\n          localizeableValue = [right, left];\n        }\n      } // BiDi flip properties\n\n      const propPolyfill = PROPERTIES_I18N[prop];\n      if (propPolyfill != null) {\n        const ltr = atomicCompile(propPolyfill, value);\n        const rtl = atomicCompile(PROPERTIES_FLIP[propPolyfill], value);\n        localizeableValue = [ltr, rtl];\n      } // BiDi flip transitionProperty value\n\n      if (prop === 'transitionProperty') {\n        const values = Array.isArray(value) ? value : [value];\n        const polyfillIndices = [];\n        for (let i = 0; i < values.length; i++) {\n          const val = values[i];\n          if (typeof val === 'string' && PROPERTIES_I18N[val] != null) {\n            polyfillIndices.push(i);\n          }\n        }\n        if (polyfillIndices.length > 0) {\n          const ltrPolyfillValues = [...values];\n          const rtlPolyfillValues = [...values];\n          polyfillIndices.forEach(i => {\n            const ltrVal = ltrPolyfillValues[i];\n            if (typeof ltrVal === 'string') {\n              const ltrPolyfill = PROPERTIES_I18N[ltrVal];\n              const rtlPolyfill = PROPERTIES_FLIP[ltrPolyfill];\n              ltrPolyfillValues[i] = ltrPolyfill;\n              rtlPolyfillValues[i] = rtlPolyfill;\n              const ltr = atomicCompile(prop, ltrPolyfillValues);\n              const rtl = atomicCompile(prop, rtlPolyfillValues);\n              localizeableValue = [ltr, rtl];\n            }\n          });\n        }\n      }\n      if (localizeableValue == null) {\n        localizeableValue = atomicCompile(prop, value);\n      } else {\n        compiledStyle['$$css$localize'] = true;\n      }\n      compiledStyle[prop] = localizeableValue;\n    }\n  });\n  return [compiledStyle, compiledRules];\n}\n/**\n * Create a value string that normalizes different input values with a common\n * output.\n */\n\nexport function stringifyValueWithProperty(value, property) {\n  // e.g., 0 => '0px', 'black' => 'rgba(0,0,0,1)'\n  const normalizedValue = normalizeValueWithProperty(value, property);\n  return typeof normalizedValue !== 'string' ? JSON.stringify(normalizedValue || '') : normalizedValue;\n}\n/**\n * An identifier is associated with a unique set of styles.\n */\n\nfunction createIdentifier(prefix, name, value) {\n  const hashedString = hash(name + stringifyValueWithProperty(value, name));\n  return process.env.NODE_ENV !== 'production' ? \"\".concat(prefix, \"-\").concat(name, \"-\").concat(hashedString) : \"\".concat(prefix, \"-\").concat(hashedString);\n}\n/**\n * Create the Atomic CSS rules needed for a given StyleSheet rule.\n * Translates StyleSheet declarations to CSS.\n */\n\nfunction createAtomicRules(identifier, property, value) {\n  const rules = [];\n  const selector = \".\".concat(identifier); // Handle non-standard properties and object values that require multiple\n  // CSS rules to be created.\n\n  switch (property) {\n    case 'animationKeyframes':\n      {\n        const [animationNames, keyframesRules] = processKeyframesValue(value);\n        const block = createDeclarationBlock({\n          animationName: animationNames.join(',')\n        });\n        rules.push(\"\".concat(selector).concat(block), ...keyframesRules);\n        break;\n      }\n    // Equivalent to using '::placeholder'\n\n    case 'placeholderTextColor':\n      {\n        const block = createDeclarationBlock({\n          color: value,\n          opacity: 1\n        });\n        rules.push(\"\".concat(selector, \"::-webkit-input-placeholder\").concat(block), \"\".concat(selector, \"::-moz-placeholder\").concat(block), \"\".concat(selector, \":-ms-input-placeholder\").concat(block), \"\".concat(selector, \"::placeholder\").concat(block));\n        break;\n      }\n    // Polyfill for additional 'pointer-events' values\n    // See d13f78622b233a0afc0c7a200c0a0792c8ca9e58\n\n    case 'pointerEvents':\n      {\n        let finalValue = value;\n        if (value === 'auto' || value === 'box-only') {\n          finalValue = 'auto!important';\n          if (value === 'box-only') {\n            const block = createDeclarationBlock({\n              pointerEvents: 'none'\n            });\n            rules.push(\"\".concat(selector, \">*\").concat(block));\n          }\n        } else if (value === 'none' || value === 'box-none') {\n          finalValue = 'none!important';\n          if (value === 'box-none') {\n            const block = createDeclarationBlock({\n              pointerEvents: 'auto'\n            });\n            rules.push(\"\".concat(selector, \">*\").concat(block));\n          }\n        }\n        const block = createDeclarationBlock({\n          pointerEvents: finalValue\n        });\n        rules.push(\"\".concat(selector).concat(block));\n        break;\n      }\n    // Polyfill for draft spec\n    // https://drafts.csswg.org/css-scrollbars-1/\n\n    case 'scrollbarWidth':\n      {\n        if (value === 'none') {\n          rules.push(\"\".concat(selector, \"::-webkit-scrollbar{display:none}\"));\n        }\n        const block = createDeclarationBlock({\n          scrollbarWidth: value\n        });\n        rules.push(\"\".concat(selector).concat(block));\n        break;\n      }\n    default:\n      {\n        const block = createDeclarationBlock({\n          [property]: value\n        });\n        rules.push(\"\".concat(selector).concat(block));\n        break;\n      }\n  }\n  return rules;\n}\n/**\n * Creates a CSS declaration block from a StyleSheet object.\n */\n\nfunction createDeclarationBlock(style) {\n  const domStyle = prefixStyles(createReactDOMStyle(style));\n  const declarationsString = Object.keys(domStyle).map(property => {\n    const value = domStyle[property];\n    const prop = hyphenateStyleName(property); // The prefixer may return an array of values:\n    // { display: [ '-webkit-flex', 'flex' ] }\n    // to represent \"fallback\" declarations\n    // { display: -webkit-flex; display: flex; }\n\n    if (Array.isArray(value)) {\n      return value.map(v => \"\".concat(prop, \":\").concat(v)).join(';');\n    } else {\n      return \"\".concat(prop, \":\").concat(value);\n    }\n  }) // Once properties are hyphenated, this will put the vendor\n  // prefixed and short-form properties first in the list.\n  .sort().join(';');\n  return \"{\".concat(declarationsString, \";}\");\n}\n/**\n * Create CSS keyframes rules and names from a StyleSheet keyframes object.\n */\n\nfunction processKeyframesValue(keyframesValue) {\n  if (typeof keyframesValue === 'number') {\n    throw new Error(\"Invalid CSS keyframes type: \".concat(typeof keyframesValue));\n  }\n  const animationNames = [];\n  const rules = [];\n  const value = Array.isArray(keyframesValue) ? keyframesValue : [keyframesValue];\n  value.forEach(keyframes => {\n    if (typeof keyframes === 'string') {\n      // Support external animation libraries (identifiers only)\n      animationNames.push(keyframes);\n    } else {\n      // Create rules for each of the keyframes\n      const [identifier, keyframesRules] = createKeyframes(keyframes);\n      animationNames.push(identifier);\n      rules.push(...keyframesRules);\n    }\n  });\n  return [animationNames, rules];\n}\n/**\n * Create individual CSS keyframes rules.\n */\n\nfunction createKeyframes(keyframes) {\n  const prefixes = ['-webkit-', ''];\n  const identifier = createIdentifier('r', 'animation', keyframes);\n  const steps = '{' + Object.keys(keyframes).map(stepName => {\n    const rule = keyframes[stepName];\n    const block = createDeclarationBlock(rule);\n    return \"\".concat(stepName).concat(block);\n  }).join('') + '}';\n  const rules = prefixes.map(prefix => {\n    return \"@\".concat(prefix, \"keyframes \").concat(identifier).concat(steps);\n  });\n  return [identifier, rules];\n}","map":{"version":3,"mappings":"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","names":["hash","prefixStyles","normalizeValueWithProperty","createReactDOMStyle","hyphenateStyleName","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRightColor","borderRightStyle","borderRightWidth","right","marginLeft","marginRight","paddingLeft","paddingRight","left","PROPERTIES_VALUE","PROPERTIES_FLIP","PROPERTIES_I18N","borderTopStartRadius","borderTopEndRadius","borderBottomStartRadius","borderBottomEndRadius","borderStartColor","borderStartStyle","borderStartWidth","borderEndColor","borderEndStyle","borderEndWidth","end","marginStart","marginEnd","paddingStart","paddingEnd","start","customGroup","borderColor","borderRadius","borderStyle","borderWidth","display","flex","margin","overflow","overscrollBehavior","padding","marginHorizontal","marginVertical","paddingHorizontal","paddingVertical","atomicGroup","cache","Map","atomic","style","compiledStyle","$$css","compiledRules","atomicCompile","prop","value","valueString","stringifyValueWithProperty","cacheKey","cachedResult","get","identifier","push","createIdentifier","order","rules","createAtomicRules","orderedRules","set","Object","keys","sort","forEach","localizeableValue","indexOf","propPolyfill","ltr","rtl","values","Array","isArray","polyfillIndices","i","length","val","ltrPolyfillValues","rtlPolyfillValues","ltrVal","ltrPolyfill","rtlPolyfill","property","normalizedValue","JSON","stringify","prefix","name","hashedString","process","env","NODE_ENV","selector","animationNames","keyframesRules","processKeyframesValue","block","createDeclarationBlock","animationName","join","color","opacity","finalValue","pointerEvents","scrollbarWidth","domStyle","declarationsString","map","v","keyframesValue","Error","keyframes","createKeyframes","prefixes","steps","stepName","rule"],"sources":["C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\native-base\\lib\\module\\utils\\react-native-web-fucntions\\atomic.ts"],"sourcesContent":["/* eslint-disable */\n//@ts-nocheck\n// This functions is taken from react native web\n\nimport hash from '../useResponsiveQuery/hash';\nimport prefixStyles from '../react-native-web-fucntions/prefixStyles';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\nimport createReactDOMStyle from '../react-native-web-fucntions/createReactDOMStyle';\nimport hyphenateStyleName from '../react-native-web-fucntions/hyphenateStyleName';\ntype Value = Object | Array<any> | string | number;\ntype Style = { [key: string]: Value };\ntype Rule = string;\ntype Rules = Array<Rule>;\ntype RulesData = [Rules, number];\ntype CompiledStyle = {\n  //@ts-ignore\n  $$css: boolean;\n  //@ts-ignore\n  $$css$localize?: boolean;\n  [key: string]: string | Array<string>;\n};\nconst borderTopLeftRadius = 'borderTopLeftRadius';\nconst borderTopRightRadius = 'borderTopRightRadius';\nconst borderBottomLeftRadius = 'borderBottomLeftRadius';\nconst borderBottomRightRadius = 'borderBottomRightRadius';\nconst borderLeftColor = 'borderLeftColor';\nconst borderLeftStyle = 'borderLeftStyle';\nconst borderLeftWidth = 'borderLeftWidth';\nconst borderRightColor = 'borderRightColor';\nconst borderRightStyle = 'borderRightStyle';\nconst borderRightWidth = 'borderRightWidth';\nconst right = 'right';\nconst marginLeft = 'marginLeft';\nconst marginRight = 'marginRight';\nconst paddingLeft = 'paddingLeft';\nconst paddingRight = 'paddingRight';\nconst left = 'left';\nconst PROPERTIES_VALUE: any = ['clear', 'float', 'textAlign'];\n// Map of LTR property names to their BiDi equivalent.\nconst PROPERTIES_FLIP: { [key: string]: string } = {\n  [borderTopLeftRadius]: borderTopRightRadius,\n  [borderTopRightRadius]: borderTopLeftRadius,\n  [borderBottomLeftRadius]: borderBottomRightRadius,\n  [borderBottomRightRadius]: borderBottomLeftRadius,\n  [borderLeftColor]: borderRightColor,\n  [borderLeftStyle]: borderRightStyle,\n  [borderLeftWidth]: borderRightWidth,\n  [borderRightColor]: borderLeftColor,\n  [borderRightStyle]: borderLeftStyle,\n  [borderRightWidth]: borderLeftWidth,\n  [left]: right,\n  [marginLeft]: marginRight,\n  [marginRight]: marginLeft,\n  [paddingLeft]: paddingRight,\n  [paddingRight]: paddingLeft,\n  [right]: left,\n};\n// Map of I18N property names to their LTR equivalent.\nconst PROPERTIES_I18N: any = {\n  borderTopStartRadius: borderTopLeftRadius,\n  borderTopEndRadius: borderTopRightRadius,\n  borderBottomStartRadius: borderBottomLeftRadius,\n  borderBottomEndRadius: borderBottomRightRadius,\n  borderStartColor: borderLeftColor,\n  borderStartStyle: borderLeftStyle,\n  borderStartWidth: borderLeftWidth,\n  borderEndColor: borderRightColor,\n  borderEndStyle: borderRightStyle,\n  borderEndWidth: borderRightWidth,\n  end: right,\n  marginStart: marginLeft,\n  marginEnd: marginRight,\n  paddingStart: paddingLeft,\n  paddingEnd: paddingRight,\n  start: left,\n};\ntype CompilerOutput = [CompiledStyle, Array<RulesData>];\nconst customGroup: { [key: string]: number } = {\n  borderColor: 2,\n  borderRadius: 2,\n  borderStyle: 2,\n  borderWidth: 2,\n  display: 2,\n  flex: 2,\n  margin: 2,\n  overflow: 2,\n  overscrollBehavior: 2,\n  padding: 2,\n  marginHorizontal: 2.1,\n  marginVertical: 2.1,\n  paddingHorizontal: 2.1,\n  paddingVertical: 2.1,\n};\nconst atomicGroup = 2.2;\nconst cache = new Map();\nexport function atomic(style: Style): CompilerOutput {\n  //@ts-ignore\n  const compiledStyle: CompiledStyle = { $$css: true };\n  const compiledRules: any = [];\n\n  function atomicCompile(prop: any, value: any) {\n    const valueString = stringifyValueWithProperty(value, prop);\n    const cacheKey = prop + valueString;\n    const cachedResult = cache.get(cacheKey);\n    let identifier;\n    if (cachedResult != null) {\n      identifier = cachedResult[0];\n      compiledRules.push(cachedResult[1]);\n    } else {\n      identifier = createIdentifier('r', prop, value);\n      const order = customGroup[prop] || atomicGroup;\n      const rules = createAtomicRules(identifier, prop, value);\n      const orderedRules = [rules, order];\n      compiledRules.push(orderedRules);\n      cache.set(cacheKey, [identifier, orderedRules]);\n    }\n    return identifier;\n  }\n\n  Object.keys(style)\n    .sort()\n    .forEach((prop) => {\n      const value = style[prop];\n      if (value != null) {\n        let localizeableValue;\n        // BiDi flip values\n        if (PROPERTIES_VALUE.indexOf(prop) > -1) {\n          const left = atomicCompile(prop, 'left');\n          const right = atomicCompile(prop, 'right');\n          if (value === 'start') {\n            localizeableValue = [left, right];\n          } else if (value === 'end') {\n            localizeableValue = [right, left];\n          }\n        }\n        // BiDi flip properties\n        const propPolyfill = PROPERTIES_I18N[prop];\n        if (propPolyfill != null) {\n          const ltr = atomicCompile(propPolyfill, value);\n          const rtl = atomicCompile(PROPERTIES_FLIP[propPolyfill], value);\n          localizeableValue = [ltr, rtl];\n        }\n        // BiDi flip transitionProperty value\n        if (prop === 'transitionProperty') {\n          const values = Array.isArray(value) ? value : [value];\n          const polyfillIndices = [];\n\n          for (let i = 0; i < values.length; i++) {\n            const val = values[i];\n            if (typeof val === 'string' && PROPERTIES_I18N[val] != null) {\n              polyfillIndices.push(i);\n            }\n          }\n\n          if (polyfillIndices.length > 0) {\n            const ltrPolyfillValues = [...values];\n            const rtlPolyfillValues = [...values];\n            polyfillIndices.forEach((i) => {\n              const ltrVal = ltrPolyfillValues[i];\n              if (typeof ltrVal === 'string') {\n                const ltrPolyfill = PROPERTIES_I18N[ltrVal];\n                const rtlPolyfill = PROPERTIES_FLIP[ltrPolyfill];\n                ltrPolyfillValues[i] = ltrPolyfill;\n                rtlPolyfillValues[i] = rtlPolyfill;\n                const ltr = atomicCompile(prop, ltrPolyfillValues);\n                const rtl = atomicCompile(prop, rtlPolyfillValues);\n                localizeableValue = [ltr, rtl];\n              }\n            });\n          }\n        }\n\n        if (localizeableValue == null) {\n          localizeableValue = atomicCompile(prop, value);\n        } else {\n          compiledStyle['$$css$localize'] = true;\n        }\n\n        compiledStyle[prop] = localizeableValue;\n      }\n    });\n\n  return [compiledStyle, compiledRules];\n}\n\n/**\n * Create a value string that normalizes different input values with a common\n * output.\n */\nexport function stringifyValueWithProperty(\n  value: Value,\n  property?: string\n): string {\n  // e.g., 0 => '0px', 'black' => 'rgba(0,0,0,1)'\n  const normalizedValue = normalizeValueWithProperty(value, property);\n  return typeof normalizedValue !== 'string'\n    ? JSON.stringify(normalizedValue || '')\n    : normalizedValue;\n}\n\n/**\n * An identifier is associated with a unique set of styles.\n */\nfunction createIdentifier(prefix: string, name: string, value: Value): string {\n  const hashedString = hash(name + stringifyValueWithProperty(value, name));\n  return process.env.NODE_ENV !== 'production'\n    ? `${prefix}-${name}-${hashedString}`\n    : `${prefix}-${hashedString}`;\n}\n\n/**\n * Create the Atomic CSS rules needed for a given StyleSheet rule.\n * Translates StyleSheet declarations to CSS.\n */\nfunction createAtomicRules(\n  identifier: string,\n  property: any,\n  value: any\n): Rules {\n  const rules = [];\n  const selector = `.${identifier}`;\n\n  // Handle non-standard properties and object values that require multiple\n  // CSS rules to be created.\n  switch (property) {\n    case 'animationKeyframes': {\n      const [animationNames, keyframesRules] = processKeyframesValue(value);\n      const block = createDeclarationBlock({\n        animationName: animationNames.join(','),\n      });\n      rules.push(`${selector}${block}`, ...keyframesRules);\n      break;\n    }\n\n    // Equivalent to using '::placeholder'\n    case 'placeholderTextColor': {\n      const block = createDeclarationBlock({ color: value, opacity: 1 });\n      rules.push(\n        `${selector}::-webkit-input-placeholder${block}`,\n        `${selector}::-moz-placeholder${block}`,\n        `${selector}:-ms-input-placeholder${block}`,\n        `${selector}::placeholder${block}`\n      );\n      break;\n    }\n\n    // Polyfill for additional 'pointer-events' values\n    // See d13f78622b233a0afc0c7a200c0a0792c8ca9e58\n    case 'pointerEvents': {\n      let finalValue = value;\n      if (value === 'auto' || value === 'box-only') {\n        finalValue = 'auto!important';\n        if (value === 'box-only') {\n          const block = createDeclarationBlock({ pointerEvents: 'none' });\n          rules.push(`${selector}>*${block}`);\n        }\n      } else if (value === 'none' || value === 'box-none') {\n        finalValue = 'none!important';\n        if (value === 'box-none') {\n          const block = createDeclarationBlock({ pointerEvents: 'auto' });\n          rules.push(`${selector}>*${block}`);\n        }\n      }\n      const block = createDeclarationBlock({ pointerEvents: finalValue });\n      rules.push(`${selector}${block}`);\n      break;\n    }\n\n    // Polyfill for draft spec\n    // https://drafts.csswg.org/css-scrollbars-1/\n    case 'scrollbarWidth': {\n      if (value === 'none') {\n        rules.push(`${selector}::-webkit-scrollbar{display:none}`);\n      }\n      const block = createDeclarationBlock({ scrollbarWidth: value });\n      rules.push(`${selector}${block}`);\n      break;\n    }\n\n    default: {\n      const block = createDeclarationBlock({ [property]: value });\n      rules.push(`${selector}${block}`);\n      break;\n    }\n  }\n\n  return rules;\n}\n\n/**\n * Creates a CSS declaration block from a StyleSheet object.\n */\nfunction createDeclarationBlock(style: Style): string {\n  const domStyle: any = prefixStyles(createReactDOMStyle(style));\n  const declarationsString = Object.keys(domStyle)\n    .map((property) => {\n      const value = domStyle[property];\n      const prop = hyphenateStyleName(property);\n      // The prefixer may return an array of values:\n      // { display: [ '-webkit-flex', 'flex' ] }\n      // to represent \"fallback\" declarations\n      // { display: -webkit-flex; display: flex; }\n      if (Array.isArray(value)) {\n        return value.map((v) => `${prop}:${v}`).join(';');\n      } else {\n        return `${prop}:${value}`;\n      }\n    })\n    // Once properties are hyphenated, this will put the vendor\n    // prefixed and short-form properties first in the list.\n    .sort()\n    .join(';');\n\n  return `{${declarationsString};}`;\n}\n\n/**\n * Create CSS keyframes rules and names from a StyleSheet keyframes object.\n */\nfunction processKeyframesValue(keyframesValue: any) {\n  if (typeof keyframesValue === 'number') {\n    throw new Error(`Invalid CSS keyframes type: ${typeof keyframesValue}`);\n  }\n\n  const animationNames: any = [];\n  const rules: any = [];\n  const value = Array.isArray(keyframesValue)\n    ? keyframesValue\n    : [keyframesValue];\n\n  value.forEach((keyframes) => {\n    if (typeof keyframes === 'string') {\n      // Support external animation libraries (identifiers only)\n      animationNames.push(keyframes);\n    } else {\n      // Create rules for each of the keyframes\n      const [identifier, keyframesRules] = createKeyframes(keyframes);\n      animationNames.push(identifier);\n      rules.push(...keyframesRules);\n    }\n  });\n\n  return [animationNames, rules];\n}\n\n/**\n * Create individual CSS keyframes rules.\n */\nfunction createKeyframes(keyframes: any): [string, Rules] {\n  const prefixes = ['-webkit-', ''];\n  const identifier = createIdentifier('r', 'animation', keyframes);\n\n  const steps =\n    '{' +\n    Object.keys(keyframes)\n      .map((stepName) => {\n        const rule = keyframes[stepName];\n        const block = createDeclarationBlock(rule);\n        return `${stepName}${block}`;\n      })\n      .join('') +\n    '}';\n\n  const rules = prefixes.map((prefix) => {\n    return `@${prefix}keyframes ${identifier}${steps}`;\n  });\n  return [identifier, rules];\n}\n"]},"metadata":{},"sourceType":"module"}