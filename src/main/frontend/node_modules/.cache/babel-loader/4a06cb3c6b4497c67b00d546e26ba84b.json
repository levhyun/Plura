{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { ExitAnimationContext } from '../../primitives/Overlay/ExitAnimationContext';\nimport { Transition } from './Transition';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst PresenceTransition = (_ref, ref) => {\n  let {\n    visible = false,\n    onTransitionComplete,\n    ...rest\n  } = _ref;\n  // const [animationExited, setAnimationExited] = React.useState(!visible);\n  const {\n    setExited\n  } = React.useContext(ExitAnimationContext); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Transition, _extends({\n    visible: visible,\n    onTransitionComplete: state => {\n      if (state === 'exited') {\n        setExited(true);\n      } else {\n        setExited(false);\n      }\n      onTransitionComplete && onTransitionComplete(state);\n    }\n  }, rest, {\n    ref: ref\n  }));\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(PresenceTransition));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,oBAAT,QAAqC,+CAArC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,kBAAkB,GAAG,OAEzBC,GAFyB,KAGtB;EAAA,IAFH;IAAEC,OAAO,GAAG,KAAZ;IAAmBC,oBAAnB;IAAyC,GAAGC;EAA5C,CADyB;EAIzB;EAEA,MAAM;IAAEC;EAAF,IAAgBX,KAAK,CAACY,UAAN,CAAiBT,oBAAjB,CAAtB,CAHG,CAIH;;EACA,IAAIE,qBAAqB,CAACK,IAAD,CAAzB,EAAiC;IAC/B,OAAO,IAAP;EACD;EAED,oBACEV,oBAACI,UAAD;IACEI,OAAO,EAAEA,OADX;IAEEC,oBAAoB,EAAGI,KAAD,IAAW;MAC/B,IAAIA,KAAK,KAAK,QAAd,EAAwB;QACtBF,SAAS,CAAC,IAAD,CAAT;MACD,CAFD,MAEO;QACLA,SAAS,CAAC,KAAD,CAAT;MACD;MACDF,oBAAoB,IAAIA,oBAAoB,CAACI,KAAD,CAA5C;IACD;EATH,GAUMH,IAVN;IAWEH,GAAG,EAAEA;EAXP,GADF;AAeD,CA3BD;AA6BA,4BAAeN,IAAI,eAACC,UAAU,CAACI,kBAAD,CAAX,CAAnB","names":["React","memo","forwardRef","ExitAnimationContext","Transition","useHasResponsiveProps","PresenceTransition","ref","visible","onTransitionComplete","rest","setExited","useContext","state"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\Transitions\\PresenceTransition.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ExitAnimationContext } from '../../primitives/Overlay/ExitAnimationContext';\nimport { Transition } from './Transition';\nimport type { IPresenceTransitionProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PresenceTransition = (\n  { visible = false, onTransitionComplete, ...rest }: IPresenceTransitionProps,\n  ref: any\n) => {\n  // const [animationExited, setAnimationExited] = React.useState(!visible);\n\n  const { setExited } = React.useContext(ExitAnimationContext);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n\n  return (\n    <Transition\n      visible={visible}\n      onTransitionComplete={(state) => {\n        if (state === 'exited') {\n          setExited(true);\n        } else {\n          setExited(false);\n        }\n        onTransitionComplete && onTransitionComplete(state);\n      }}\n      {...rest}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(PresenceTransition));\n"]},"metadata":{},"sourceType":"module"}