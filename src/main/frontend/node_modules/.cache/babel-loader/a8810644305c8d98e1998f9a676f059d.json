{"ast":null,"code":"import { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-aria/utils';\nimport { Platform } from 'react-native';\nexport const useMenuTrigger = _ref => {\n  let {\n    handleOpen,\n    isOpen\n  } = _ref;\n  const menuTriggerId = useId();\n  return {\n    'onKeyDownCapture': event => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId\n  };\n};\nexport const useMenu = () => {\n  const focusManager = useFocusManager();\n  const onKeyDown = e => {\n    switch (e.key) {\n      case 'ArrowDown':\n        {\n          e.preventDefault();\n          focusManager.focusNext({\n            wrap: true\n          });\n          break;\n        }\n      case 'ArrowUp':\n        {\n          e.preventDefault();\n          focusManager.focusPrevious({\n            wrap: true\n          });\n          break;\n        }\n    }\n  };\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu'\n  };\n};\nexport const useMenuItem = _ref2 => {\n  let {\n    textValue,\n    ref\n  } = _ref2;\n  return {\n    accessibilityRole: 'menuitem',\n    dataSet: {\n      nativebaseMenuItem: textValue\n    },\n    onHoverIn: () => {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    }\n  };\n};\nexport const useMenuOptionItem = _ref3 => {\n  let {\n    isChecked,\n    type\n  } = _ref3;\n  return {\n    accessibilityRole: 'menuitem' + (Platform.OS === 'web' ? type : ''),\n    accessibilityState: {\n      checked: isChecked\n    },\n    accessibilityChecked: isChecked\n  };\n};\nconst ITEM_ATTR = 'data-nativebase-menu-item';\nconst getValue = element => {\n  var _element$getAttribute;\n  return (_element$getAttribute = element.getAttribute(ITEM_ATTR)) !== null && _element$getAttribute !== void 0 ? _element$getAttribute : '';\n};\nexport const useMenuTypeahead = props => {\n  return {\n    onKeyDown(event) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n      if (event.key.length === 1 && !(event.ctrlKey || event.altKey || event.metaKey)) {\n        const container = event.currentTarget;\n        const values = Array.from(container.querySelectorAll(\"[\".concat(ITEM_ATTR, \"]\"))).map(getValue);\n        const searchKey = event.key;\n        const foundValue = values.find(value => value.toLowerCase().startsWith(searchKey));\n        const newItem = container.querySelector(\"[\".concat(ITEM_ATTR, \"=\\\"\").concat(foundValue, \"\\\"]\"));\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => newItem.focus());\n        }\n      }\n    }\n  };\n};","map":{"version":3,"mappings":"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","names":["useFocusManager","useId","Platform","useMenuTrigger","handleOpen","isOpen","menuTriggerId","event","includes","key","preventDefault","undefined","useMenu","focusManager","onKeyDown","e","focusNext","wrap","focusPrevious","accessibilityRole","useMenuItem","textValue","ref","dataSet","nativebaseMenuItem","onHoverIn","current","OS","focus","useMenuOptionItem","isChecked","type","accessibilityState","checked","accessibilityChecked","ITEM_ATTR","getValue","element","getAttribute","useMenuTypeahead","props","length","ctrlKey","altKey","metaKey","container","currentTarget","values","Array","from","querySelectorAll","map","searchKey","foundValue","find","value","toLowerCase","startsWith","newItem","querySelector","setTimeout"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\Menu\\useMenu.tsx"],"sourcesContent":["import { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-aria/utils';\nimport { AccessibilityRole, Platform } from 'react-native';\n\ntype IMenuTriggerProps = {\n  handleOpen: () => void;\n  isOpen: boolean;\n};\n\nexport const useMenuTrigger = ({ handleOpen, isOpen }: IMenuTriggerProps) => {\n  const menuTriggerId = useId();\n  return {\n    'onKeyDownCapture': (event: KeyboardEvent) => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId,\n  };\n};\n\nexport const useMenu = () => {\n  const focusManager = useFocusManager();\n  const onKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown': {\n        e.preventDefault();\n        focusManager.focusNext({ wrap: true });\n        break;\n      }\n      case 'ArrowUp': {\n        e.preventDefault();\n        focusManager.focusPrevious({ wrap: true });\n        break;\n      }\n    }\n  };\n\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu' as AccessibilityRole,\n  };\n};\n\nexport const useMenuItem = ({\n  textValue,\n  ref,\n}: {\n  textValue: string;\n  ref: any;\n}) => {\n  return {\n    accessibilityRole: 'menuitem' as AccessibilityRole,\n    dataSet: {\n      nativebaseMenuItem: textValue,\n    },\n    onHoverIn: () => {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    },\n  };\n};\n\nexport const useMenuOptionItem = ({\n  isChecked,\n  type,\n}: {\n  isChecked: boolean;\n  type: 'checkbox' | 'radio';\n}) => {\n  return {\n    accessibilityRole: ('menuitem' +\n      (Platform.OS === 'web' ? type : '')) as AccessibilityRole,\n    accessibilityState: {\n      checked: isChecked,\n    },\n    accessibilityChecked: isChecked,\n  };\n};\n\nconst ITEM_ATTR = 'data-nativebase-menu-item';\nconst getValue = (element: Element) => element.getAttribute(ITEM_ATTR) ?? '';\n\nexport const useMenuTypeahead = (props: any): any => {\n  return {\n    onKeyDown(event: KeyboardEvent) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (\n        event.key.length === 1 &&\n        !(event.ctrlKey || event.altKey || event.metaKey)\n      ) {\n        const container = event.currentTarget as HTMLElement;\n        const values = Array.from(\n          container.querySelectorAll(`[${ITEM_ATTR}]`)\n        ).map(getValue);\n\n        const searchKey = event.key;\n\n        const foundValue = values.find((value) =>\n          value.toLowerCase().startsWith(searchKey)\n        );\n        const newItem = container.querySelector(\n          `[${ITEM_ATTR}=\"${foundValue}\"]`\n        );\n\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => (newItem as HTMLElement).focus());\n        }\n      }\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}