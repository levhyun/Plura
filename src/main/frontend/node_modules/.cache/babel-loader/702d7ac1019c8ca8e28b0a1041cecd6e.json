{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport { Platform } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst ModalContent = (props, ref) => {\n  const resolvedProps = usePropsResolution('ModalContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n    visible\n  } = React.useContext(ModalContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (visible) {\n      if (initialFocusRef && initialFocusRef.current) {\n        //@ts-ignore\n        initialFocusRef.current.focus();\n      }\n    } else {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    }\n  }, [initialFocusRef, finalFocusRef, visible]); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Box, _extends({}, contentSize, resolvedProps, {\n    ref: ref,\n    onAccessibilityEscape: handleClose //@ts-ignore - web only\n    ,\n\n    \"aria-modal\": \"true\" //@ts-ignore - web only\n    ,\n\n    accessibilityRole: Platform.OS === 'web' ? 'dialog' : undefined,\n    accessibilityViewIsModal: true\n  }));\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(ModalContent));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP,MAA+B,sBAA/B;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAmBC,GAAnB,KAAiC;EACpD,MAAMC,aAAa,GAAGP,kBAAkB,CAAC,cAAD,EAAiBK,KAAjB,CAAxC;EACA,MAAM;IACJG,WADI;IAEJC,eAFI;IAGJC,aAHI;IAIJC,WAJI;IAKJC;EALI,IAMFhB,KAAK,CAACiB,UAAN,CAAiBZ,YAAjB,CANJ;EAOAL,KAAK,CAACkB,SAAN,CAAgB,MAAM;IACpB,MAAMC,WAAW,GAAGL,aAAa,GAAGA,aAAa,CAACM,OAAjB,GAA2B,IAA5D;IACA,IAAIJ,OAAJ,EAAa;MACX,IAAIH,eAAe,IAAIA,eAAe,CAACO,OAAvC,EAAgD;QAC9C;QACAP,eAAe,CAACO,OAAhB,CAAwBC,KAAxB;MACD;IACF,CALD,MAKO;MACL,IAAIF,WAAJ,EAAiB;QACf;QACAA,WAAW,CAACE,KAAZ;MACD;IACF;EACF,CAbD,EAaG,CAACR,eAAD,EAAkBC,aAAlB,EAAiCE,OAAjC,CAbH,EAToD,CAwBpD;;EACA,IAAIT,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,oBACET,oBAACG,GAAD,eACMS,WADN,EAEMD,aAFN;IAGED,GAAG,EAAEA,GAHP;IAIEY,qBAAqB,EAAEP,WAJzB,CAKE;IAAA;;IACA,cAAW,MANb,CAOE;IAAA;;IACAQ,iBAAiB,EAAEjB,QAAQ,CAACkB,EAAT,KAAgB,KAAhB,GAAwB,QAAxB,GAAmCC,SARxD;IASEC,wBAAwB;EAT1B,GADF;AAaD,CAzCD;AA2CA,4BAAezB,IAAI,eAACC,UAAU,CAACM,YAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","usePropsResolution","ModalContext","Platform","useHasResponsiveProps","ModalContent","props","ref","resolvedProps","contentSize","initialFocusRef","finalFocusRef","handleClose","visible","useContext","useEffect","finalRefVal","current","focus","onAccessibilityEscape","accessibilityRole","OS","undefined","accessibilityViewIsModal"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\Modal\\ModalContent.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport { Platform } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst ModalContent = (props: IBoxProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('ModalContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n    visible,\n  } = React.useContext(ModalContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (visible) {\n      if (initialFocusRef && initialFocusRef.current) {\n        //@ts-ignore\n        initialFocusRef.current.focus();\n      }\n    } else {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    }\n  }, [initialFocusRef, finalFocusRef, visible]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...resolvedProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole={Platform.OS === 'web' ? 'dialog' : undefined}\n      accessibilityViewIsModal\n    />\n  );\n};\n\nexport default memo(forwardRef(ModalContent));\n"]},"metadata":{},"sourceType":"module"}