{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { TextInput } from 'react-native';\nimport { useToken } from '../../../hooks';\nimport { useFormControl } from '../../composites/FormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs } from '../../../utils';\nimport { Stack } from '../Stack';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nconst StyledInput = makeStyledComponent(TextInput);\nconst Input = (_ref2, ref) => {\n  let {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    onKeyPress,\n    ...props\n  } = _ref2;\n  const inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID\n  });\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState, callback) => {\n    setIsFocused(focusState);\n    callback();\n  };\n  /**Converting into Hash Color Code */\n  //@ts-ignore\n\n  props.focusOutlineColor = useToken('colors', props.focusOutlineColor); //@ts-ignore\n\n  props.invalidOutlineColor = useToken('colors', props.invalidOutlineColor);\n  const _ref = React.useRef(null);\n  const {\n    isHovered\n  } = useHover({}, _ref);\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required\n  };\n  const {\n    ariaLabel,\n    accessibilityLabel,\n    type,\n    isFullWidth,\n    isDisabled,\n    isReadOnly,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    onFocus,\n    onBlur,\n    wrapperRef,\n    _stack,\n    _input,\n    ...resolvedProps\n  } = usePropsResolution('Input', {\n    ...inputThemeProps,\n    ...props\n  }, {\n    isDisabled: inputThemeProps.isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isInvalid: inputThemeProps.isInvalid,\n    isReadOnly: inputThemeProps.isReadOnly\n  });\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [...stylingProps.margin, ...stylingProps.border, ...stylingProps.layout, ...stylingProps.flexbox, ...stylingProps.position, ...stylingProps.background, 'shadow', 'opacity']);\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : 400,\n    fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : 'normal'\n  });\n  const resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  const resolvedSelectionColor = useToken('colors', selectionColor);\n  const resolvedUnderlineColorAndroid = useToken('colors', underlineColorAndroid); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Stack, _extends({}, _stack, layoutProps, {\n    ref: mergeRefs([_ref, wrapperRef]),\n    isFocused: isFocused\n  }), InputLeftElement || leftElement ? InputLeftElement || leftElement : null, /*#__PURE__*/React.createElement(StyledInput, _extends({}, inputProps, {\n    secureTextEntry: type === 'password',\n    accessible: true,\n    accessibilityLabel: ariaLabel || accessibilityLabel,\n    editable: isDisabled || isReadOnly ? false : true,\n    w: isFullWidth ? '100%' : undefined\n  }, nonLayoutProps, resolvedFontFamily, {\n    placeholderTextColor: resolvedPlaceholderTextColor,\n    selectionColor: resolvedSelectionColor,\n    underlineColorAndroid: resolvedUnderlineColorAndroid,\n    onKeyPress: e => {\n      e.persist();\n      onKeyPress && onKeyPress(e);\n    },\n    onFocus: e => {\n      handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n    },\n    onBlur: e => {\n      handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n    }\n  }, _input, {\n    ref: mergeRefs([ref, _ref, wrapperRef])\n  })), InputRightElement || rightElement ? InputRightElement || rightElement : null);\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Input));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","TextInput","useToken","useFormControl","useHasResponsiveProps","useHover","extractInObject","stylingProps","usePropsResolution","mergeRefs","Stack","makeStyledComponent","useResolvedFontFamily","StyledInput","Input","ref","isHovered","isHoveredProp","isFocused","isFocusedProp","onKeyPress","props","inputProps","isDisabled","isInvalid","isReadOnly","isRequired","nativeID","setIsFocused","useState","handleFocus","focusState","callback","focusOutlineColor","invalidOutlineColor","_ref","useRef","inputThemeProps","disabled","accessibilityInvalid","accessibilityReadOnly","required","ariaLabel","accessibilityLabel","type","isFullWidth","fontFamily","fontWeight","fontStyle","placeholderTextColor","selectionColor","underlineColorAndroid","InputLeftElement","InputRightElement","leftElement","rightElement","onFocus","onBlur","wrapperRef","_stack","_input","resolvedProps","layoutProps","nonLayoutProps","margin","border","layout","flexbox","position","background","resolvedFontFamily","resolvedPlaceholderTextColor","resolvedSelectionColor","resolvedUnderlineColorAndroid","secureTextEntry","accessible","editable","w","undefined","e","persist"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\primitives\\Input\\Input.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IInputProps } from './types';\nimport { TextInput } from 'react-native';\nimport { useToken } from '../../../hooks';\nimport { useFormControl } from '../../composites/FormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs } from '../../../utils';\nimport { Stack } from '../Stack';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\n\nconst StyledInput = makeStyledComponent(TextInput);\n\nconst Input = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    onKeyPress,\n    ...props\n  }: IInputProps,\n  ref: any\n) => {\n  const inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID,\n  });\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  /**Converting into Hash Color Code */\n  //@ts-ignore\n  props.focusOutlineColor = useToken('colors', props.focusOutlineColor);\n  //@ts-ignore\n  props.invalidOutlineColor = useToken('colors', props.invalidOutlineColor);\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const {\n    ariaLabel,\n    accessibilityLabel,\n    type,\n    isFullWidth,\n    isDisabled,\n    isReadOnly,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    onFocus,\n    onBlur,\n    wrapperRef,\n    _stack,\n    _input,\n\n    ...resolvedProps\n  } = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.border,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n    'shadow',\n    'opacity',\n  ]);\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? 400,\n    fontStyle: fontStyle ?? 'normal',\n  });\n  const resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  const resolvedSelectionColor = useToken('colors', selectionColor);\n  const resolvedUnderlineColorAndroid = useToken(\n    'colors',\n    underlineColorAndroid\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Stack\n      {..._stack}\n      {...layoutProps}\n      ref={mergeRefs([_ref, wrapperRef])}\n      isFocused={isFocused}\n    >\n      {InputLeftElement || leftElement ? InputLeftElement || leftElement : null}\n      <StyledInput\n        {...inputProps}\n        secureTextEntry={type === 'password'}\n        accessible\n        accessibilityLabel={ariaLabel || accessibilityLabel}\n        editable={isDisabled || isReadOnly ? false : true}\n        w={isFullWidth ? '100%' : undefined}\n        {...nonLayoutProps}\n        {...resolvedFontFamily}\n        placeholderTextColor={resolvedPlaceholderTextColor}\n        selectionColor={resolvedSelectionColor}\n        underlineColorAndroid={resolvedUnderlineColorAndroid}\n        onKeyPress={(e: any) => {\n          e.persist();\n          onKeyPress && onKeyPress(e);\n        }}\n        onFocus={(e: any) => {\n          handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n        }}\n        onBlur={(e: any) => {\n          handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n        }}\n        {..._input}\n        ref={mergeRefs([ref, _ref, wrapperRef])}\n      />\n      {InputRightElement || rightElement\n        ? InputRightElement || rightElement\n        : null}\n    </Stack>\n  );\n};\n\nexport default memo(forwardRef(Input));\n"]},"metadata":{},"sourceType":"module"}