{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport { useColorScheme } from 'react-native';\nexport const useColorMode = () => {\n  const {\n    colorMode: colorModeContext\n  } = React.useContext(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  const {\n    colorMode\n  } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  const systemColorMode = useColorScheme();\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n  const [colorMode, setRawMode] = useState(initialColorMode);\n  const setColorMode = React.useCallback(async val => {\n    if (colorModeManager) {\n      await colorModeManager.set(val);\n    }\n    setRawMode(val);\n  }, [colorModeManager]); // For initial setting initial color mode from storage\n\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]); // Set system color mode only when user has not passed a colorModeManager\n\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode,\n    setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  const {\n    colorMode: colorModeContext\n  } = React.useContext(HybridContext);\n  const toggleAccessibleColors = () => colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAMA,SAASC,aAAT,QAA8B,6BAA9B;AAEA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAO,MAAMC,YAAY,GAAG,MAA8B;EACxD,MAAM;IACJC,SAAS,EAAEC;EADP,IAIFP,KAAK,CAACQ,UAAN,CAAsCL,aAAtC,CAJJ;EAKA,IAAII,gBAAgB,KAAKE,SAAzB,EAAoC;IAClC,MAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;EACD;EACD,OAAOH,gBAAP;AACD,CAVM;AAYP,OAAO,SAASI,iBAAT,CAA2BC,KAA3B,EAAuCC,IAAvC,EAAkD;EACvD,MAAM;IAAEP;EAAF,IAAgBD,YAAY,EAAlC;EACA,OAAOC,SAAS,KAAK,MAAd,GAAuBO,IAAvB,GAA8BD,KAArC;AACD;AAED,OAAO,SAASE,cAAT,CACLC,gBADK,EAELC,kBAFK,EAGLC,gBAHK,EAIL;EACA,MAAMC,eAAe,GAAGd,cAAc,EAAtC;EAEA,IAAIY,kBAAJ,EAAwB;IACtBD,gBAAgB,GAAGG,eAAnB;EACD;EAED,MAAM,CAACZ,SAAD,EAAYa,UAAZ,IAA0BlB,QAAQ,CAAYc,gBAAZ,CAAxC;EACA,MAAMK,YAAY,GAAGpB,KAAK,CAACqB,WAAN,CACnB,MAAOC,GAAP,IAA0B;IACxB,IAAIL,gBAAJ,EAAsB;MACpB,MAAMA,gBAAgB,CAACM,GAAjB,CAAqBD,GAArB,CAAN;IACD;IACDH,UAAU,CAACG,GAAD,CAAV;EACD,CANkB,EAOnB,CAACL,gBAAD,CAPmB,CAArB,CARA,CAkBA;;EACAf,SAAS,CAAC,MAAM;IACd,IAAIe,gBAAJ,EAAsB;MACpB,CAAC,eAAeO,OAAf,GAAyB;QACxB,IAAIC,KAAK,GAAG,MAAMR,gBAAgB,CAACS,GAAjB,CAAqBX,gBAArB,CAAlB;QACA,IAAIU,KAAK,IAAIA,KAAK,KAAKnB,SAAvB,EAAkC;UAChCa,UAAU,CAACM,KAAD,CAAV;QACD;MACF,CALD;IAMD;EACF,CATQ,EASN,CAACnB,SAAD,EAAYS,gBAAZ,EAA8BE,gBAA9B,CATM,CAAT,CAnBA,CA8BA;;EACAf,SAAS,CAAC,MAAM;IACd,IAAI,CAACe,gBAAD,IAAqBD,kBAAzB,EAA6C;MAC3CG,UAAU,CAACD,eAAD,CAAV;IACD;EACF,CAJQ,EAIN,CAACA,eAAD,EAAkBD,gBAAlB,EAAoCD,kBAApC,EAAwDG,UAAxD,CAJM,CAAT;EAMA,OAAO;IAAEb,SAAF;IAAac;EAAb,CAAP;AACD;AAED,OAAO,SAASO,mBAAT,GAIL;EACA,MAAM;IACJrB,SAAS,EAAEC;EADP,IAIFP,KAAK,CAACQ,UAAN,CAAsCL,aAAtC,CAJJ;EAKA,MAAMyB,sBAAsB,GAAG,MAC7BrB,gBAAgB,CAACsB,mBAAjB,CAAqC,CAACtB,gBAAgB,CAACuB,gBAAvD,CADF;EAEA,OAAO,CACLvB,gBAAgB,CAACuB,gBADZ,EAELvB,gBAAgB,CAACsB,mBAFZ,EAGLD,sBAHK,CAAP;AAKD","names":["React","useState","useEffect","HybridContext","useColorScheme","useColorMode","colorMode","colorModeContext","useContext","undefined","Error","useColorModeValue","light","dark","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","setRawMode","setColorMode","useCallback","val","set","getMode","value","get","useAccessibleColors","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\core\\color-mode\\hooks.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { useColorScheme } from 'react-native';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}