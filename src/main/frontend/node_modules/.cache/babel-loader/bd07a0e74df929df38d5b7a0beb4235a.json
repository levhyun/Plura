{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Stack } from '../Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    children,\n    divider,\n    variant,\n    ...props\n  } = _ref;\n  const {\n    space,\n    direction,\n    size,\n    colorScheme,\n    isDisabled,\n    isAttached,\n    ...newProps\n  } = usePropsResolution('ButtonGroup', props);\n  const {\n    borderRadius\n  } = usePropsResolution('Button', props);\n  let computedChildren;\n  if (Array.isArray(children)) {\n    computedChildren = React.Children.map(children, (child, index) => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        key: \"button-group-child-\".concat(index),\n        variant,\n        size,\n        colorScheme,\n        isDisabled,\n        // when buttons are attached, remove rounded corners of all buttons except extreme buttons\n        ...(isAttached ? {\n          borderRadius: 0\n        } : {}),\n        ...(isAttached && index === 0 ? direction === 'column' ? {\n          borderTopRadius: borderRadius\n        } : {\n          borderLeftRadius: borderRadius\n        } : {}),\n        ...(isAttached && index === (children === null || children === void 0 ? void 0 : children.length) - 1 ? direction === 'column' ? {\n          borderBottomRadius: borderRadius\n        } : {\n          borderRightRadius: borderRadius\n        } : {}),\n        //when buttons are attached, remove double border from them, just keep borderRight in case for direction row and borderBottom in case of direction column for every component\n        ...(isAttached && index !== 0 ? direction === 'column' ? {\n          borderTopWidth: 0\n        } : {\n          borderLeftWidth: 0\n        } : {}),\n        ...child.props\n      });\n    });\n  } else {\n    computedChildren = React.Children.map(children, (child, index) => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        key: \"button-group-child-\".concat(index),\n        variant,\n        size,\n        colorScheme,\n        isDisabled,\n        ...child.props\n      });\n    });\n  } //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Stack, _extends({\n    divider: divider,\n    space: isAttached ? 0 : space,\n    direction: direction\n  }, newProps, {\n    ref: ref\n  }), computedChildren);\n}));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AAEA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,4BAAeJ,IAAI,eACjBC,UAAU,CACR,OAEEI,GAFF,KAGK;EAAA,IAFH;IAAEC,QAAF;IAAYC,OAAZ;IAAqBC,OAArB;IAA8B,GAAGC;EAAjC,CADF;EAIE,MAAM;IACJC,KADI;IAEJC,SAFI;IAIJC,IAJI;IAKJC,WALI;IAMJC,UANI;IAOJC,UAPI;IAQJ,GAAGC;EARC,IASFd,kBAAkB,CAAC,aAAD,EAAgBO,KAAhB,CATtB;EAWA,MAAM;IAAEQ;EAAF,IAAmBf,kBAAkB,CAAC,QAAD,EAAWO,KAAX,CAA3C;EACA,IAAIS,gBAAJ;EAEA,IAAIC,KAAK,CAACC,OAAN,CAAcd,QAAd,CAAJ,EAA6B;IAC3BY,gBAAgB,GAAGnB,KAAK,CAACsB,QAAN,CAAeC,GAAf,CACjBhB,QADiB,EAEjB,CAACiB,KAAD,EAAqBC,KAArB,KAAuC;MACrC,oBAAOzB,KAAK,CAAC0B,YAAN,CAAmBF,KAAnB,EAA0B;QAC/BG,GAAG,+BAAwBF,KAAxB,CAD4B;QAE/BhB,OAF+B;QAG/BI,IAH+B;QAI/BC,WAJ+B;QAK/BC,UAL+B;QAO/B;QACA,IAAIC,UAAU,GAAG;UAAEE,YAAY,EAAE;QAAhB,CAAH,GAAyB,EAAvC,CAR+B;QAS/B,IAAIF,UAAU,IAAIS,KAAK,KAAK,CAAxB,GACAb,SAAS,KAAK,QAAd,GACE;UAAEgB,eAAe,EAAEV;QAAnB,CADF,GAEE;UAAEW,gBAAgB,EAAEX;QAApB,CAHF,GAIA,EAJJ,CAT+B;QAc/B,IAAIF,UAAU,IAAIS,KAAK,KAAK,SAAQ,SAAR,YAAQ,WAAR,oBAAQ,CAAEK,MAAV,IAAmB,CAA3C,GACAlB,SAAS,KAAK,QAAd,GACE;UAAEmB,kBAAkB,EAAEb;QAAtB,CADF,GAEE;UAAEc,iBAAiB,EAAEd;QAArB,CAHF,GAIA,EAJJ,CAd+B;QAoB/B;QACA,IAAIF,UAAU,IAAIS,KAAK,KAAK,CAAxB,GACAb,SAAS,KAAK,QAAd,GACE;UAAEqB,cAAc,EAAE;QAAlB,CADF,GAEE;UAAEC,eAAe,EAAE;QAAnB,CAHF,GAIA,EAJJ,CArB+B;QA0B/B,GAAGV,KAAK,CAACd;MA1BsB,CAA1B,CAAP;IA4BD,CA/BgB,CAAnB;EAiCD,CAlCD,MAkCO;IACLS,gBAAgB,GAAGnB,KAAK,CAACsB,QAAN,CAAeC,GAAf,CACjBhB,QADiB,EAEjB,CAACiB,KAAD,EAAqBC,KAArB,KAAuC;MACrC,oBAAOzB,KAAK,CAAC0B,YAAN,CAAmBF,KAAnB,EAA0B;QAC/BG,GAAG,+BAAwBF,KAAxB,CAD4B;QAE/BhB,OAF+B;QAG/BI,IAH+B;QAI/BC,WAJ+B;QAK/BC,UAL+B;QAM/B,GAAGS,KAAK,CAACd;MANsB,CAA1B,CAAP;IAQD,CAXgB,CAAnB;EAaD,CA/DE,CAgEH;;EACA,IAAIL,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,oBACEV,oBAACI,KAAD;IACEI,OAAO,EAAEA,OADX;IAEEG,KAAK,EAAEK,UAAU,GAAG,CAAH,GAAOL,KAF1B;IAGEC,SAAS,EAAEA;EAHb,GAIMK,QAJN;IAKEX,GAAG,EAAEA;EALP,IAOGa,gBAPH,CADF;AAWD,CAnFO,CADO,CAAnB","names":["React","memo","forwardRef","usePropsResolution","Stack","useHasResponsiveProps","ref","children","divider","variant","props","space","direction","size","colorScheme","isDisabled","isAttached","newProps","borderRadius","computedChildren","Array","isArray","Children","map","child","index","cloneElement","key","borderTopRadius","borderLeftRadius","length","borderBottomRadius","borderRightRadius","borderTopWidth","borderLeftWidth"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\primitives\\Button\\ButtonGroup.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IButtonGroupProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Stack } from '../Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport default memo(\n  forwardRef(\n    (\n      { children, divider, variant, ...props }: IButtonGroupProps,\n      ref?: any\n    ) => {\n      const {\n        space,\n        direction,\n\n        size,\n        colorScheme,\n        isDisabled,\n        isAttached,\n        ...newProps\n      } = usePropsResolution('ButtonGroup', props);\n\n      const { borderRadius } = usePropsResolution('Button', props);\n      let computedChildren: JSX.Element | JSX.Element[];\n\n      if (Array.isArray(children)) {\n        computedChildren = React.Children.map(\n          children,\n          (child: JSX.Element, index: number) => {\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n\n              // when buttons are attached, remove rounded corners of all buttons except extreme buttons\n              ...(isAttached ? { borderRadius: 0 } : {}),\n              ...(isAttached && index === 0\n                ? direction === 'column'\n                  ? { borderTopRadius: borderRadius }\n                  : { borderLeftRadius: borderRadius }\n                : {}),\n              ...(isAttached && index === children?.length - 1\n                ? direction === 'column'\n                  ? { borderBottomRadius: borderRadius }\n                  : { borderRightRadius: borderRadius }\n                : {}),\n\n              //when buttons are attached, remove double border from them, just keep borderRight in case for direction row and borderBottom in case of direction column for every component\n              ...(isAttached && index !== 0\n                ? direction === 'column'\n                  ? { borderTopWidth: 0 }\n                  : { borderLeftWidth: 0 }\n                : {}),\n              ...child.props,\n            });\n          }\n        );\n      } else {\n        computedChildren = React.Children.map(\n          children,\n          (child: JSX.Element, index: number) => {\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n              ...child.props,\n            });\n          }\n        );\n      }\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n      return (\n        <Stack\n          divider={divider}\n          space={isAttached ? 0 : space}\n          direction={direction}\n          {...newProps}\n          ref={ref}\n        >\n          {computedChildren}\n        </Stack>\n      );\n    }\n  )\n);\n"]},"metadata":{},"sourceType":"module"}