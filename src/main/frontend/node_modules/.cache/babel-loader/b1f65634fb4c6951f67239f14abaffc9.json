{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { forwardRef } from 'react';\nimport { Animated } from 'react-native';\nconst transformStylesMap = {\n  translateY: true,\n  translateX: true,\n  scale: true,\n  scaleX: true,\n  scaleY: true,\n  rotate: true\n};\nconst defaultStyles = {\n  opacity: 1,\n  translateY: 0,\n  translateX: 0,\n  scale: 1,\n  scaleX: 1,\n  scaleY: 1,\n  rotate: '0deg'\n};\nconst getAnimatedStyles = animateValue => (initial, to) => {\n  const styles = {\n    transform: []\n  };\n  for (let key in initial) {\n    if (key === 'transition') {\n      continue;\n    }\n    if (key in transformStylesMap) {\n      var _styles$transform;\n      (_styles$transform = styles.transform) === null || _styles$transform === void 0 ? void 0 : _styles$transform.push({\n        [key]: animateValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [initial[key], to[key]]\n        })\n      });\n    } else {\n      styles[key] = animateValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [initial[key], to[key]]\n      });\n    }\n  }\n  return styles;\n};\nconst defaultTransitionConfig = {\n  type: 'timing',\n  useNativeDriver: true,\n  duration: 250,\n  delay: 0\n};\nexport const Transition = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    children,\n    onTransitionComplete,\n    visible = false,\n    initial,\n    animate,\n    exit,\n    style,\n    as,\n    ...rest\n  } = _ref;\n  const animateValue = React.useRef(new Animated.Value(0)).current;\n  const Component = React.useMemo(() => {\n    if (as) {\n      return Animated.createAnimatedComponent(as);\n    }\n    return Animated.View;\n  }, [as]);\n  const [animationState, setAnimationState] = React.useState('');\n  const prevVisible = React.useRef(visible);\n  React.useEffect(() => {\n    if (animationState === 'entering' || animationState === 'exiting') {\n      var _transition$type;\n      const entryTransition = {\n        ...defaultTransitionConfig,\n        ...(animate === null || animate === void 0 ? void 0 : animate.transition)\n      };\n      const exitTransition = {\n        ...defaultTransitionConfig,\n        ...(exit === null || exit === void 0 ? void 0 : exit.transition)\n      };\n      const startAnimation = animationState === 'entering' ? 1 : 0;\n      const transition = startAnimation ? entryTransition : exitTransition;\n      Animated.sequence([\n      // @ts-ignore - delay is present in defaultTransitionConfig\n      Animated.delay(transition.delay), Animated[(_transition$type = transition.type) !== null && _transition$type !== void 0 ? _transition$type : 'timing'](animateValue, {\n        toValue: startAnimation,\n        useNativeDriver: true,\n        ...transition\n      })]).start(() => {\n        if (animationState === 'entering') {\n          setAnimationState('entered');\n        } else if (animationState === 'exiting') {\n          setAnimationState('exited');\n        }\n      }); // });\n    }\n\n    if (animationState === 'exited') {\n      onTransitionComplete && onTransitionComplete('exited');\n    } else if (animationState === 'entered') {\n      onTransitionComplete && onTransitionComplete('entered');\n    } // if (animationState === 'entering') {\n    //   //\n    // }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animationState, onTransitionComplete]);\n  React.useEffect(() => {\n    // if (!visible) {\n    if (prevVisible.current !== visible && !visible) {\n      setAnimationState('exiting');\n    }\n    if (visible) {\n      setAnimationState('entering');\n    }\n    prevVisible.current = visible; // }\n  }, [visible]); // If exit animation is present and state is exiting, we replace 'initial' with 'exit' animation\n  //  const initialState = { ...defaultStyles, ...initial };\n\n  const initialState = animationState === 'exited' && exit ? {\n    ...defaultStyles,\n    ...exit\n  } : {\n    ...defaultStyles,\n    ...initial\n  }; // const initialState = { ...defaultStyles, ...initial };\n  // initial =\n  //   animationState === 'exited'\n  //     ? { ...defaultStyles, ...exit }\n  //     : { ...defaultStyles, ...initial };\n\n  const animateState = {\n    ...defaultStyles,\n    ...animate\n  }; // const [initialState, setInitialState] = React.useState({\n  //   ...defaultStyles,\n  //   ...initial,\n  // });\n  // console.log('Initial state ', initial);\n  // const [animateState] = React.useState({ ...defaultStyles, ...animate });\n\n  const styles = React.useMemo(() => {\n    // console.log('display state here', initial);\n    return [getAnimatedStyles(animateValue)(initialState, animateState), style];\n  }, [animateValue, initial, animate, style]);\n  return /*#__PURE__*/React.createElement(Component // pointerEvents=\"box-none\"\n  , _extends({\n    pointerEvents: !visible ? 'none' : 'box-none' // https://github.com/facebook/react-native/issues/23090#issuecomment-710803743\n    // needsOffscreenAlphaCompositing\n    // style={[styles]}\n    ,\n\n    style: [styles],\n    ref: ref\n  }, rest), children);\n});","map":{"version":3,"mappings":"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","names":["React","forwardRef","Animated","transformStylesMap","translateY","translateX","scale","scaleX","scaleY","rotate","defaultStyles","opacity","getAnimatedStyles","animateValue","initial","to","styles","transform","key","push","interpolate","inputRange","outputRange","defaultTransitionConfig","type","useNativeDriver","duration","delay","Transition","ref","children","onTransitionComplete","visible","animate","exit","style","as","rest","useRef","Value","current","Component","useMemo","createAnimatedComponent","View","animationState","setAnimationState","useState","prevVisible","useEffect","entryTransition","transition","exitTransition","startAnimation","sequence","toValue","start","initialState","animateState","_extends","pointerEvents"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\Transitions\\Transition.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { forwardRef } from 'react';\nimport { Animated } from 'react-native';\nimport type {\n  ISupportedTransitions,\n  ITransitionConfig,\n  ITransitionProps,\n} from './types';\n\nconst transformStylesMap = {\n  translateY: true,\n  translateX: true,\n  scale: true,\n  scaleX: true,\n  scaleY: true,\n  rotate: true,\n};\n\nconst defaultStyles = {\n  opacity: 1,\n  translateY: 0,\n  translateX: 0,\n  scale: 1,\n  scaleX: 1,\n  scaleY: 1,\n  rotate: '0deg',\n};\n\nconst getAnimatedStyles = (animateValue: any) => (\n  initial: ISupportedTransitions,\n  to: ISupportedTransitions\n) => {\n  const styles: any = {\n    transform: [],\n  };\n  for (let key in initial) {\n    if (key === 'transition') {\n      continue;\n    }\n\n    if (key in transformStylesMap) {\n      styles.transform?.push({\n        [key]: animateValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [(initial as any)[key], (to as any)[key]],\n        }),\n      } as any);\n    } else {\n      styles[key] = animateValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [(initial as any)[key], (to as any)[key]],\n      });\n    }\n  }\n\n  return styles;\n};\n\nconst defaultTransitionConfig: ITransitionConfig = {\n  type: 'timing',\n  useNativeDriver: true,\n  duration: 250,\n  delay: 0,\n};\n\nexport const Transition = forwardRef(\n  (\n    {\n      children,\n      onTransitionComplete,\n      visible = false,\n      initial,\n      animate,\n      exit,\n      style,\n      as,\n      ...rest\n    }: ITransitionProps,\n    ref: any\n  ) => {\n    const animateValue = React.useRef(new Animated.Value(0)).current;\n\n    const Component = React.useMemo(() => {\n      if (as) {\n        return Animated.createAnimatedComponent(as);\n      }\n      return Animated.View;\n    }, [as]);\n\n    const [animationState, setAnimationState] = React.useState('');\n\n    const prevVisible = React.useRef(visible);\n\n    React.useEffect(() => {\n      if (animationState === 'entering' || animationState === 'exiting') {\n        const entryTransition = {\n          ...defaultTransitionConfig,\n          ...animate?.transition,\n        };\n        const exitTransition = {\n          ...defaultTransitionConfig,\n          ...exit?.transition,\n        };\n\n        const startAnimation = animationState === 'entering' ? 1 : 0;\n\n        const transition = startAnimation ? entryTransition : exitTransition;\n\n        Animated.sequence([\n          // @ts-ignore - delay is present in defaultTransitionConfig\n          Animated.delay(transition.delay),\n          Animated[transition.type ?? 'timing'](animateValue, {\n            toValue: startAnimation,\n            useNativeDriver: true,\n            ...transition,\n          }),\n        ]).start(() => {\n          if (animationState === 'entering') {\n            setAnimationState('entered');\n          } else if (animationState === 'exiting') {\n            setAnimationState('exited');\n          }\n        });\n        // });\n      }\n\n      if (animationState === 'exited') {\n        onTransitionComplete && onTransitionComplete('exited');\n      } else if (animationState === 'entered') {\n        onTransitionComplete && onTransitionComplete('entered');\n      }\n      // if (animationState === 'entering') {\n      //   //\n      // }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [animationState, onTransitionComplete]);\n\n    React.useEffect(() => {\n      // if (!visible) {\n      if (prevVisible.current !== visible && !visible) {\n        setAnimationState('exiting');\n      }\n\n      if (visible) {\n        setAnimationState('entering');\n      }\n      prevVisible.current = visible;\n      // }\n    }, [visible]);\n\n    // If exit animation is present and state is exiting, we replace 'initial' with 'exit' animation\n\n    //  const initialState = { ...defaultStyles, ...initial };\n    const initialState =\n      animationState === 'exited' && exit\n        ? { ...defaultStyles, ...exit }\n        : { ...defaultStyles, ...initial };\n    // const initialState = { ...defaultStyles, ...initial };\n\n    // initial =\n    //   animationState === 'exited'\n    //     ? { ...defaultStyles, ...exit }\n    //     : { ...defaultStyles, ...initial };\n\n    const animateState = { ...defaultStyles, ...animate };\n\n    // const [initialState, setInitialState] = React.useState({\n    //   ...defaultStyles,\n    //   ...initial,\n    // });\n    // console.log('Initial state ', initial);\n\n    // const [animateState] = React.useState({ ...defaultStyles, ...animate });\n    const styles = React.useMemo(() => {\n      // console.log('display state here', initial);\n      return [\n        getAnimatedStyles(animateValue)(\n          initialState as ISupportedTransitions,\n          animateState as ISupportedTransitions\n        ),\n        style,\n      ];\n    }, [animateValue, initial, animate, style]);\n\n    return (\n      <Component\n        // pointerEvents=\"box-none\"\n        pointerEvents={!visible ? 'none' : 'box-none'}\n        // https://github.com/facebook/react-native/issues/23090#issuecomment-710803743\n        // needsOffscreenAlphaCompositing\n        // style={[styles]}\n        style={[styles]}\n        ref={ref}\n        {...rest}\n      >\n        {children}\n      </Component>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}