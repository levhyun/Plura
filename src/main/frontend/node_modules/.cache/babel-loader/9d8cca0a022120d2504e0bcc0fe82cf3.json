{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst AlertDialogContent = (props, ref) => {\n  const newProps = usePropsResolution('AlertDialogContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose\n  } = React.useContext(AlertDialogContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (initialFocusRef && initialFocusRef.current) {\n      //@ts-ignore\n      initialFocusRef.current.focus();\n    }\n    return () => {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Box, _extends({}, contentSize, newProps, {\n    ref: ref,\n    onAccessibilityEscape: handleClose //@ts-ignore - web only\n    ,\n\n    \"aria-modal\": \"true\" //@ts-ignore - web only\n    ,\n\n    accessibilityRole: \"alert\",\n    accessibilityViewIsModal: true\n  }));\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(AlertDialogContent));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP,MAA+B,sBAA/B;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,kBAAT,QAAmC,WAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAmBC,GAAnB,KAAiC;EAC1D,MAAMC,QAAQ,GAAGN,kBAAkB,CAAC,oBAAD,EAAuBI,KAAvB,CAAnC;EACA,MAAM;IACJG,WADI;IAEJC,eAFI;IAGJC,aAHI;IAIJC;EAJI,IAKFd,KAAK,CAACe,UAAN,CAAiBV,kBAAjB,CALJ;EAMAL,KAAK,CAACgB,SAAN,CAAgB,MAAM;IACpB,MAAMC,WAAW,GAAGJ,aAAa,GAAGA,aAAa,CAACK,OAAjB,GAA2B,IAA5D;IACA,IAAIN,eAAe,IAAIA,eAAe,CAACM,OAAvC,EAAgD;MAC9C;MACAN,eAAe,CAACM,OAAhB,CAAwBC,KAAxB;IACD;IAED,OAAO,MAAM;MACX,IAAIF,WAAJ,EAAiB;QACf;QACAA,WAAW,CAACE,KAAZ;MACD;IACF,CALD;EAMD,CAbD,EAaG,CAACP,eAAD,EAAkBC,aAAlB,CAbH,EAR0D,CAuB1D;;EACA,IAAIP,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,oBACER,oBAACG,GAAD,eACMQ,WADN,EAEMD,QAFN;IAGED,GAAG,EAAEA,GAHP;IAIEW,qBAAqB,EAAEN,WAJzB,CAKE;IAAA;;IACA,cAAW,MANb,CAOE;IAAA;;IACAO,iBAAiB,EAAC,OARpB;IASEC,wBAAwB;EAT1B,GADF;AAaD,CAxCD;AA0CA,4BAAerB,IAAI,eAACC,UAAU,CAACK,kBAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","usePropsResolution","AlertDialogContext","useHasResponsiveProps","AlertDialogContent","props","ref","newProps","contentSize","initialFocusRef","finalFocusRef","handleClose","useContext","useEffect","finalRefVal","current","focus","onAccessibilityEscape","accessibilityRole","accessibilityViewIsModal"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\AlertDialog\\AlertDialogContent.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialogContent = (props: IBoxProps, ref?: any) => {\n  const newProps = usePropsResolution('AlertDialogContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n  } = React.useContext(AlertDialogContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (initialFocusRef && initialFocusRef.current) {\n      //@ts-ignore\n      initialFocusRef.current.focus();\n    }\n\n    return () => {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...newProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole=\"alert\"\n      accessibilityViewIsModal\n    />\n  );\n};\n\nexport default memo(forwardRef(AlertDialogContent));\n"]},"metadata":{},"sourceType":"module"}