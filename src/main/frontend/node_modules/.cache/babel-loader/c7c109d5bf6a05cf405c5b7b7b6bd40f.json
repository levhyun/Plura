{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo, useContext } from 'react';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport MenuItem from './MenuItem';\nimport { MenuOptionContext } from './MenuOptionGroup';\nimport { useMenuOptionItem } from './useMenu';\nimport { HStack } from '../../primitives/Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst MenuItemOption = (_ref, ref) => {\n  let {\n    value,\n    ...props\n  } = _ref;\n  const {\n    values,\n    onChange,\n    type\n  } = useContext(MenuOptionContext);\n  const isChecked = values.includes(value);\n  const menuOptionProps = useMenuOptionItem({\n    isChecked,\n    type\n  });\n  const {\n    children,\n    onPress,\n    _icon,\n    _stack,\n    _text,\n    ...resolvedProps\n  } = usePropsResolution('MenuItem', props, {\n    isChecked\n  });\n  const modifiedOnPress = e => {\n    onChange(value);\n    onPress && onPress(e);\n  }; //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(MenuItem, _extends({}, resolvedProps, menuOptionProps, {\n    accessibilityRole: \"button\",\n    onPress: modifiedOnPress,\n    ref: ref\n  }), /*#__PURE__*/React.createElement(HStack, _stack, /*#__PURE__*/React.createElement(CheckIcon, _icon), /*#__PURE__*/React.createElement(Box, {\n    _text: _text\n  }, children)));\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(MenuItemOption));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,EAAkCC,UAAlC,QAAoD,OAApD;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,iBAAT,QAAkC,WAAlC;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,cAAc,GAAG,OAErBC,GAFqB,KAGlB;EAAA,IAFH;IAAEC,KAAF;IAAS,GAAGC;EAAZ,CADqB;EAIrB,MAAM;IAAEC,MAAF;IAAUC,QAAV;IAAoBC;EAApB,IAAsDf,UAAU,CACpEK,iBADoE,CAAtE;EAGA,MAAMW,SAAS,GAAGH,MAAM,CAACI,QAAP,CAAgBN,KAAhB,CAAlB;EACA,MAAMO,eAAe,GAAGZ,iBAAiB,CAAC;IAAEU,SAAF;IAAaD;EAAb,CAAD,CAAzC;EACA,MAAM;IACJI,QADI;IAEJC,OAFI;IAGJC,KAHI;IAIJC,MAJI;IAKJC,KALI;IAMJ,GAAGC;EANC,IAOFrB,kBAAkB,CAAC,UAAD,EAAaS,KAAb,EAAoB;IAAEI;EAAF,CAApB,CAPtB;EASA,MAAMS,eAAe,GAAIC,CAAD,IAAY;IAClCZ,QAAQ,CAACH,KAAD,CAAR;IACAS,OAAO,IAAIA,OAAO,CAACM,CAAD,CAAlB;EACD,CAHD,CAfG,CAoBH;;EACA,IAAIlB,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,oBACEf,oBAACO,QAAD,eACMoB,aADN,EAEMN,eAFN;IAGES,iBAAiB,EAAC,QAHpB;IAIEP,OAAO,EAAEK,eAJX;IAKEf,GAAG,EAAEA;EALP,iBAOEb,oBAACU,MAAD,EAAYe,MAAZ,eACEzB,oBAACI,SAAD,EAAeoB,KAAf,CADF,eAEExB,oBAACK,GAAD;IAAKqB,KAAK,EAAEA;EAAZ,GAAoBJ,QAApB,CAFF,CAPF,CADF;AAcD,CAzCD;AA2CA,4BAAepB,IAAI,eAACD,UAAU,CAACW,cAAD,CAAX,CAAnB","names":["React","forwardRef","memo","useContext","CheckIcon","Box","usePropsResolution","MenuItem","MenuOptionContext","useMenuOptionItem","HStack","useHasResponsiveProps","MenuItemOption","ref","value","props","values","onChange","type","isChecked","includes","menuOptionProps","children","onPress","_icon","_stack","_text","resolvedProps","modifiedOnPress","e","accessibilityRole"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\Menu\\MenuItemOption.tsx"],"sourcesContent":["import React, { forwardRef, memo, useContext } from 'react';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport MenuItem from './MenuItem';\nimport type { IMenuItemOptionProps, IMenuOptionContextProps } from './types';\nimport { MenuOptionContext } from './MenuOptionGroup';\nimport { useMenuOptionItem } from './useMenu';\nimport { HStack } from '../../primitives/Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItemOption = (\n  { value, ...props }: IMenuItemOptionProps,\n  ref: any\n) => {\n  const { values, onChange, type }: IMenuOptionContextProps = useContext(\n    MenuOptionContext\n  );\n  const isChecked = values.includes(value);\n  const menuOptionProps = useMenuOptionItem({ isChecked, type });\n  const {\n    children,\n    onPress,\n    _icon,\n    _stack,\n    _text,\n    ...resolvedProps\n  } = usePropsResolution('MenuItem', props, { isChecked });\n\n  const modifiedOnPress = (e: any) => {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuItem\n      {...resolvedProps}\n      {...menuOptionProps}\n      accessibilityRole=\"button\"\n      onPress={modifiedOnPress}\n      ref={ref}\n    >\n      <HStack {..._stack}>\n        <CheckIcon {..._icon} />\n        <Box _text={_text}>{children}</Box>\n      </HStack>\n    </MenuItem>\n  );\n};\n\nexport default memo(forwardRef(MenuItemOption));\n"]},"metadata":{},"sourceType":"module"}