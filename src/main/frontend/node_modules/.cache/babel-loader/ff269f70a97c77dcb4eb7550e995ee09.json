{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport PresenceTransition from './PresenceTransition';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/';\nconst ScaleFade = (_ref, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  const {\n    in: animationState,\n    duration,\n    initialScale,\n    ...resolvedProps\n  } = usePropsResolution('ScaleFade', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (duration) {\n    resolvedProps.animate.transition.duration = duration;\n    resolvedProps.exit.transition.duration = duration;\n  }\n  if (initialScale) {\n    resolvedProps.animate.initial.scale = initialScale;\n    resolvedProps.exit.initial.scale = initialScale;\n  }\n  return /*#__PURE__*/React.createElement(PresenceTransition, _extends({\n    visible: animationState\n  }, resolvedProps, {\n    ref: ref\n  }), children);\n};\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(ScaleFade));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AAEA,MAAMC,SAAS,GAAG,OAA0CC,GAA1C,KAAwD;EAAA,IAAvD;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAAD;EAChB,MAAM;IACJC,EAAE,EAAEC,cADA;IAEJC,QAFI;IAGJC,YAHI;IAIJ,GAAGC;EAJC,IAKFT,kBAAkB,CAAC,WAAD,EAAcI,KAAd,CALtB,CADwE,CAOxE;;EACA,IAAIL,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,IAAIG,QAAJ,EAAc;IACZE,aAAa,CAACC,OAAd,CAAsBC,UAAtB,CAAiCJ,QAAjC,GAA4CA,QAA5C;IACAE,aAAa,CAACG,IAAd,CAAmBD,UAAnB,CAA8BJ,QAA9B,GAAyCA,QAAzC;EACD;EACD,IAAIC,YAAJ,EAAkB;IAChBC,aAAa,CAACC,OAAd,CAAsBG,OAAtB,CAA8BC,KAA9B,GAAsCN,YAAtC;IACAC,aAAa,CAACG,IAAd,CAAmBC,OAAnB,CAA2BC,KAA3B,GAAmCN,YAAnC;EACD;EAED,oBACEX,oBAACC,kBAAD;IAAoBiB,OAAO,EAAET;EAA7B,GAAiDG,aAAjD;IAAgEP,GAAG,EAAEA;EAArE,IACGC,QADH,CADF;AAKD,CAzBD;AA2BA,4BAAeN,KAAK,CAACmB,IAAN,eAAWnB,KAAK,CAACoB,UAAN,CAAiBhB,SAAjB,CAAX,CAAf","names":["React","PresenceTransition","useHasResponsiveProps","usePropsResolution","ScaleFade","ref","children","props","in","animationState","duration","initialScale","resolvedProps","animate","transition","exit","initial","scale","visible","memo","forwardRef"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\Transitions\\ScaleFade.tsx"],"sourcesContent":["import React from 'react';\nimport type { IScaleFadeProps } from './types';\nimport PresenceTransition from './PresenceTransition';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/';\n\nconst ScaleFade = ({ children, ...props }: IScaleFadeProps, ref?: any) => {\n  const {\n    in: animationState,\n    duration,\n    initialScale,\n    ...resolvedProps\n  } = usePropsResolution('ScaleFade', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (duration) {\n    resolvedProps.animate.transition.duration = duration;\n    resolvedProps.exit.transition.duration = duration;\n  }\n  if (initialScale) {\n    resolvedProps.animate.initial.scale = initialScale;\n    resolvedProps.exit.initial.scale = initialScale;\n  }\n\n  return (\n    <PresenceTransition visible={animationState} {...resolvedProps} ref={ref}>\n      {children}\n    </PresenceTransition>\n  );\n};\n\nexport default React.memo(React.forwardRef(ScaleFade));\n"]},"metadata":{},"sourceType":"module"}