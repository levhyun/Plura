{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport { Popper } from '../Popper';\nimport { mergeRefs } from '../../../utils';\nimport { useControllableState } from '../../../hooks';\nimport { PopoverContext } from './PopoverContext';\nimport Box from '../../primitives/Box';\nimport Backdrop from '../Backdrop';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { PresenceTransition } from '../Transitions';\nimport { StyleSheet } from 'react-native';\nimport { useId } from '@react-aria/utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst Popover = (_ref, ref) => {\n  let {\n    onOpen,\n    trigger,\n    onClose,\n    isOpen: isOpenProp,\n    children,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    trapFocus = true,\n    ...props\n  } = _ref;\n  const triggerRef = React.useRef(null);\n  const mergedRef = mergeRefs([triggerRef]);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: value => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    }\n  });\n  const [bodyMounted, setBodyMounted] = React.useState(false);\n  const [headerMounted, setHeaderMounted] = React.useState(false);\n  const popoverContentId = \"\".concat(useId(), \"-content\");\n  const headerId = \"\".concat(popoverContentId, \"-header\");\n  const bodyId = \"\".concat(popoverContentId, \"-body\");\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n  const updatedTrigger = () => {\n    return trigger({\n      'ref': mergedRef,\n      'onPress': handleOpen,\n      'aria-expanded': isOpen ? true : false,\n      'aria-controls': isOpen ? popoverContentId : undefined,\n      'aria-haspopup': true\n    }, {\n      open: isOpen\n    });\n  };\n  const handleClose = () => {\n    setIsOpen(false);\n  }; //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref\n  }, updatedTrigger(), /*#__PURE__*/React.createElement(Overlay, {\n    isOpen: isOpen,\n    onRequestClose: handleClose,\n    useRNModalOnAndroid: true,\n    unmountOnExit: true\n  }, /*#__PURE__*/React.createElement(PresenceTransition, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1,\n      transition: {\n        duration: 150\n      }\n    },\n    exit: {\n      opacity: 0,\n      scale: 0.95,\n      transition: {\n        duration: 100\n      }\n    },\n    visible: isOpen,\n    style: StyleSheet.absoluteFill\n  }, /*#__PURE__*/React.createElement(Popper, _extends({\n    onClose: handleClose,\n    triggerRef: triggerRef\n  }, props), /*#__PURE__*/React.createElement(Backdrop, {\n    onPress: handleClose,\n    bg: \"transparent\"\n  }), /*#__PURE__*/React.createElement(PopoverContext.Provider, {\n    value: {\n      onClose: handleClose,\n      initialFocusRef,\n      finalFocusRef,\n      popoverContentId,\n      bodyId,\n      headerId,\n      headerMounted,\n      bodyMounted,\n      setBodyMounted,\n      setHeaderMounted,\n      isOpen\n    }\n  }, /*#__PURE__*/React.createElement(FocusScope, {\n    contain: trapFocus,\n    restoreFocus: true,\n    autoFocus: true\n  }, children))))));\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Popover));","map":{"version":3,"mappings":"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","names":["React","forwardRef","memo","Popper","mergeRefs","useControllableState","PopoverContext","Box","Backdrop","FocusScope","PresenceTransition","StyleSheet","useId","Overlay","useHasResponsiveProps","Popover","ref","onOpen","trigger","onClose","isOpen","isOpenProp","children","defaultIsOpen","initialFocusRef","finalFocusRef","trapFocus","props","triggerRef","useRef","mergedRef","setIsOpen","value","defaultValue","onChange","bodyMounted","setBodyMounted","useState","headerMounted","setHeaderMounted","popoverContentId","headerId","bodyId","handleOpen","useCallback","updatedTrigger","undefined","open","handleClose","onRequestClose","useRNModalOnAndroid","unmountOnExit","initial","opacity","animate","transition","duration","exit","scale","visible","style","absoluteFill","onPress","bg","Provider","contain","restoreFocus","autoFocus"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\Popover\\Popover.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Popper } from '../Popper';\nimport type { IPopoverProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useControllableState } from '../../../hooks';\nimport { PopoverContext } from './PopoverContext';\nimport Box from '../../primitives/Box';\nimport Backdrop from '../Backdrop';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { PresenceTransition } from '../Transitions';\nimport { StyleSheet } from 'react-native';\nimport { useId } from '@react-aria/utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Popover = (\n  {\n    onOpen,\n    trigger,\n    onClose,\n    isOpen: isOpenProp,\n    children,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    trapFocus = true,\n    ...props\n  }: IPopoverProps,\n  ref: any\n) => {\n  const triggerRef = React.useRef(null);\n  const mergedRef = mergeRefs([triggerRef]);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const [bodyMounted, setBodyMounted] = React.useState(false);\n  const [headerMounted, setHeaderMounted] = React.useState(false);\n\n  const popoverContentId = `${useId()}-content`;\n  const headerId = `${popoverContentId}-header`;\n  const bodyId = `${popoverContentId}-body`;\n\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const updatedTrigger = () => {\n    return trigger(\n      {\n        'ref': mergedRef,\n        'onPress': handleOpen,\n        'aria-expanded': isOpen ? true : false,\n        'aria-controls': isOpen ? popoverContentId : undefined,\n        'aria-haspopup': true,\n      },\n      { open: isOpen }\n    );\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box ref={ref}>\n      {updatedTrigger()}\n      <Overlay\n        isOpen={isOpen}\n        onRequestClose={handleClose}\n        useRNModalOnAndroid\n        unmountOnExit\n      >\n        <PresenceTransition\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1, transition: { duration: 150 } }}\n          exit={{ opacity: 0, scale: 0.95, transition: { duration: 100 } }}\n          visible={isOpen}\n          style={StyleSheet.absoluteFill}\n        >\n          <Popper onClose={handleClose} triggerRef={triggerRef} {...props}>\n            <Backdrop onPress={handleClose} bg=\"transparent\" />\n            <PopoverContext.Provider\n              value={{\n                onClose: handleClose,\n                initialFocusRef,\n                finalFocusRef,\n                popoverContentId,\n                bodyId,\n                headerId,\n                headerMounted,\n                bodyMounted,\n                setBodyMounted,\n                setHeaderMounted,\n                isOpen,\n              }}\n            >\n              <FocusScope contain={trapFocus} restoreFocus autoFocus>\n                {children}\n              </FocusScope>\n            </PopoverContext.Provider>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Popover));\n"]},"metadata":{},"sourceType":"module"}