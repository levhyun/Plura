{"ast":null,"code":"import { useMemo as $58Phs$useMemo, useEffect as $58Phs$useEffect } from \"react\";\nimport { useMultipleSelectionState as $58Phs$useMultipleSelectionState, SelectionManager as $58Phs$SelectionManager } from \"@react-stately/selection\";\nimport { useCollection as $58Phs$useCollection } from \"@react-stately/collections\";\nimport { useControlledState as $58Phs$useControlledState } from \"@react-stately/utils\";\nvar tmp = Symbol.iterator;\nclass $a02d57049d202695$export$d085fb9e920b5ca7 {\n  *[tmp]() {\n    yield* this.iterable;\n  }\n  get size() {\n    return this.keyMap.size;\n  }\n  getKeys() {\n    return this.keyMap.keys();\n  }\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n  getFirstKey() {\n    return this.firstKey;\n  }\n  getLastKey() {\n    return this.lastKey;\n  }\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n  constructor(nodes) {\n    this.keyMap = new Map();\n    this.iterable = nodes;\n    let visit = node => {\n      this.keyMap.set(node.key, node);\n      if (node.childNodes && node.type === 'section') for (let child of node.childNodes) visit(child);\n    };\n    for (let node2 of nodes) visit(node2);\n    let last;\n    let index = 0;\n    for (let [key, node1] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node1.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node1.prevKey = undefined;\n      }\n      if (node1.type === 'item') node1.index = index++;\n      last = node1;\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n    this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n  }\n}\nfunction $e72dd72e1c76a225$export$2f645645f7bca764(props) {\n  let {\n    filter: filter\n  } = props;\n  let selectionState = $58Phs$useMultipleSelectionState(props);\n  let disabledKeys = $58Phs$useMemo(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  let factory = nodes => filter ? new $a02d57049d202695$export$d085fb9e920b5ca7(filter(nodes)) : new $a02d57049d202695$export$d085fb9e920b5ca7(nodes);\n  let context = $58Phs$useMemo(() => ({\n    suppressTextValueWarning: props.suppressTextValueWarning\n  }), [props.suppressTextValueWarning]);\n  let collection = $58Phs$useCollection(props, factory, context, [filter]);\n  // Reset focused key if that item is deleted from the collection.\n  $58Phs$useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [collection, selectionState.focusedKey]);\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: new $58Phs$SelectionManager(collection, selectionState)\n  };\n}\nfunction $a0d645289fe9b86b$export$e7f05e985daf4b5f(props) {\n  var _defaultSelectedKey;\n  let [selectedKey, setSelectedKey] = $58Phs$useControlledState(props.selectedKey, (_defaultSelectedKey = props.defaultSelectedKey) !== null && _defaultSelectedKey !== void 0 ? _defaultSelectedKey : null, props.onSelectionChange);\n  let selectedKeys = $58Phs$useMemo(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager\n  } = $e72dd72e1c76a225$export$2f645645f7bca764({\n    ...props,\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    allowDuplicateSelectionEvents: true,\n    selectedKeys: selectedKeys,\n    onSelectionChange: keys => {\n      let key = keys.values().next().value;\n      // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n      if (key === selectedKey && props.onSelectionChange) props.onSelectionChange(key);\n      setSelectedKey(key);\n    }\n  });\n  let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    selectedKey: selectedKey,\n    setSelectedKey: setSelectedKey,\n    selectedItem: selectedItem\n  };\n}\nexport { $e72dd72e1c76a225$export$2f645645f7bca764 as useListState, $a0d645289fe9b86b$export$e7f05e985daf4b5f as useSingleSelectListState, $a02d57049d202695$export$d085fb9e920b5ca7 as ListCollection };","map":{"version":3,"mappings":";;;;UA+DIA,MAAM,CAACC,QAAQ;MAhDNC,yCAAc;WAgDJ;WACZ,IAAI,CAACC,QAAQ;EACtB;MAEIC,IAAI,GAAG;IACT,OAAO,IAAI,CAACC,MAAM,CAACD,IAAI;EACzB;EAEAE,OAAO,GAAG;IACR,OAAO,IAAI,CAACD,MAAM,CAACE,IAAI;EACzB;EAEAC,YAAY,CAACC,GAAQ,EAAE;IACrB,IAAIC,IAAI,GAAG,IAAI,CAACL,MAAM,CAACM,GAAG,CAACF,GAAG;IAC9B,OAAOC,IAAI,GAAGA,IAAI,CAACE,OAAO,GAAG,IAAI;EACnC;EAEAC,WAAW,CAACJ,GAAQ,EAAE;IACpB,IAAIC,IAAI,GAAG,IAAI,CAACL,MAAM,CAACM,GAAG,CAACF,GAAG;IAC9B,OAAOC,IAAI,GAAGA,IAAI,CAACI,OAAO,GAAG,IAAI;EACnC;EAEAC,WAAW,GAAG;IACZ,OAAO,IAAI,CAACC,QAAQ;EACtB;EAEAC,UAAU,GAAG;IACX,OAAO,IAAI,CAACC,OAAO;EACrB;EAEAC,OAAO,CAACV,GAAQ,EAAE;IAChB,OAAO,IAAI,CAACJ,MAAM,CAACM,GAAG,CAACF,GAAG;EAC5B;EAEAW,EAAE,CAACC,GAAW,EAAE;IACd,MAAMd,IAAI,GAAG,IAAI,IAAI,CAACD,OAAO,GAAG;IAChC,OAAO,IAAI,CAACa,OAAO,CAACZ,IAAI,CAACc,GAAG;EAC9B;cA/EYC,KAAwB,EAAE;IANjC,IAsFN,CArFSjB,MAAM,GAAsB,IAAIkB,GAAG;IAMzC,IAAI,CAACpB,QAAQ,GAAGmB,KAAK;IAErB,IAAIE,KAAK,GAAId,IAAa,IAAK;MAC7B,IAAI,CAACL,MAAM,CAACoB,GAAG,CAACf,IAAI,CAACD,GAAG,EAAEC,IAAI;MAE9B,IAAIA,IAAI,CAACgB,UAAU,IAAIhB,IAAI,CAACiB,IAAI,KAAK,SAAS,EAC5C,KAAK,IAAIC,KAAK,IAAIlB,IAAI,CAACgB,UAAU,EAC/BF,KAAK,CAACI,KAAK;IAGjB,CAAC;IAED,KAAK,IAAIC,KAAI,IAAIP,KAAK,EACpBE,KAAK,CAACK,KAAI;IAGZ,IAAIC,IAAI;IACR,IAAIC,KAAK,GAAG,CAAC;IACb,KAAK,IAAG,CAAEtB,GAAG,EAAEuB,KAAI,KAAK,IAAI,CAAC3B,MAAM,EAAE;MACnC,IAAIyB,IAAI,EAAE;QACRA,IAAI,CAAChB,OAAO,GAAGL,GAAG;QAClBuB,KAAI,CAACpB,OAAO,GAAGkB,IAAI,CAACrB,GAAG;MACzB,CAAC,MAAM;QACL,IAAI,CAACO,QAAQ,GAAGP,GAAG;QACnBuB,KAAI,CAACpB,OAAO,GAAGqB,SAAS;MAC1B;MAEA,IAAID,KAAI,CAACL,IAAI,KAAK,MAAM,EACtBK,KAAI,CAACD,KAAK,GAAGA,KAAK;MAGpBD,IAAI,GAAGE,KAAI;MAEX;MACA;MACAF,IAAI,CAAChB,OAAO,GAAGmB,SAAS;IAC1B;IAEA,IAAI,CAACf,OAAO,GAAGY,IAAI,aAAJA,IAAI,KAAJ,MAAS,GAAT,MAAS,GAATA,IAAI,CAAErB,GAAG;EAC1B;;SCrBcyB,yCAAY,CAAmBC,KAAmB,EAAiB;EACjF,IAAI;IAACC;EAAM,CAAC,GAAGD,KAAK;EAEpB,IAAIE,cAAc,GAAGC,gCAAyB,CAACH,KAAK;EACpD,IAAII,YAAY,GAAGC,cAAO,OACxBL,KAAK,CAACI,YAAY,GAAG,IAAIE,GAAG,CAACN,KAAK,CAACI,YAAY,IAAI,IAAIE,GAAG,IAC1D,CAACN,KAAK,CAACI,YAAY,CAAC;EAEtB,IAAIG,OAAO,GAAGpB,KAAK,IAAIc,MAAM,GAAG,IAAIlC,yCAAc,CAACkC,MAAM,CAACd,KAAK,KAAK,IAAIpB,yCAAc,CAACoB,KAAK;EAC5F,IAAIqB,OAAO,GAAGH,cAAO,QAAQ;IAACI,wBAAwB,EAAET,KAAK,CAACS;EAAwB,CAAC,GAAG,CAACT,KAAK,CAACS,wBAAwB,CAAC;EAE1H,IAAIC,UAAU,GAAGC,oBAAa,CAACX,KAAK,EAAEO,OAAO,EAAEC,OAAO,EAAE,CAACP,MAAM,CAAC;EAEhE;EACAW,gBAAS,OAAO;IACd,IAAIV,cAAc,CAACW,UAAU,IAAI,IAAI,KAAKH,UAAU,CAAC1B,OAAO,CAACkB,cAAc,CAACW,UAAU,GACpFX,cAAc,CAACY,aAAa,CAAC,IAAI;EAErC,CAAC,EAAE,CAACJ,UAAU,EAAER,cAAc,CAACW,UAAU,CAAC;EAE1C,OAAO;gBACLH,UAAU;kBACVN,YAAY;IACZW,gBAAgB,EAAE,IAAIC,uBAAgB,CAACN,UAAU,EAAER,cAAc;EACnE,CAAC;AACH;SCzBgBe,yCAAwB,CAAmBjB,KAA+B,EAA6B;MAC3CkB,mBAAwB;EAAlG,IAAG,CAAEC,WAAW,EAAEC,cAAc,IAAIC,yBAAkB,CAACrB,KAAK,CAACmB,WAAW,GAAED,mBAAwB,GAAxBlB,KAAK,CAACsB,kBAAkB,cAAxBJ,mBAAwB,cAAxBA,mBAAwB,GAAI,IAAI,EAAElB,KAAK,CAACuB,iBAAiB;EACnI,IAAIC,YAAY,GAAGnB,cAAO,OAAOc,WAAW,IAAI,IAAI,GAAG,CAACA,WAAW,CAAC,GAAG,EAAE,EAAE,CAACA,WAAW,CAAC;EACxF,IAAI;IAACT,sBAAU;IAAAN,cAAEA,YAAY;IAAAW,kBAAEA;EAAgB,CAAC,GAAGhB,yCAAY,CAAC;OAC3DC,KAAK;IACRyB,aAAa,EAAE,QAAQ;IACvBC,sBAAsB,EAAE,IAAI;IAC5BC,6BAA6B,EAAE,IAAI;kBACnCH,YAAY;IACZD,iBAAiB,EAAGnD,IAAc,IAAK;MACrC,IAAIE,GAAG,GAAGF,IAAI,CAACwD,MAAM,GAAGC,IAAI,GAAGC,KAAK;MAEpC;MACA;MACA,IAAIxD,GAAG,KAAK6C,WAAW,IAAInB,KAAK,CAACuB,iBAAiB,EAChDvB,KAAK,CAACuB,iBAAiB,CAACjD,GAAG;MAG7B8C,cAAc,CAAC9C,GAAG;IACpB;EACF,CAAC;EAED,IAAIyD,YAAY,GAAGZ,WAAW,IAAI,IAAI,GAClCT,UAAU,CAAC1B,OAAO,CAACmC,WAAW,IAC9B,IAAI;EAER,OAAO;gBACLT,UAAU;kBACVN,YAAY;sBACZW,gBAAgB;iBAChBI,WAAW;oBACXC,cAAc;kBACdW;EACF,CAAC;AACH","names":["Symbol","iterator","$a02d57049d202695$export$d085fb9e920b5ca7","iterable","size","keyMap","getKeys","keys","getKeyBefore","key","node","get","prevKey","getKeyAfter","nextKey","getFirstKey","firstKey","getLastKey","lastKey","getItem","at","idx","nodes","Map","visit","set","childNodes","type","child","node2","last","index","node1","undefined","$e72dd72e1c76a225$export$2f645645f7bca764","props","filter","selectionState","$58Phs$useMultipleSelectionState","disabledKeys","$58Phs$useMemo","Set","factory","context","suppressTextValueWarning","collection","$58Phs$useCollection","$58Phs$useEffect","focusedKey","setFocusedKey","selectionManager","$58Phs$SelectionManager","$a0d645289fe9b86b$export$e7f05e985daf4b5f","_defaultSelectedKey","selectedKey","setSelectedKey","$58Phs$useControlledState","defaultSelectedKey","onSelectionChange","selectedKeys","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","values","next","value","selectedItem"],"sources":["C:\\Users\\user\\node_modules\\@react-stately\\list\\dist\\packages\\@react-stately\\list\\src\\ListCollection.ts","C:\\Users\\user\\node_modules\\@react-stately\\list\\dist\\packages\\@react-stately\\list\\src\\useListState.ts","C:\\Users\\user\\node_modules\\@react-stately\\list\\dist\\packages\\@react-stately\\list\\src\\useSingleSelectListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class ListCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>) {\n    this.iterable = nodes;\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && node.type === 'section') {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo} from 'react';\nimport {ListCollection} from './ListCollection';\nimport {MultipleSelectionStateProps, SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface ListProps<T> extends CollectionBase<T>, MultipleSelectionStateProps {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface ListState<T> {\n  /** A collection of items in the list. */\n  collection: Collection<Node<T>>,\n\n  /** A set of items that are disabled. */\n  disabledKeys: Set<Key>,\n\n  /** A selection manager to read and update multiple selection state. */\n  selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for list-like components. Handles building a collection\n * of items from props, and manages multiple selection state.\n */\nexport function useListState<T extends object>(props: ListProps<T>): ListState<T>  {\n  let {filter} = props;\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let factory = nodes => filter ? new ListCollection(filter(nodes)) : new ListCollection(nodes as Iterable<Node<T>>);\n  let context = useMemo(() => ({suppressTextValueWarning: props.suppressTextValueWarning}), [props.suppressTextValueWarning]);\n\n  let collection = useCollection(props, factory, context, [filter]);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [collection, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, SingleSelection} from '@react-types/shared';\nimport {Key, useMemo} from 'react';\nimport {ListState, useListState} from './useListState';\nimport {Node} from '@react-types/shared';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface SingleSelectListProps<T> extends CollectionBase<T>, Omit<SingleSelection, 'disallowEmptySelection'> {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface SingleSelectListState<T> extends ListState<T> {\n  /** The key for the currently selected item. */\n  readonly selectedKey: Key,\n\n  /** Sets the selected key. */\n  setSelectedKey(key: Key): void,\n\n  /** The value of the currently selected item. */\n  readonly selectedItem: Node<T>\n}\n\n/**\n * Provides state management for list-like components with single selection.\n * Handles building a collection of items from props, and manages selection state.\n */\nexport function useSingleSelectListState<T extends object>(props: SingleSelectListProps<T>): SingleSelectListState<T>  {\n  let [selectedKey, setSelectedKey] = useControlledState(props.selectedKey, props.defaultSelectedKey ?? null, props.onSelectionChange);\n  let selectedKeys = useMemo(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {collection, disabledKeys, selectionManager} = useListState({\n    ...props,\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    allowDuplicateSelectionEvents: true,\n    selectedKeys,\n    onSelectionChange: (keys: Set<Key>) => {\n      let key = keys.values().next().value;\n\n      // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n      if (key === selectedKey && props.onSelectionChange) {\n        props.onSelectionChange(key);\n      }\n\n      setSelectedKey(key);\n    }\n  });\n\n  let selectedItem = selectedKey != null\n    ? collection.getItem(selectedKey)\n    : null;\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    selectedItem\n  };\n}\n"]},"metadata":{},"sourceType":"module"}