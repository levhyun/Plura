{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport isNil from 'lodash.isnil';\nimport React from 'react';\nimport Flex from '../../primitives/Flex';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst Wrap = (_ref, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  const {\n    space,\n    ...newProps\n  } = useThemeProps('Wrap', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Flex, _extends({\n    wrap: \"wrap\"\n  }, newProps, {\n    ref: ref\n  }), isNil(space) ? children : React.Children.map(children, child => {\n    return /*#__PURE__*/React.cloneElement(child, {\n      ...props,\n      style: {\n        margin: space\n      }\n    }, child.props.children);\n  }));\n};\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Wrap));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,cAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AAEA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,IAAI,GAAG,OAAqCC,GAArC,KAAmD;EAAA,IAAlD;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAAD;EACX,MAAM;IAAEC,KAAF;IAAS,GAAGC;EAAZ,IAAyBP,aAAa,CAAC,MAAD,EAASK,KAAT,CAA5C,CAD8D,CAG9D;;EACA,IAAIJ,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,oBACEP,oBAACC,IAAD;IAAMS,IAAI,EAAC;EAAX,GAAsBD,QAAtB;IAAgCJ,GAAG,EAAEA;EAArC,IACGN,KAAK,CAACS,KAAD,CAAL,GACGF,QADH,GAEGN,KAAK,CAACW,QAAN,CAAeC,GAAf,CAAmBN,QAAnB,EAA8BO,KAAD,IAAgB;IAC3C,oBAAOb,KAAK,CAACc,YAAN,CACLD,KADK,EAEL;MAAE,GAAGN,KAAL;MAAYQ,KAAK,EAAE;QAAEC,MAAM,EAAER;MAAV;IAAnB,CAFK,EAGLK,KAAK,CAACN,KAAN,CAAYD,QAHP,CAAP;EAKD,CAND,CAHN,CADF;AAaD,CArBD;AAuBA,4BAAeN,KAAK,CAACiB,IAAN,eAAWjB,KAAK,CAACkB,UAAN,CAAiBd,IAAjB,CAAX,CAAf","names":["isNil","React","Flex","useThemeProps","useHasResponsiveProps","Wrap","ref","children","props","space","newProps","wrap","Children","map","child","cloneElement","style","margin","memo","forwardRef"],"sources":["C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\native-base\\lib\\module\\components\\composites\\Wrap\\index.tsx"],"sourcesContent":["import isNil from 'lodash.isnil';\nimport React from 'react';\nimport Flex from '../../primitives/Flex';\nimport type { IWrapProps } from './types';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Wrap = ({ children, ...props }: IWrapProps, ref?: any) => {\n  const { space, ...newProps } = useThemeProps('Wrap', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Flex wrap=\"wrap\" {...newProps} ref={ref}>\n      {isNil(space)\n        ? children\n        : React.Children.map(children, (child: any) => {\n            return React.cloneElement(\n              child,\n              { ...props, style: { margin: space } },\n              child.props.children\n            );\n          })}\n    </Flex>\n  );\n};\n\nexport default React.memo(React.forwardRef(Wrap));\nexport type { IWrapProps };\n"]},"metadata":{},"sourceType":"module"}