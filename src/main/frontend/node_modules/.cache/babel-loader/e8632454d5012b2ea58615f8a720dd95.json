{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport { keyboardDismissHandlerManager } from '../../hooks';\nconst HybridProvider = _ref => {\n  let {\n    children,\n    options: {\n      initialColorMode = 'light',\n      accessibleColors: isTextColorAccessible = false,\n      useSystemColorMode\n    },\n    colorModeManager\n  } = _ref;\n  // Color-mode content\n  const {\n    colorMode,\n    setColorMode\n  } = useModeManager(initialColorMode, useSystemColorMode, colorModeManager);\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]); // Accessible color hook\n\n  const [accessibleColors, setAccessibleColors] = React.useState(isTextColorAccessible);\n  const contextValue = useMemo(() => {\n    return {\n      colorMode: {\n        colorMode,\n        toggleColorMode,\n        setColorMode,\n        accessibleColors,\n        setAccessibleColors\n      }\n    };\n  }, [colorMode, toggleColorMode, setColorMode, accessibleColors, setAccessibleColors]);\n  React.useEffect(() => {\n    let escapeKeyListener = null;\n    if (Platform.OS === 'web') {\n      escapeKeyListener = e => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(HybridContext.Provider, {\n    value: contextValue\n  }, children);\n};\nexport default HybridProvider;","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAEA,SAASC,6BAAT,QAA8C,aAA9C;AAEA,MAAMC,cAAc,GAAG,QAQQ;EAAA,IARP;IACtBC,QADsB;IAEtBC,OAAO,EAAE;MACPC,gBAAgB,GAAG,OADZ;MAEPC,gBAAgB,EAAEC,qBAAqB,GAAG,KAFnC;MAGPC;IAHO,CAFa;IAOtBC;EAPsB,CAAD;EASrB;EACA,MAAM;IAAEC,SAAF;IAAaC;EAAb,IAA8BX,cAAc,CAChDK,gBADgD,EAEhDG,kBAFgD,EAGhDC,gBAHgD,CAAlD;EAMA,MAAMG,eAAe,GAAGhB,KAAK,CAACiB,WAAN,CAAkB,MAAM;IAC9CF,YAAY,CAACD,SAAS,KAAK,OAAd,GAAwB,MAAxB,GAAiC,OAAlC,CAAZ;EACD,CAFuB,EAErB,CAACA,SAAD,EAAYC,YAAZ,CAFqB,CAAxB,CAR6B,CAY7B;;EACA,MAAM,CAACL,gBAAD,EAAmBQ,mBAAnB,IAA0ClB,KAAK,CAACmB,QAAN,CAC9CR,qBAD8C,CAAhD;EAIA,MAAMS,YAAY,GAAGnB,OAAO,CAAC,MAAM;IACjC,OAAO;MACLa,SAAS,EAAE;QACTA,SADS;QAETE,eAFS;QAGTD,YAHS;QAITL,gBAJS;QAKTQ;MALS;IADN,CAAP;EASD,CAV2B,EAUzB,CACDJ,SADC,EAEDE,eAFC,EAGDD,YAHC,EAIDL,gBAJC,EAKDQ,mBALC,CAVyB,CAA5B;EAkBAlB,KAAK,CAACqB,SAAN,CAAgB,MAAM;IACpB,IAAIC,iBAAsB,GAAG,IAA7B;IAEA,IAAIpB,QAAQ,CAACqB,EAAT,KAAgB,KAApB,EAA2B;MACzBD,iBAAiB,GAAIE,CAAD,IAAsB;QACxC,IAAIA,CAAC,CAACC,GAAF,KAAU,QAAd,EAAwB;UACtB,IAAIpB,6BAA6B,CAACqB,MAA9B,KAAyC,CAA7C,EAAgD;YAC9C,MAAMC,WAAgB,GAAGtB,6BAA6B,CAACuB,GAA9B,EAAzB;YACAD,WAAW;UACZ;QACF;MACF,CAPD;MAQAE,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCR,iBAArC;IACD;IAED,OAAO,MAAM;MACX,IAAIpB,QAAQ,CAACqB,EAAT,KAAgB,KAApB,EAA2B;QACzBM,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCT,iBAAxC;MACD;IACF,CAJD;EAKD,CApBD,EAoBG,EApBH;EAsBA,oBACEtB,oBAACG,aAAD,CAAe6B,QAAf;IAAwBC,KAAK,EAAEb;EAA/B,GACGb,QADH,CADF;AAKD,CAtED;AAwEA,eAAeD,cAAf","names":["React","useMemo","Platform","HybridContext","useModeManager","keyboardDismissHandlerManager","HybridProvider","children","options","initialColorMode","accessibleColors","isTextColorAccessible","useSystemColorMode","colorModeManager","colorMode","setColorMode","toggleColorMode","useCallback","setAccessibleColors","useState","contextValue","useEffect","escapeKeyListener","OS","e","key","length","lastHandler","pop","document","addEventListener","removeEventListener","Provider","value"],"sources":["C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\native-base\\lib\\module\\core\\hybrid-overlay\\HybridProvider.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport type { IColorModeProviderProps } from './../color-mode';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n    useSystemColorMode,\n  },\n  colorModeManager,\n}: IColorModeProviderProps) => {\n  // Color-mode content\n  const { colorMode, setColorMode } = useModeManager(\n    initialColorMode,\n    useSystemColorMode,\n    colorModeManager\n  );\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  // Accessible color hook\n  const [accessibleColors, setAccessibleColors] = React.useState<boolean>(\n    isTextColorAccessible\n  );\n\n  const contextValue = useMemo(() => {\n    return {\n      colorMode: {\n        colorMode,\n        toggleColorMode,\n        setColorMode,\n        accessibleColors,\n        setAccessibleColors,\n      },\n    };\n  }, [\n    colorMode,\n    toggleColorMode,\n    setColorMode,\n    accessibleColors,\n    setAccessibleColors,\n  ]);\n\n  React.useEffect(() => {\n    let escapeKeyListener: any = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler: any = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return (\n    <HybridContext.Provider value={contextValue}>\n      {children}\n    </HybridContext.Provider>\n  );\n};\n\nexport default HybridProvider;\n"]},"metadata":{},"sourceType":"module"}