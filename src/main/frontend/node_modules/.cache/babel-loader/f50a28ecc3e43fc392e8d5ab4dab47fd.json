{"ast":null,"code":"import { clamp, focusWithoutScrolling, mergeProps, useGlobalListeners } from '@react-aria/utils';\nimport { getSliderThumbId, sliderIds } from './utils';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { useFocusable } from '@react-aria/focus';\nimport { useLabel } from '@react-aria/label';\nimport { useMove } from './useMove';\nimport { isRTL } from '@react-native-aria/utils';\n\n/**\n * Provides behavior and accessibility for a thumb of a slider component.\n *\n * @param opts Options for this Slider thumb.\n * @param state Slider state, created via `useSliderState`.\n */\nexport function useSliderThumb(opts, state) {\n  var _opts$ariaLabelledby;\n  let {\n    index,\n    isRequired,\n    isDisabled,\n    validationState,\n    trackLayout,\n    inputRef\n  } = opts;\n  let isVertical = opts.orientation === 'vertical';\n  let direction = isRTL() ? 'rtl' : undefined;\n  let {\n    addGlobalListener,\n    removeGlobalListener\n  } = useGlobalListeners();\n  let labelId = sliderIds.get(state);\n  const {\n    labelProps,\n    fieldProps\n  } = useLabel({\n    ...opts,\n    'id': getSliderThumbId(state, index),\n    'aria-labelledby': `${labelId} ${(_opts$ariaLabelledby = opts['aria-labelledby']) !== null && _opts$ariaLabelledby !== void 0 ? _opts$ariaLabelledby : ''}`.trim()\n  });\n  const value = state.values[index];\n  const focusInput = useCallback(() => {\n    if (inputRef.current) {\n      focusWithoutScrolling(inputRef.current);\n    }\n  }, [inputRef]);\n  const isFocused = state.focusedThumb === index;\n  useEffect(() => {\n    if (isFocused) {\n      focusInput();\n    }\n  }, [isFocused, focusInput]);\n  const stateRef = useRef(null);\n  stateRef.current = state;\n  let reverseX = direction === 'rtl';\n  let currentPosition = useRef(null);\n  let {\n    moveProps\n  } = useMove({\n    onMoveStart() {\n      currentPosition.current = null;\n      state.setThumbDragging(index, true);\n    },\n    onMove(_ref) {\n      let {\n        deltaX,\n        deltaY,\n        pointerType\n      } = _ref;\n      let size = isVertical ? trackLayout.height : trackLayout.width;\n      if (currentPosition.current == null) {\n        currentPosition.current = stateRef.current.getThumbPercent(index) * size;\n      }\n      if (pointerType === 'keyboard') {\n        // (invert left/right according to language direction) + (according to vertical)\n        let delta = ((reverseX ? -deltaX : deltaX) + (isVertical ? -deltaY : -deltaY)) * stateRef.current.step;\n        currentPosition.current += delta * size;\n        stateRef.current.setThumbValue(index, stateRef.current.getThumbValue(index) + delta);\n      } else {\n        let delta = isVertical ? deltaY : deltaX;\n        if (isVertical || reverseX) {\n          delta = -delta;\n        }\n        currentPosition.current += delta;\n        stateRef.current.setThumbPercent(index, clamp(currentPosition.current / size, 0, 1));\n      }\n    },\n    onMoveEnd() {\n      state.setThumbDragging(index, false);\n    }\n  }); // Immediately register editability with the state\n\n  state.setThumbEditable(index, !isDisabled);\n  const {\n    focusableProps\n  } = useFocusable(mergeProps(opts, {\n    onFocus: () => state.setFocusedThumb(index),\n    onBlur: () => state.setFocusedThumb(undefined)\n  }), inputRef);\n  let currentPointer = useRef(undefined);\n  let onDown = id => {\n    focusInput();\n    currentPointer.current = id;\n    state.setThumbDragging(index, true);\n    addGlobalListener(window, 'mouseup', onUp, false);\n    addGlobalListener(window, 'touchend', onUp, false);\n    addGlobalListener(window, 'pointerup', onUp, false);\n  };\n  let onUp = e => {\n    var _e$pointerId, _e$changedTouches;\n    let id = (_e$pointerId = e.pointerId) !== null && _e$pointerId !== void 0 ? _e$pointerId : (_e$changedTouches = e.changedTouches) === null || _e$changedTouches === void 0 ? void 0 : _e$changedTouches[0].identifier;\n    if (id === currentPointer.current) {\n      focusInput();\n      state.setThumbDragging(index, false);\n      removeGlobalListener(window, 'mouseup', onUp, false);\n      removeGlobalListener(window, 'touchend', onUp, false);\n      removeGlobalListener(window, 'pointerup', onUp, false);\n    }\n  }; // We install mouse handlers for the drag motion on the thumb div, but\n  // not the key handler for moving the thumb with the slider.  Instead,\n  // we focus the range input, and let the browser handle the keyboard\n  // interactions; we then listen to input's onChange to update state.\n\n  return {\n    inputProps: mergeProps(focusableProps, fieldProps, {\n      'type': 'range',\n      'tabIndex': !isDisabled ? 0 : undefined,\n      'min': state.getThumbMinValue(index),\n      'max': state.getThumbMaxValue(index),\n      'step': state.step,\n      'value': value,\n      'disabled': isDisabled,\n      'aria-orientation': opts.orientation,\n      'aria-valuetext': state.getThumbValueLabel(index),\n      'aria-required': isRequired || undefined,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': opts['aria-errormessage'],\n      'onChange': e => {\n        state.setThumbValue(index, parseFloat(e.target.value));\n      }\n    }),\n    thumbProps: !isDisabled ? mergeProps(moveProps, {\n      onMouseDown: e => {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n          return;\n        }\n        onDown();\n      },\n      onPointerDown: e => {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n          return;\n        }\n        onDown(e.pointerId);\n      },\n      onTouchStart: e => {\n        onDown(e.changedTouches[0].identifier);\n      }\n    }) : {},\n    labelProps\n  };\n}","map":{"version":3,"mappings":"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","names":["clamp","focusWithoutScrolling","mergeProps","useGlobalListeners","getSliderThumbId","sliderIds","useCallback","useEffect","useRef","useFocusable","useLabel","useMove","isRTL","useSliderThumb","opts","state","index","isRequired","isDisabled","validationState","trackLayout","inputRef","isVertical","orientation","direction","undefined","addGlobalListener","removeGlobalListener","labelId","get","labelProps","fieldProps","trim","value","values","focusInput","current","isFocused","focusedThumb","stateRef","reverseX","currentPosition","moveProps","onMoveStart","setThumbDragging","onMove","deltaX","deltaY","pointerType","size","height","width","getThumbPercent","delta","step","setThumbValue","getThumbValue","setThumbPercent","onMoveEnd","setThumbEditable","focusableProps","onFocus","setFocusedThumb","onBlur","currentPointer","onDown","id","window","onUp","e","pointerId","changedTouches","_e$changedTouches","identifier","inputProps","getThumbMinValue","getThumbMaxValue","getThumbValueLabel","parseFloat","target","thumbProps","onMouseDown","button","altKey","ctrlKey","metaKey","onPointerDown","onTouchStart"],"sources":["C:\\Users\\user\\node_modules\\@react-native-aria\\slider\\lib\\module\\useSliderThumb.web.ts"],"sourcesContent":["import { AriaSliderThumbProps } from '@react-types/slider';\nimport {\n  clamp,\n  focusWithoutScrolling,\n  mergeProps,\n  useGlobalListeners,\n} from '@react-aria/utils';\nimport { getSliderThumbId, sliderIds } from './utils';\nimport React, {\n  ChangeEvent,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  LabelHTMLAttributes,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport { SliderState } from '@react-stately/slider';\nimport { useFocusable } from '@react-aria/focus';\nimport { useLabel } from '@react-aria/label';\nimport { useMove } from './useMove';\nimport { isRTL } from '@react-native-aria/utils';\n\ninterface SliderThumbAria {\n  /** Props for the root thumb element; handles the dragging motion. */\n  thumbProps: HTMLAttributes<HTMLElement>;\n\n  /** Props for the visually hidden range input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>;\n\n  /** Props for the label element for this thumb (optional). */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>;\n}\n\ninterface SliderThumbOptions extends AriaSliderThumbProps {\n  /** A ref to the track element. */\n  trackLayout: any;\n  /** A ref to the thumb input element. */\n  inputRef: RefObject<HTMLInputElement>;\n}\n\n/**\n * Provides behavior and accessibility for a thumb of a slider component.\n *\n * @param opts Options for this Slider thumb.\n * @param state Slider state, created via `useSliderState`.\n */\nexport function useSliderThumb(\n  opts: SliderThumbOptions,\n  state: SliderState\n): SliderThumbAria {\n  let {\n    index,\n    isRequired,\n    isDisabled,\n    validationState,\n    trackLayout,\n    inputRef,\n  } = opts;\n\n  let isVertical = opts.orientation === 'vertical';\n\n  let direction = isRTL() ? 'rtl' : undefined;\n  let { addGlobalListener, removeGlobalListener } = useGlobalListeners();\n\n  let labelId = sliderIds.get(state);\n  const { labelProps, fieldProps } = useLabel({\n    ...opts,\n    'id': getSliderThumbId(state, index),\n    'aria-labelledby': `${labelId} ${opts['aria-labelledby'] ?? ''}`.trim(),\n  });\n\n  const value = state.values[index];\n\n  const focusInput = useCallback(() => {\n    if (inputRef.current) {\n      focusWithoutScrolling(inputRef.current);\n    }\n  }, [inputRef]);\n\n  const isFocused = state.focusedThumb === index;\n\n  useEffect(() => {\n    if (isFocused) {\n      focusInput();\n    }\n  }, [isFocused, focusInput]);\n\n  const stateRef = useRef<SliderState>(null);\n  stateRef.current = state;\n  let reverseX = direction === 'rtl';\n  let currentPosition = useRef<number>(null);\n  let { moveProps } = useMove({\n    onMoveStart() {\n      currentPosition.current = null;\n      state.setThumbDragging(index, true);\n    },\n    onMove({ deltaX, deltaY, pointerType }) {\n      let size = isVertical ? trackLayout.height : trackLayout.width;\n\n      if (currentPosition.current == null) {\n        currentPosition.current =\n          stateRef.current.getThumbPercent(index) * size;\n      }\n      if (pointerType === 'keyboard') {\n        // (invert left/right according to language direction) + (according to vertical)\n        let delta =\n          ((reverseX ? -deltaX : deltaX) + (isVertical ? -deltaY : -deltaY)) *\n          stateRef.current.step;\n        currentPosition.current += delta * size;\n        stateRef.current.setThumbValue(\n          index,\n          stateRef.current.getThumbValue(index) + delta\n        );\n      } else {\n        let delta = isVertical ? deltaY : deltaX;\n        if (isVertical || reverseX) {\n          delta = -delta;\n        }\n        currentPosition.current += delta;\n        stateRef.current.setThumbPercent(\n          index,\n          clamp(currentPosition.current / size, 0, 1)\n        );\n      }\n    },\n    onMoveEnd() {\n      state.setThumbDragging(index, false);\n    },\n  });\n\n  // Immediately register editability with the state\n  state.setThumbEditable(index, !isDisabled);\n\n  const { focusableProps } = useFocusable(\n    mergeProps(opts, {\n      onFocus: () => state.setFocusedThumb(index),\n      onBlur: () => state.setFocusedThumb(undefined),\n    }),\n    inputRef\n  );\n\n  let currentPointer = useRef<number | undefined>(undefined);\n  let onDown = (id?: number) => {\n    focusInput();\n    currentPointer.current = id;\n    state.setThumbDragging(index, true);\n\n    addGlobalListener(window, 'mouseup', onUp, false);\n    addGlobalListener(window, 'touchend', onUp, false);\n    addGlobalListener(window, 'pointerup', onUp, false);\n  };\n\n  let onUp = (e) => {\n    let id = e.pointerId ?? e.changedTouches?.[0].identifier;\n    if (id === currentPointer.current) {\n      focusInput();\n      state.setThumbDragging(index, false);\n      removeGlobalListener(window, 'mouseup', onUp, false);\n      removeGlobalListener(window, 'touchend', onUp, false);\n      removeGlobalListener(window, 'pointerup', onUp, false);\n    }\n  };\n\n  // We install mouse handlers for the drag motion on the thumb div, but\n  // not the key handler for moving the thumb with the slider.  Instead,\n  // we focus the range input, and let the browser handle the keyboard\n  // interactions; we then listen to input's onChange to update state.\n  return {\n    inputProps: mergeProps(focusableProps, fieldProps, {\n      'type': 'range',\n      'tabIndex': !isDisabled ? 0 : undefined,\n      'min': state.getThumbMinValue(index),\n      'max': state.getThumbMaxValue(index),\n      'step': state.step,\n      'value': value,\n      'disabled': isDisabled,\n      'aria-orientation': opts.orientation,\n      'aria-valuetext': state.getThumbValueLabel(index),\n      'aria-required': isRequired || undefined,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': opts['aria-errormessage'],\n      'onChange': (e: ChangeEvent<HTMLInputElement>) => {\n        state.setThumbValue(index, parseFloat(e.target.value));\n      },\n    }),\n    thumbProps: !isDisabled\n      ? mergeProps(moveProps, {\n          onMouseDown: (e: React.MouseEvent<HTMLElement>) => {\n            if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n              return;\n            }\n            onDown();\n          },\n          onPointerDown: (e: React.PointerEvent<HTMLElement>) => {\n            if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n              return;\n            }\n            onDown(e.pointerId);\n          },\n          onTouchStart: (e: React.TouchEvent<HTMLElement>) => {\n            onDown(e.changedTouches[0].identifier);\n          },\n        })\n      : {},\n    labelProps,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}