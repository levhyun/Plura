{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport { usePropsResolution } from '../../../hooks';\nimport { Animated, PanResponder } from 'react-native';\nimport { ModalContext } from '../Modal/Context';\nimport Box from '../../primitives/Box';\nimport { ActionSheetContext } from './ActionSheetContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst Content = /*#__PURE__*/memo( /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    hideDragIndicator,\n    children,\n    handleClose,\n    pan,\n    sheetHeight,\n    ...props\n  } = _ref;\n  const {\n    _dragIndicator,\n    _dragIndicatorWrapperOffSet,\n    _dragIndicatorWrapper,\n    ...resolvedProps\n  } = usePropsResolution('ActionsheetContent', props);\n  const panResponder = React.useRef(PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onMoveShouldSetPanResponder: (_evt, gestureState) => {\n      return gestureState.dy > 15;\n    },\n    onPanResponderMove: (e, gestureState) => {\n      if (gestureState.dy > 0) {\n        Animated.event([null, {\n          dy: pan.y\n        }], {\n          useNativeDriver: false\n        })(e, gestureState);\n      }\n    },\n    onPanResponderRelease: (_e, gestureState) => {\n      // If sheet is dragged 1/4th of it's height, close it\n      if (sheetHeight.current / 4 - gestureState.dy < 0) {\n        Animated.timing(pan, {\n          toValue: {\n            x: 0,\n            y: sheetHeight.current\n          },\n          duration: 150,\n          useNativeDriver: true\n        }).start(handleClose);\n        setTimeout(() => {\n          Animated.timing(pan, {\n            toValue: {\n              x: 0,\n              y: 0\n            },\n            duration: 150,\n            useNativeDriver: true\n          }).start();\n        }, 300);\n      } else {\n        Animated.spring(pan, {\n          toValue: {\n            x: 0,\n            y: 0\n          },\n          overshootClamping: true,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  })).current;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !hideDragIndicator ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, _extends({}, panResponder.panHandlers, _dragIndicatorWrapperOffSet))) : null, /*#__PURE__*/React.createElement(Modal.Content, _extends({}, resolvedProps, {\n    ref: ref,\n    safeAreaBottom: true\n  }), !hideDragIndicator ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, _extends({}, panResponder.panHandlers, _dragIndicatorWrapper), /*#__PURE__*/React.createElement(Box, _dragIndicator))) : null, children));\n}));\nconst ActionsheetContent = (_ref2, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref2;\n  // return null;\n  const {\n    handleClose\n  } = React.useContext(ModalContext);\n  const {\n    hideDragIndicator\n  } = React.useContext(ActionSheetContext);\n  const pan = React.useRef(new Animated.ValueXY()).current;\n  const sheetHeight = React.useRef(0);\n  const handleCloseCallback = React.useCallback(handleClose, [ModalContext, handleClose]); // useEffect(() => {\n  // }, [])\n  //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: {\n      transform: [{\n        translateY: pan.y\n      }],\n      width: '100%'\n    },\n    onLayout: event => {\n      const {\n        height\n      } = event.nativeEvent.layout;\n      sheetHeight.current = height;\n    },\n    pointerEvents: \"box-none\"\n  }, /*#__PURE__*/React.createElement(Content, _extends({\n    children: children,\n    sheetHeight: sheetHeight,\n    pan: pan,\n    hideDragIndicator: hideDragIndicator,\n    handleClose: handleCloseCallback,\n    ref: ref\n  }, props)));\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(ActionsheetContent));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","Modal","usePropsResolution","Animated","PanResponder","ModalContext","Box","ActionSheetContext","useHasResponsiveProps","Content","ref","hideDragIndicator","children","handleClose","pan","sheetHeight","props","_dragIndicator","_dragIndicatorWrapperOffSet","_dragIndicatorWrapper","resolvedProps","panResponder","useRef","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","_evt","gestureState","dy","onPanResponderMove","e","event","y","useNativeDriver","onPanResponderRelease","_e","current","timing","toValue","x","duration","start","setTimeout","spring","overshootClamping","panHandlers","safeAreaBottom","ActionsheetContent","useContext","ValueXY","handleCloseCallback","useCallback","View","style","transform","translateY","width","onLayout","height","nativeEvent","layout","pointerEvents"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\Actionsheet\\ActionsheetContent.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport type { IActionsheetContentProps } from './types';\nimport { usePropsResolution } from '../../../hooks';\nimport { Animated, PanResponder } from 'react-native';\nimport { ModalContext } from '../Modal/Context';\nimport Box from '../../primitives/Box';\nimport { ActionSheetContext } from './ActionSheetContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Content = memo(\n  forwardRef(\n    (\n      {\n        hideDragIndicator,\n        children,\n        handleClose,\n        pan,\n        sheetHeight,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const {\n        _dragIndicator,\n        _dragIndicatorWrapperOffSet,\n        _dragIndicatorWrapper,\n        ...resolvedProps\n      } = usePropsResolution('ActionsheetContent', props);\n\n      const panResponder = React.useRef(\n        PanResponder.create({\n          onStartShouldSetPanResponder: () => true,\n          onMoveShouldSetPanResponder: (_evt, gestureState) => {\n            return gestureState.dy > 15;\n          },\n          onPanResponderMove: (e, gestureState) => {\n            if (gestureState.dy > 0) {\n              Animated.event([null, { dy: pan.y }], {\n                useNativeDriver: false,\n              })(e, gestureState);\n            }\n          },\n          onPanResponderRelease: (_e, gestureState) => {\n            // If sheet is dragged 1/4th of it's height, close it\n            if (sheetHeight.current / 4 - gestureState.dy < 0) {\n              Animated.timing(pan, {\n                toValue: { x: 0, y: sheetHeight.current },\n                duration: 150,\n                useNativeDriver: true,\n              }).start(handleClose);\n\n              setTimeout(() => {\n                Animated.timing(pan, {\n                  toValue: { x: 0, y: 0 },\n                  duration: 150,\n                  useNativeDriver: true,\n                }).start();\n              }, 300);\n            } else {\n              Animated.spring(pan, {\n                toValue: { x: 0, y: 0 },\n                overshootClamping: true,\n                useNativeDriver: true,\n              }).start();\n            }\n          },\n        })\n      ).current;\n\n      return (\n        <>\n          {!hideDragIndicator ? (\n            <>\n              {/* To increase the draggable area */}\n              <Box\n                {...panResponder.panHandlers}\n                {..._dragIndicatorWrapperOffSet}\n              />\n            </>\n          ) : null}\n\n          <Modal.Content {...resolvedProps} ref={ref} safeAreaBottom>\n            {!hideDragIndicator ? (\n              <>\n                {/* Hack. Fix later. Add -2 negative margin to remove the padding added by ActionSheetContent */}\n                <Box {...panResponder.panHandlers} {..._dragIndicatorWrapper}>\n                  <Box {..._dragIndicator} />\n                </Box>\n              </>\n            ) : null}\n\n            {children}\n          </Modal.Content>\n        </>\n      );\n    }\n  )\n);\nconst ActionsheetContent = (\n  { children, ...props }: IActionsheetContentProps,\n  ref?: any\n) => {\n  // return null;\n  const { handleClose } = React.useContext(ModalContext);\n  const { hideDragIndicator } = React.useContext(ActionSheetContext);\n  const pan = React.useRef(new Animated.ValueXY()).current;\n  const sheetHeight = React.useRef(0);\n\n  const handleCloseCallback = React.useCallback(handleClose, [\n    ModalContext,\n    handleClose,\n  ]);\n\n  // useEffect(() => {\n\n  // }, [])\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Animated.View\n      style={{\n        transform: [{ translateY: pan.y }],\n        width: '100%',\n      }}\n      onLayout={(event) => {\n        const { height } = event.nativeEvent.layout;\n        sheetHeight.current = height;\n      }}\n      pointerEvents=\"box-none\"\n    >\n      <Content\n        children={children}\n        sheetHeight={sheetHeight}\n        pan={pan}\n        hideDragIndicator={hideDragIndicator}\n        handleClose={handleCloseCallback}\n        ref={ref}\n        {...props}\n      />\n    </Animated.View>\n  );\n};\n\nexport default memo(forwardRef(ActionsheetContent));\n"]},"metadata":{},"sourceType":"module"}