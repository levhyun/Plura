{"ast":null,"code":"/* eslint-disable */\n//@ts-nocheck\n// This functions is taken from react native web\nimport normalizeColor from './normalizeColor';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\nconst emptyObject = {};\n/**\n * Shadows\n */\n\nconst defaultOffset = {\n  height: 0,\n  width: 0\n};\nexport const createBoxShadowValue = style => {\n  const {\n    shadowColor,\n    shadowOffset,\n    shadowOpacity,\n    shadowRadius\n  } = style;\n  const {\n    height,\n    width\n  } = shadowOffset || defaultOffset;\n  const offsetX = normalizeValueWithProperty(width);\n  const offsetY = normalizeValueWithProperty(height);\n  const blurRadius = normalizeValueWithProperty(shadowRadius || 0);\n  const color = normalizeColor(shadowColor || 'black', shadowOpacity);\n  if (color != null && offsetX != null && offsetY != null && blurRadius != null) {\n    return \"\".concat(offsetX, \" \").concat(offsetY, \" \").concat(blurRadius, \" \").concat(color);\n  }\n};\nexport const createTextShadowValue = style => {\n  const {\n    textShadowColor,\n    textShadowOffset,\n    textShadowRadius\n  } = style;\n  const {\n    height,\n    width\n  } = textShadowOffset || defaultOffset;\n  const radius = textShadowRadius || 0;\n  const offsetX = normalizeValueWithProperty(width);\n  const offsetY = normalizeValueWithProperty(height);\n  const blurRadius = normalizeValueWithProperty(radius);\n  const color = normalizeValueWithProperty(textShadowColor, 'textShadowColor');\n  if (color && (height !== 0 || width !== 0 || radius !== 0) && offsetX != null && offsetY != null && blurRadius != null) {\n    return \"\".concat(offsetX, \" \").concat(offsetY, \" \").concat(blurRadius, \" \").concat(color);\n  }\n};\n/**\n * Preprocess styles\n */\n\nexport const preprocess = originalStyle => {\n  const style = originalStyle || emptyObject;\n  const nextStyle = {};\n  for (const originalProp in style) {\n    const originalValue = style[originalProp];\n    let prop = originalProp;\n    let value = originalValue;\n    if (!Object.prototype.hasOwnProperty.call(style, originalProp) || originalValue == null) {\n      continue;\n    }\n    if (prop === 'elevation') continue; // Convert shadow styles\n\n    if (prop === 'shadowColor' || prop === 'shadowOffset' || prop === 'shadowOpacity' || prop === 'shadowRadius') {\n      const boxShadowValue = createBoxShadowValue(style);\n      if (boxShadowValue != null && nextStyle.boxShadow == null) {\n        const {\n          boxShadow\n        } = style;\n        prop = 'boxShadow';\n        value = boxShadow ? \"\".concat(boxShadow, \", \").concat(boxShadowValue) : boxShadowValue;\n      } else {\n        continue;\n      }\n    } // Convert text shadow styles\n\n    if (prop === 'textShadowColor' || prop === 'textShadowOffset' || prop === 'textShadowRadius') {\n      const textShadowValue = createTextShadowValue(style);\n      if (textShadowValue != null && nextStyle.textShadow == null) {\n        const {\n          textShadow\n        } = style;\n        prop = 'textShadow';\n        value = textShadow ? \"\".concat(textShadow, \", \").concat(textShadowValue) : textShadowValue;\n      } else {\n        continue;\n      }\n    }\n    nextStyle[prop] = value;\n  } // $FlowIgnore\n\n  return nextStyle;\n};\nexport default preprocess;","map":{"version":3,"mappings":"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","names":["normalizeColor","normalizeValueWithProperty","emptyObject","defaultOffset","height","width","createBoxShadowValue","style","shadowColor","shadowOffset","shadowOpacity","shadowRadius","offsetX","offsetY","blurRadius","color","createTextShadowValue","textShadowColor","textShadowOffset","textShadowRadius","radius","preprocess","originalStyle","nextStyle","originalProp","originalValue","prop","value","Object","prototype","hasOwnProperty","call","boxShadowValue","boxShadow","textShadowValue","textShadow"],"sources":["C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\native-base\\lib\\module\\utils\\react-native-web-fucntions\\preprocess.ts"],"sourcesContent":["/* eslint-disable */\n//@ts-nocheck\n// This functions is taken from react native web\n\nimport normalizeColor from './normalizeColor';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\n\nconst emptyObject = {};\n\n/**\n * Shadows\n */\n\nconst defaultOffset = { height: 0, width: 0 };\n\nexport const createBoxShadowValue = (style: any): void | string => {\n  const { shadowColor, shadowOffset, shadowOpacity, shadowRadius } = style;\n  const { height, width } = shadowOffset || defaultOffset;\n  const offsetX = normalizeValueWithProperty(width);\n  const offsetY = normalizeValueWithProperty(height);\n  const blurRadius = normalizeValueWithProperty(shadowRadius || 0);\n  const color = normalizeColor(shadowColor || 'black', shadowOpacity);\n  if (\n    color != null &&\n    offsetX != null &&\n    offsetY != null &&\n    blurRadius != null\n  ) {\n    return `${offsetX} ${offsetY} ${blurRadius} ${color}`;\n  }\n};\n\nexport const createTextShadowValue = (style: any): void | string => {\n  const { textShadowColor, textShadowOffset, textShadowRadius } = style;\n  const { height, width } = textShadowOffset || defaultOffset;\n  const radius = textShadowRadius || 0;\n  const offsetX = normalizeValueWithProperty(width);\n  const offsetY = normalizeValueWithProperty(height);\n  const blurRadius = normalizeValueWithProperty(radius);\n  const color = normalizeValueWithProperty(textShadowColor, 'textShadowColor');\n\n  if (\n    color &&\n    (height !== 0 || width !== 0 || radius !== 0) &&\n    offsetX != null &&\n    offsetY != null &&\n    blurRadius != null\n  ) {\n    return `${offsetX} ${offsetY} ${blurRadius} ${color}`;\n  }\n};\n\n/**\n * Preprocess styles\n */\nexport const preprocess = (originalStyle: any) => {\n  const style = originalStyle || emptyObject;\n  const nextStyle: any = {};\n  for (const originalProp in style) {\n    const originalValue = style[originalProp];\n\n    let prop = originalProp;\n    let value = originalValue;\n\n    if (\n      !Object.prototype.hasOwnProperty.call(style, originalProp) ||\n      originalValue == null\n    ) {\n      continue;\n    }\n\n    if (prop === 'elevation') continue;\n    // Convert shadow styles\n    if (\n      prop === 'shadowColor' ||\n      prop === 'shadowOffset' ||\n      prop === 'shadowOpacity' ||\n      prop === 'shadowRadius'\n    ) {\n      const boxShadowValue = createBoxShadowValue(style);\n\n      if (boxShadowValue != null && nextStyle.boxShadow == null) {\n        const { boxShadow } = style;\n        prop = 'boxShadow';\n        value = boxShadow ? `${boxShadow}, ${boxShadowValue}` : boxShadowValue;\n      } else {\n        continue;\n      }\n    }\n\n    // Convert text shadow styles\n    if (\n      prop === 'textShadowColor' ||\n      prop === 'textShadowOffset' ||\n      prop === 'textShadowRadius'\n    ) {\n      const textShadowValue = createTextShadowValue(style);\n      if (textShadowValue != null && nextStyle.textShadow == null) {\n        const { textShadow } = style;\n        prop = 'textShadow';\n        value = textShadow\n          ? `${textShadow}, ${textShadowValue}`\n          : textShadowValue;\n      } else {\n        continue;\n      }\n    }\n\n    nextStyle[prop] = value;\n  }\n\n  // $FlowIgnore\n  return nextStyle;\n};\n\nexport default preprocess;\n"]},"metadata":{},"sourceType":"module"}