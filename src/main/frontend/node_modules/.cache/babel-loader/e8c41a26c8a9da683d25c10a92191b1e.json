{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport Text from '../../primitives/Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../../primitives/Pressable';\nimport { MenuContext } from './MenuContext';\nimport { useMenuItem } from './useMenu';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst MenuItem = (_ref, ref) => {\n  let {\n    children,\n    isDisabled,\n    onPress,\n    textValue,\n    ...props\n  } = _ref;\n  const {\n    closeOnSelect,\n    onClose\n  } = React.useContext(MenuContext);\n  const menuItemRef = React.useRef(null);\n  const mergedRef = mergeRefs([menuItemRef, ref]);\n  const {\n    _text,\n    ...resolvedProps\n  } = usePropsResolution('MenuItem', props, {\n    isDisabled\n  }, {\n    cascadePseudoProps: true\n  });\n  const [textContent, setTextContent] = React.useState('');\n  React.useEffect(() => {\n    const menuItem = menuItemRef.current;\n    if (menuItem) {\n      var _menuItem$textContent;\n      setTextContent(((_menuItem$textContent = menuItem.textContent) !== null && _menuItem$textContent !== void 0 ? _menuItem$textContent : '').trim());\n    }\n  }, [children]);\n  const menuItemProps = useMenuItem({\n    textValue: textValue !== null && textValue !== void 0 ? textValue : textContent,\n    ref: menuItemRef\n  }); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Pressable, _extends({}, menuItemProps, resolvedProps, {\n    ref: mergedRef,\n    disabled: isDisabled,\n    accessibilityState: {\n      disabled: isDisabled\n    },\n    onPress: e => {\n      if (!isDisabled) {\n        onPress && onPress(e);\n        if (closeOnSelect) {\n          onClose && onClose();\n        }\n      }\n    }\n  }), /*#__PURE__*/React.createElement(React.Fragment, null, React.Children.map(children, (child, index) => {\n    if (typeof child === 'string' || typeof child === 'number') {\n      return /*#__PURE__*/React.createElement(Text, _extends({}, _text, {\n        key: \"menu-item-\".concat(index)\n      }), child);\n    } else {\n      return child;\n    }\n  })));\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(MenuItem));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,SAAT,QAA0B,4BAA1B;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,QAAQ,GAAG,OAEfC,GAFe,KAGZ;EAAA,IAFH;IAAEC,QAAF;IAAYC,UAAZ;IAAwBC,OAAxB;IAAiCC,SAAjC;IAA4C,GAAGC;EAA/C,CADe;EAIf,MAAM;IAAEC,aAAF;IAAiBC;EAAjB,IAA6BlB,KAAK,CAACmB,UAAN,CAAiBb,WAAjB,CAAnC;EACA,MAAMc,WAAW,GAAGpB,KAAK,CAACqB,MAAN,CAAkB,IAAlB,CAApB;EACA,MAAMC,SAAS,GAAGd,SAAS,CAAC,CAACY,WAAD,EAAcT,GAAd,CAAD,CAA3B;EACA,MAAM;IAAEY,KAAF;IAAS,GAAGC;EAAZ,IAA8BpB,kBAAkB,CACpD,UADoD,EAEpDY,KAFoD,EAGpD;IACEH;EADF,CAHoD,EAMpD;IACEY,kBAAkB,EAAE;EADtB,CANoD,CAAtD;EAUA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC3B,KAAK,CAAC4B,QAAN,CAAe,EAAf,CAAtC;EACA5B,KAAK,CAAC6B,SAAN,CAAgB,MAAM;IACpB,MAAMC,QAAQ,GAAGV,WAAW,CAACW,OAA7B;IACA,IAAID,QAAJ,EAAc;MAAA;MACZH,cAAc,CAAC,0BAACG,QAAQ,CAACJ,WAAV,yEAAyB,EAAzB,EAA6BM,IAA7B,EAAD,CAAd;IACD;EACF,CALD,EAKG,CAACpB,QAAD,CALH;EAOA,MAAMqB,aAAa,GAAG1B,WAAW,CAAC;IAChCQ,SAAS,EAAEA,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAeW,WADQ;IAEhCf,GAAG,EAAES;EAF2B,CAAD,CAAjC,CAtBG,CA2BH;;EACA,IAAIX,qBAAqB,CAACO,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,oBACEhB,oBAACK,SAAD,eACM4B,aADN,EAEMT,aAFN;IAGEb,GAAG,EAAEW,SAHP;IAIEY,QAAQ,EAAErB,UAJZ;IAKEsB,kBAAkB,EAAE;MAClBD,QAAQ,EAAErB;IADQ,CALtB;IAQEC,OAAO,EAAGsB,CAAD,IAAY;MACnB,IAAI,CAACvB,UAAL,EAAiB;QACfC,OAAO,IAAIA,OAAO,CAACsB,CAAD,CAAlB;QACA,IAAInB,aAAJ,EAAmB;UACjBC,OAAO,IAAIA,OAAO,EAAlB;QACD;MACF;IACF;EAfH,iBAiBElB,0CACGA,KAAK,CAACqC,QAAN,CAAeC,GAAf,CAAmB1B,QAAnB,EAA6B,CAAC2B,KAAD,EAAQC,KAAR,KAAuB;IACnD,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;MAC1D,oBACEvC,oBAACG,IAAD,eAAUoB,KAAV;QAAiBkB,GAAG,sBAAeD,KAAf;MAApB,IACGD,KADH,CADF;IAKD,CAND,MAMO;MACL,OAAOA,KAAP;IACD;EACF,CAVA,CADH,CAjBF,CADF;AAiCD,CAnED;AAqEA,4BAAerC,IAAI,eAACD,UAAU,CAACS,QAAD,CAAX,CAAnB","names":["React","forwardRef","memo","Text","usePropsResolution","Pressable","MenuContext","useMenuItem","mergeRefs","useHasResponsiveProps","MenuItem","ref","children","isDisabled","onPress","textValue","props","closeOnSelect","onClose","useContext","menuItemRef","useRef","mergedRef","_text","resolvedProps","cascadePseudoProps","textContent","setTextContent","useState","useEffect","menuItem","current","trim","menuItemProps","disabled","accessibilityState","e","Children","map","child","index","key"],"sources":["C:\\Users\\user\\node_modules\\native-base\\lib\\module\\components\\composites\\Menu\\MenuItem.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport Text from '../../primitives/Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../../primitives/Pressable';\nimport type { IMenuItemProps } from './types';\nimport { MenuContext } from './MenuContext';\nimport { useMenuItem } from './useMenu';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItem = (\n  { children, isDisabled, onPress, textValue, ...props }: IMenuItemProps,\n  ref: any\n) => {\n  const { closeOnSelect, onClose } = React.useContext(MenuContext);\n  const menuItemRef = React.useRef<any>(null);\n  const mergedRef = mergeRefs([menuItemRef, ref]);\n  const { _text, ...resolvedProps } = usePropsResolution(\n    'MenuItem',\n    props,\n    {\n      isDisabled,\n    },\n    {\n      cascadePseudoProps: true,\n    }\n  );\n  const [textContent, setTextContent] = React.useState('');\n  React.useEffect(() => {\n    const menuItem = menuItemRef.current;\n    if (menuItem) {\n      setTextContent((menuItem.textContent ?? '').trim());\n    }\n  }, [children]);\n\n  const menuItemProps = useMenuItem({\n    textValue: textValue ?? textContent,\n    ref: menuItemRef,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Pressable\n      {...menuItemProps}\n      {...resolvedProps}\n      ref={mergedRef}\n      disabled={isDisabled}\n      accessibilityState={{\n        disabled: isDisabled,\n      }}\n      onPress={(e: any) => {\n        if (!isDisabled) {\n          onPress && onPress(e);\n          if (closeOnSelect) {\n            onClose && onClose();\n          }\n        }\n      }}\n    >\n      <>\n        {React.Children.map(children, (child, index: any) => {\n          if (typeof child === 'string' || typeof child === 'number') {\n            return (\n              <Text {..._text} key={`menu-item-${index}`}>\n                {child}\n              </Text>\n            );\n          } else {\n            return child;\n          }\n        })}\n      </>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(MenuItem));\n"]},"metadata":{},"sourceType":"module"}