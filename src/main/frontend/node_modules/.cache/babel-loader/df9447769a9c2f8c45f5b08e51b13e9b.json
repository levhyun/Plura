{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { VStack } from '../Stack';\nimport { usePropsResolution } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst UnorderedList = (_ref, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  const {\n    _text,\n    _hover,\n    ...resolvedProps\n  } = usePropsResolution('List', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  } // add props to children\n\n  children = React.Children.map(children, (child, ind) => {\n    return /*#__PURE__*/React.cloneElement(child, {\n      index: ind,\n      ul: true,\n      _text: _text,\n      _hover,\n      ...child.props\n    }, child.props.children);\n  });\n  return /*#__PURE__*/React.createElement(VStack, _extends({}, resolvedProps, {\n    ref: ref\n  }), children);\n};\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(UnorderedList));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,aAAa,GAAG,OAAqCC,GAArC,KAAmD;EAAA,IAAlD;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAAD;EACpB,MAAM;IAAEC,KAAF;IAASC,MAAT;IAAiB,GAAGC;EAApB,IAAsCR,kBAAkB,CAAC,MAAD,EAASK,KAAT,CAA9D,CADuE,CAEvE;;EACA,IAAIJ,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD,CALsE,CAMvE;;EACAD,QAAQ,GAAGN,KAAK,CAACW,QAAN,CAAeC,GAAf,CAAmBN,QAAnB,EAA6B,CAACO,KAAD,EAAaC,GAAb,KAA6B;IACnE,oBAAOd,KAAK,CAACe,YAAN,CACLF,KADK,EAEL;MACEG,KAAK,EAAEF,GADT;MAEEG,EAAE,EAAE,IAFN;MAGET,KAAK,EAAEA,KAHT;MAIEC,MAJF;MAKE,GAAGI,KAAK,CAACN;IALX,CAFK,EASLM,KAAK,CAACN,KAAN,CAAYD,QATP,CAAP;EAWD,CAZU,CAAX;EAcA,oBACEN,oBAACC,MAAD,eAAYS,aAAZ;IAA2BL,GAAG,EAAEA;EAAhC,IACGC,QADH,CADF;AAKD,CA1BD;AA4BA,4BAAeN,KAAK,CAACkB,IAAN,eAAWlB,KAAK,CAACmB,UAAN,CAAiBf,aAAjB,CAAX,CAAf","names":["React","VStack","usePropsResolution","useHasResponsiveProps","UnorderedList","ref","children","props","_text","_hover","resolvedProps","Children","map","child","ind","cloneElement","index","ul","memo","forwardRef"],"sources":["C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\native-base\\lib\\module\\components\\primitives\\List\\Unordered.tsx"],"sourcesContent":["import React from 'react';\nimport { VStack } from '../Stack';\nimport type { IListProps } from './types';\nimport { usePropsResolution } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst UnorderedList = ({ children, ...props }: IListProps, ref?: any) => {\n  const { _text, _hover, ...resolvedProps } = usePropsResolution('List', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  // add props to children\n  children = React.Children.map(children, (child: any, ind: number) => {\n    return React.cloneElement(\n      child,\n      {\n        index: ind,\n        ul: true,\n        _text: _text,\n        _hover,\n        ...child.props,\n      },\n      child.props.children\n    );\n  });\n\n  return (\n    <VStack {...resolvedProps} ref={ref}>\n      {children}\n    </VStack>\n  );\n};\n\nexport default React.memo(React.forwardRef(UnorderedList));\n"]},"metadata":{},"sourceType":"module"}