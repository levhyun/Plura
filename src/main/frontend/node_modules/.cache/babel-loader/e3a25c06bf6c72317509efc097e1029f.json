{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { Pressable } from '../../primitives/Pressable';\nimport { Icon } from '../../primitives/Icon';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers } from '../../../utils';\nimport { useHover, useFocus, useIsPressed } from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport merge from 'lodash.merge';\nconst IconButton = (_ref, ref) => {\n  let {\n    icon,\n    _icon: pseudoIconProp,\n    children,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    isDisabled,\n    ...props\n  } = _ref;\n  const {\n    hoverProps,\n    isHovered\n  } = useHover();\n  const {\n    pressableProps,\n    isPressed\n  } = useIsPressed();\n  const {\n    focusProps,\n    isFocused\n  } = useFocus();\n  const {\n    isFocusVisible,\n    focusProps: focusRingProps\n  } = useFocusRing();\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('IconButton', {\n    ...props,\n    _icon: merge({}, pseudoIconProp, icon === null || icon === void 0 ? void 0 : icon.props)\n  }, {\n    isHovered: isHoveredProp || isHovered,\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled\n  });\n  let clonedIcon;\n  if (icon) {\n    clonedIcon = /*#__PURE__*/React.cloneElement(icon, {\n      ..._icon\n    });\n  } //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Pressable, _extends({\n    disabled: isDisabled,\n    accessibilityRole: \"button\",\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut) // @ts-ignore - web only\n    ,\n\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn) // @ts-ignore - web only\n    ,\n\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut) // @ts-ignore - web only\n    ,\n\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus) // @ts-ignore - web only\n    ,\n\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur)\n  }, resolvedProps), clonedIcon || /*#__PURE__*/React.createElement(Icon, _icon, children));\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(IconButton));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,oBAAT,QAAqC,gBAArC;AAEA,SACEC,QADF,EAEEC,QAFF,EAGEC,YAHF,QAIO,sCAJP;AAKA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,MAAMC,UAAU,GAAG,OAYjBC,GAZiB,KAad;EAAA,IAZH;IACEC,IADF;IAEEC,KAAK,EAAEC,cAFT;IAGEC,QAHF;IAIEC,SAAS,EAAEC,aAJb;IAKEC,SAAS,EAAEC,aALb;IAMEC,SAAS,EAAEC,aANb;IAOEC,cAAc,EAAEC,kBAPlB;IAQEC,UARF;IASE,GAAGC;EATL,CADiB;EAcjB,MAAM;IAAEC,UAAF;IAAcV;EAAd,IAA4BX,QAAQ,EAA1C;EACA,MAAM;IAAEsB,cAAF;IAAkBT;EAAlB,IAAgCX,YAAY,EAAlD;EACA,MAAM;IAAEqB,UAAF;IAAcR;EAAd,IAA4Bd,QAAQ,EAA1C;EACA,MAAM;IAAEgB,cAAF;IAAkBM,UAAU,EAAEC;EAA9B,IAAsDrB,YAAY,EAAxE;EAEA,MAAM;IACJK,KADI;IAEJiB,SAFI;IAGJC,UAHI;IAIJC,SAJI;IAKJC,UALI;IAMJC,OANI;IAOJC,MAPI;IAQJ,GAAGC;EARC,IASFlC,kBAAkB,CACpB,YADoB,EAEpB;IAAE,GAAGuB,KAAL;IAAYZ,KAAK,EAAEJ,KAAK,CAAC,EAAD,EAAKK,cAAL,EAAqBF,IAArB,aAAqBA,IAArB,uBAAqBA,IAAI,CAAEa,KAA3B;EAAxB,CAFoB,EAGpB;IACET,SAAS,EAAEC,aAAa,IAAID,SAD9B;IAEEE,SAAS,EAAEC,aAAa,IAAID,SAF9B;IAGEE,SAAS,EAAEC,aAAa,IAAID,SAH9B;IAIEE,cAAc,EAAEC,kBAAkB,IAAID,cAJxC;IAKEE;EALF,CAHoB,CATtB;EAqBA,IAAIa,UAAJ;EACA,IAAIzB,IAAJ,EAAU;IACRyB,UAAU,gBAAGxC,KAAK,CAACyC,YAAN,CAAmB1B,IAAnB,EAAyB;MACpC,GAAGC;IADiC,CAAzB,CAAb;EAGD,CAhCE,CAkCH;;EACA,IAAIV,qBAAqB,CAACsB,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,oBACE5B,oBAACG,SAAD;IACEuC,QAAQ,EAAEf,UADZ;IAEEgB,iBAAiB,EAAC,QAFpB;IAGE7B,GAAG,EAAEA,GAHP;IAIEmB,SAAS,EAAE1B,oBAAoB,CAAC0B,SAAD,EAAYH,cAAc,CAACG,SAA3B,CAJjC;IAKEC,UAAU,EAAE3B,oBAAoB,CAAC2B,UAAD,EAAaJ,cAAc,CAACI,UAA5B,CALlC,CAME;IAAA;;IACAC,SAAS,EAAE5B,oBAAoB,CAAC4B,SAAD,EAAYN,UAAU,CAACM,SAAvB,CAPjC,CAQE;IAAA;;IACAC,UAAU,EAAE7B,oBAAoB,CAAC6B,UAAD,EAAaP,UAAU,CAACO,UAAxB,CATlC,CAUE;IAAA;;IACAC,OAAO,EAAE9B,oBAAoB,CAC3BA,oBAAoB,CAAC8B,OAAD,EAAUN,UAAU,CAACM,OAArB,CADO,EAE3BL,cAAc,CAACK,OAFY,CAX/B,CAeE;IAAA;;IACAC,MAAM,EAAE/B,oBAAoB,CAC1BA,oBAAoB,CAAC+B,MAAD,EAASP,UAAU,CAACO,MAApB,CADM,EAE1BN,cAAc,CAACM,MAFW;EAhB9B,GAoBMC,aApBN,GAsBGC,UAAU,iBAAIxC,oBAACI,IAAD,EAAUY,KAAV,EAAkBE,QAAlB,CAtBjB,CADF;AA0BD,CA9ED;AAgFA,4BAAejB,IAAI,eAACC,UAAU,CAACW,UAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Pressable","Icon","usePropsResolution","useHasResponsiveProps","composeEventHandlers","useHover","useFocus","useIsPressed","useFocusRing","merge","IconButton","ref","icon","_icon","pseudoIconProp","children","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","isDisabled","props","hoverProps","pressableProps","focusProps","focusRingProps","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","clonedIcon","cloneElement","disabled","accessibilityRole"],"sources":["C:\\Users\\user\\Desktop\\대회\\Plura\\src\\main\\frontend\\node_modules\\native-base\\lib\\module\\components\\composites\\IconButton\\index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Pressable } from '../../primitives/Pressable';\nimport { Icon } from '../../primitives/Icon';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IIconButtonProps } from './types';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport merge from 'lodash.merge';\n\nconst IconButton = (\n  {\n    icon,\n    _icon: pseudoIconProp,\n    children,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    isDisabled,\n    ...props\n  }: IIconButtonProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution(\n    'IconButton',\n    { ...props, _icon: merge({}, pseudoIconProp, icon?.props) },\n    {\n      isHovered: isHoveredProp || isHovered,\n      isPressed: isPressedProp || isPressed,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled,\n    }\n  );\n\n  let clonedIcon;\n  if (icon) {\n    clonedIcon = React.cloneElement(icon, {\n      ..._icon,\n    });\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      disabled={isDisabled}\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n    >\n      {clonedIcon || <Icon {..._icon}>{children}</Icon>}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(IconButton));\nexport type { IIconButtonProps };\n"]},"metadata":{},"sourceType":"module"}